{"version":3,"file":"static/chunks/6499-2f688c7b8308307f.js","mappings":"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","sources":["webpack://_N_E/../../common/temp/node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/hasClass.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/addClass.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/dom-helpers@5.2.1/node_modules/dom-helpers/esm/removeClass.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/react-transition-group@4.4.5_biqbaboplfbrettd7655fr4n2y/node_modules/react-transition-group/esm/config.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/react-transition-group@4.4.5_biqbaboplfbrettd7655fr4n2y/node_modules/react-transition-group/esm/utils/reflow.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/react-transition-group@4.4.5_biqbaboplfbrettd7655fr4n2y/node_modules/react-transition-group/esm/Transition.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/react-transition-group@4.4.5_biqbaboplfbrettd7655fr4n2y/node_modules/react-transition-group/esm/CSSTransition.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@babel+runtime@7.23.2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/react-transition-group@4.4.5_biqbaboplfbrettd7655fr4n2y/node_modules/react-transition-group/esm/utils/ChildMapping.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/react-transition-group@4.4.5_biqbaboplfbrettd7655fr4n2y/node_modules/react-transition-group/esm/TransitionGroup.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/react-transition-group@4.4.5_biqbaboplfbrettd7655fr4n2y/node_modules/react-transition-group/esm/TransitionGroupContext.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@babel+runtime@7.23.2/node_modules/@babel/runtime/helpers/esm/extends.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@babel+runtime@7.23.2/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@babel+runtime@7.23.2/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://_N_E/../../common/temp/node_modules/.pnpm/@babel+runtime@7.23.2/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","import hasClass from './hasClass';\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","export default {\n  disabled: false\n};","export var forceReflow = function forceReflow(node) {\n  return node.scrollTop;\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { forceReflow } from './utils/reflow';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        if (this.props.unmountOnExit || this.props.mountOnEnter) {\n          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749\n          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.\n          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.\n\n          if (node) forceReflow(node);\n        }\n\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\nimport { forceReflow } from './utils/reflow';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      if (node) forceReflow(node);\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = (key in prevChildMapping);\n    var hasNext = (key in nextChildMapping);\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;","import React from 'react';\nexport default React.createContext(null);","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}"],"names":["replaceClassName","origClass","classToRemove","replace","config","disabled","forceReflow","node","scrollTop","UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING","Transition","_React$Component","props","context","_this","call","initialStatus","appear","parentGroup","isMounting","enter","appearStatus","in","unmountOnExit","mountOnEnter","state","status","nextCallback","inheritsLoose","Z","getDerivedStateFromProps","_ref","prevState","_proto","prototype","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","exit","timeout","undefined","mounting","nodeRef","current","react_dom","findDOMNode","performEnter","performExit","setState","_this2","appearing","_ref2","maybeNode","maybeAppearing","timeouts","enterTimeout","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExited","onExit","onExiting","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","doesNotHaveTimeoutOrListener","addEndListener","setTimeout","_ref3","maybeNextCallback","render","_this$props","children","childProps","objectWithoutPropertiesLoose","react","createElement","TransitionGroupContext","Provider","value","cloneElement","Children","only","Component","noop","contextType","propTypes","defaultProps","removeClass","classes","split","forEach","c","element","classList","remove","className","setAttribute","baseVal","CSSTransition","_len","arguments","length","args","_key","apply","concat","appliedClasses","_this$resolveArgument","resolveArguments","removeClasses","addClass","_this$resolveArgument2","_this$resolveArgument3","type","_this$resolveArgument4","_this$resolveArgument5","_this$resolveArgument6","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","phase","_this$getClassNames","add","contains","indexOf","_this$appliedClasses$","base","done","esm_extends","esm_CSSTransition","getChildMapping","mapFn","result","Object","create","map","child","key","isValidElement","getProp","prop","values","obj","keys","k","TransitionGroup","handleExited","bind","_assertThisInitialized","self","contextValue","firstRender","mounted","nextProps","nextChildMapping","prevChildMapping","mergeChildMappings","prev","next","getValueForKey","i","nextKeysPending","pendingKeys","prevKey","push","childMapping","nextKey","pendingNextKey","hasPrev","hasNext","prevChild","isLeaving","currentChildMapping","component","childFactory","esm_TransitionGroup","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","createContext","_extends","assign","target","source","hasOwnProperty","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","constructor","_objectWithoutPropertiesLoose","excluded","sourceKeys"],"sourceRoot":""}