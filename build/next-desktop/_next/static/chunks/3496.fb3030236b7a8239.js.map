{"version":3,"file":"static/chunks/3496.fb3030236b7a8239.js","mappings":"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","sources":["webpack://_N_E/./src/domain/shared/lib/container/desktopContainer.ts","webpack://_N_E/<anon>"],"sourcesContent":["// Временно перестаем чекать этот файл, потому что у нас проблемы с рекурсивными типами\n// Задача на починку https://st.yandex-team.ru/MFRONT-6134\n// @ts-nocheck\n\nimport { IoCContainer, singleton, factory } from '@yandex-music-int/container';\nimport { HttpClientRequestOptions } from '@yandex-music-int/http-client';\nimport { BrowserHttpClient } from '@yandex-music-int/http-client/browser';\nimport { LogLevels } from '@yandex-music-int/logger';\nimport { BrowserLogger } from '@yandex-music-int/logger/browser';\nimport {\n    AccountResource,\n    AlbumsResource,\n    ArtistsResource,\n    LandingResource,\n    LibraryResource,\n    MusicExternalApiResourceLanguage,\n    RotorResource,\n    SearchResource,\n    SlidesResource,\n    TopResource,\n    TracksResource,\n    UsersResource,\n    PlaylistResource\n} from '@yandex-music-int/resource-collection';\nimport { ClientLocalStorage, ClientSessionStorage, DummyStorage } from '@yandex-music-int/storage';\n\nimport { getExternalApiClientName } from '../../api/index.js';\nimport { DesktopAuthorization } from '../authorization/index.js';\nimport { getConfig } from '../config/getConfig.js';\nimport { getTLDHost } from '../router/utils/getTLDHost.js';\nimport { Storage } from '../types/Storage.js';\n\nimport {\n    CONTAINER_APP_ALBUM_RESOURCE_TOKEN,\n    CONTAINER_APP_ARTISTS_RESOURCE_TOKEN,\n    CONTAINER_APP_LANDING_RESOURCE_TOKEN,\n    CONTAINER_APP_LIBRARY_RESOURCE_TOKEN,\n    CONTAINER_APP_RESOURCE_TOKEN,\n    CONTAINER_APP_ROTOR_RESOURCE_TOKEN,\n    CONTAINER_APP_SEARCH_RESOURCE,\n    CONTAINER_APP_SLIDES_RESOURCE_TOKEN,\n    CONTAINER_APP_TOP_RESOURCE_TOKEN,\n    CONTAINER_APP_TRACKS_RESOURCE_TOKEN,\n    CONTAINER_APP_USERS_RESOURCE_TOKEN,\n    CONTAINER_AUTHORIZATION,\n    CONTAINER_CONFIG_TOKEN,\n    CONTAINER_COOKIE_STORAGE,\n    CONTAINER_HTTP_CLIENT_TOKEN,\n    CONTAINER_LOCAL_STORAGE,\n    CONTAINER_LOGGER_TOKEN,\n    CONTAINER_SESSION_STORAGE,\n    CONTAINER_STORAGE,\n    CONTAINER_APP_PLAYLIST_RESOURCE_TOKEN\n} from './constants/tokens.js';\n\n// Отключаем правила, так как сложно сделать определение возвращаемого типа\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type\nexport async function createDesktopContainer(tld: string) {\n    const config = await getConfig(process.env.NEXT_PUBLIC_CONFIG_ENV);\n\n    return new IoCContainer()\n        .register(\n            CONTAINER_HTTP_CLIENT_TOKEN,\n            factory(() => (options?: HttpClientRequestOptions) => new BrowserHttpClient(options))\n        )\n        .register(\n            CONTAINER_LOGGER_TOKEN,\n            singleton(\n                () =>\n                    new BrowserLogger({\n                        maxLogLevel: LogLevels.DEBUG\n                    })\n            )\n        )\n        .register(\n            CONTAINER_CONFIG_TOKEN,\n            singleton(() => config)\n        )\n        .register(\n            CONTAINER_STORAGE,\n            singleton(() => new ClientLocalStorage<Storage>())\n        )\n        .register(\n            CONTAINER_COOKIE_STORAGE,\n            singleton(() => new DummyStorage<Storage>(`client ${process.env.BUILD_TYPE}`, 'cookie'))\n        )\n        .register(\n            CONTAINER_LOCAL_STORAGE,\n            singleton(() => new ClientLocalStorage<Storage>())\n        )\n        .register(\n            CONTAINER_AUTHORIZATION,\n            singleton(\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) =>\n                    new DesktopAuthorization(container.get(CONTAINER_STORAGE), container.get(CONTAINER_CONFIG_TOKEN))\n            )\n        )\n        .register(\n            CONTAINER_APP_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new AccountResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_USERS_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new UsersResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_LANDING_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new LandingResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_ALBUM_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new AlbumsResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_LIBRARY_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new LibraryResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_TRACKS_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new TracksResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_TOP_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new TopResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_ARTISTS_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new ArtistsResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_SLIDES_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new SlidesResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_ROTOR_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new RotorResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_SEARCH_RESOURCE,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new SearchResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_PLAYLIST_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory();\n                    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n                    return new PlaylistResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        params: {\n                            common: {\n                                oauth: authorization.token,\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_SESSION_STORAGE,\n            singleton(() => new ClientSessionStorage<Storage>())\n        );\n}\n"],"names":["createDesktopContainer","tld","config","getConfig","process","IoCContainer","register","CONTAINER_HTTP_CLIENT_TOKEN","factory","BrowserHttpClient","options","CONTAINER_LOGGER_TOKEN","singleton","BrowserLogger","maxLogLevel","LogLevels","DEBUG","CONTAINER_CONFIG_TOKEN","CONTAINER_STORAGE","ClientLocalStorage","CONTAINER_COOKIE_STORAGE","DummyStorage","concat","CONTAINER_LOCAL_STORAGE","CONTAINER_AUTHORIZATION","DesktopAuthorization","container","get","CONTAINER_APP_RESOURCE_TOKEN","resources","musicExternalApi","httpClientFactory","httpClient","authorization","AccountResource","prefixUrl","getTLDHost","retryPolicyConfig","params","common","oauth","token","client","getExternalApiClientName","language","MusicExternalApiResourceLanguage","RU","CONTAINER_APP_USERS_RESOURCE_TOKEN","UsersResource","CONTAINER_APP_LANDING_RESOURCE_TOKEN","LandingResource","CONTAINER_APP_ALBUM_RESOURCE_TOKEN","AlbumsResource","CONTAINER_APP_LIBRARY_RESOURCE_TOKEN","LibraryResource","CONTAINER_APP_TRACKS_RESOURCE_TOKEN","TracksResource","CONTAINER_APP_TOP_RESOURCE_TOKEN","TopResource","CONTAINER_APP_ARTISTS_RESOURCE_TOKEN","ArtistsResource","CONTAINER_APP_SLIDES_RESOURCE_TOKEN","SlidesResource","CONTAINER_APP_ROTOR_RESOURCE_TOKEN","RotorResource","CONTAINER_APP_SEARCH_RESOURCE","SearchResource","CONTAINER_APP_PLAYLIST_RESOURCE_TOKEN","PlaylistResource","CONTAINER_SESSION_STORAGE","ClientSessionStorage"],"sourceRoot":""}