{"version":3,"file":"static/chunks/4465.9514a9ad0b366232.js","mappings":"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","sources":["webpack://_N_E/../../packages/metrics/build/constants/metricTypes.js","webpack://_N_E/./src/domain/shared/lib/typeGuards/isRequestError.ts","webpack://_N_E/./src/domain/shared/lib/metrics/collectApiMetrics.ts","webpack://_N_E/./src/domain/shared/lib/container/clientContainer.ts","webpack://_N_E/../../packages/http-client/build/types/HttpResponseStatusCode.js","webpack://_N_E/../../packages/http-client/build/index.js","webpack://_N_E/<anon>"],"sourcesContent":["export const HTTP_ERROR_RATE_PER_SECOND = 'http_error_rate_per_second';\nexport const HTTP_API_ERROR_RATE_PER_SECOND = 'http_api_error_rate_per_second';\nexport const HTTP_REQUEST_RATE_PER_SECOND = 'http_request_rate_per_second';\nexport const HTTP_API_REQUEST_RATE_PER_SECOND = 'http_api_request_rate_per_second';\nexport const HTTP_RETRY_RATE_PER_SECOND = 'http_retry_rate_per_second';\nexport const HTTP_API_RETRY_RATE_PER_SECOND = 'http_api_retry_rate_per_second';\nexport const HTTP_RESPONSE_DURATION_SECOND = 'http_response_duration_second';\nexport const HTTP_API_RESPONSE_DURATION_SECOND = 'http_api_response_duration_second';\nexport const HTTP_RESPONSE_STATUS_RATE_PER_SECOND = 'http_response_status_rate_per_second';\nexport const HTTP_API_RESPONSE_STATUS_RATE_PER_SECOND = 'http_api_response_status_rate_per_second';\nexport const HTTP_ERROR = 'http_error';\nexport const HTTP_API_ERROR = 'http_api_error';\nexport const HTTP_REQUEST = 'http_request';\nexport const HTTP_API_REQUEST = 'http_api_request';\n//# sourceMappingURL=metricTypes.js.map","import type { HttpClientRequestError } from '@yandex-music-int/http-client';\n\nexport const isRequestError = (error: unknown): error is HttpClientRequestError => {\n    return typeof error === 'object' && error !== null && 'response' in error && 'request' in error;\n};\n","/* eslint-disable no-console */\nimport {\n    HttpClientResponse,\n    HttpClientNormalizedRequestOptions,\n    HttpException,\n    HttpErrorException,\n    HttpClient\n} from '@yandex-music-int/http-client';\nimport {\n    HTTP_API_RESPONSE_DURATION_SECOND,\n    HTTP_API_REQUEST_RATE_PER_SECOND,\n    HTTP_API_ERROR,\n    HTTP_API_RETRY_RATE_PER_SECOND,\n    HTTP_API_RESPONSE_STATUS_RATE_PER_SECOND\n} from '@yandex-music-int/metrics/constants';\nimport { getAggregatedIdUrl } from '@yandex-music-int/metrics/urlAggregator.js';\n\nimport { isRequestError } from '../typeGuards/isRequestError.js';\n\n/**\n * Метрики ответов на запрос к API: длительность ответа и статус\n * @param {string} metricsEndpoint URL отправки метрики\n * @param {HttpClient} httpClient инстанс http клиента\n * @returns {HttpClientResponse} объект ответа http клиента\n */\nexport const collectApiResponseMetrics =\n    (metricsEndpoint: string, httpClient: HttpClient) =>\n    (response: HttpClientResponse<unknown>): HttpClientResponse<unknown> => {\n        const aggregatedIdUrl = getAggregatedIdUrl(response.url);\n\n        if (response.timings?.response) {\n            httpClient\n                .post(metricsEndpoint, {\n                    json: {\n                        type: HTTP_API_RESPONSE_DURATION_SECOND,\n                        data: {\n                            method: response.request.method,\n                            path: aggregatedIdUrl,\n                            duration: (response.timings.response - response.timings.start) / 1000\n                        }\n                    }\n                })\n                .catch((err: HttpException) => {\n                    console.error(err);\n                });\n        }\n\n        httpClient\n            .post(metricsEndpoint, {\n                json: {\n                    type: HTTP_API_RESPONSE_STATUS_RATE_PER_SECOND,\n                    data: {\n                        method: response.request.method,\n                        path: aggregatedIdUrl,\n                        statusCode: response.statusCode\n                    }\n                }\n            })\n            .catch((err: HttpException) => {\n                console.error(err);\n            });\n\n        return response;\n    };\n\n/**\n * Метрики запросов к API: rps на указанную ручку\n * @param {string} metricsEndpoint URL отправки метрики\n * @param {HttpClient} httpClient инстанс http клиента\n */\nexport const collectApiRequestMetrics =\n    (metricsEndpoint: string, httpClient: HttpClient) =>\n    (options: HttpClientNormalizedRequestOptions<unknown>): void => {\n        const requestUrl = options.url || options.requestUrl;\n\n        if (typeof requestUrl !== 'undefined') {\n            const aggregatedIdUrl = getAggregatedIdUrl(requestUrl);\n\n            httpClient\n                .post(metricsEndpoint, {\n                    json: {\n                        type: HTTP_API_REQUEST_RATE_PER_SECOND,\n                        data: {\n                            method: options.method,\n                            path: aggregatedIdUrl\n                        }\n                    }\n                })\n                .catch((err: HttpException) => {\n                    console.error(err);\n                });\n        }\n    };\n\n/**\n * Метрики ошибок при запросах к API: статус ошибки на заданной ручке\n * @param {string} metricsEndpoint URL отправки метрики\n * @param {HttpClient} httpClient инстанс http клиента\n * @returns {HttpException} объект ошибки http клиента\n */\nexport const collectApiRequestErrorMetrics =\n    (metricsEndpoint: string, httpClient: HttpClient) =>\n    (error: HttpException | HttpErrorException): HttpException => {\n        const { cause } = error;\n\n        if (isRequestError(cause) && error instanceof HttpErrorException) {\n            const statusCode = error.statusCode;\n            const requestUrl = cause.request.url || cause.request.requestUrl;\n            const requestMethod = cause.request.options?.method || cause.request.method;\n\n            if (typeof requestUrl !== 'undefined') {\n                const aggregatedIdUrl = getAggregatedIdUrl(String(requestUrl));\n                httpClient\n                    .post(metricsEndpoint, {\n                        json: {\n                            type: HTTP_API_ERROR,\n                            data: {\n                                method: requestMethod,\n                                path: aggregatedIdUrl,\n                                statusCode\n                            }\n                        }\n                    })\n                    .catch((err: HttpException) => {\n                        console.error(err);\n                    });\n            }\n        }\n\n        return error;\n    };\n/**\n * Метрики ретраев при запросах к API: rate ретрая на заданную ручку с кодом ответа\n * @param {string} metricsEndpoint URL отправки метрики\n * @param {HttpClient} httpClient инстанс http клиента\n */\nexport const collectApiRetryMetrics =\n    (metricsEndpoint: string, httpClient: HttpClient) =>\n    (error: HttpException | HttpErrorException): void => {\n        const { cause } = error;\n\n        if (isRequestError(cause) && error instanceof HttpErrorException) {\n            const statusCode = error.statusCode;\n            const requestUrl = cause.request.url || cause.request.requestUrl;\n\n            const requestMethod = cause.request.options?.method || cause.request.method;\n\n            if (typeof requestUrl !== 'undefined') {\n                const aggregatedIdUrl = getAggregatedIdUrl(String(requestUrl));\n                httpClient\n                    .post(metricsEndpoint, {\n                        json: {\n                            type: HTTP_API_RETRY_RATE_PER_SECOND,\n                            data: {\n                                method: requestMethod,\n                                path: aggregatedIdUrl,\n                                statusCode\n                            }\n                        }\n                    })\n                    .catch((err: HttpException) => {\n                        console.error(err);\n                    });\n            }\n        }\n    };\n","// Временно перестаем чекать этот файл, потому что у нас проблемы с рекурсивными типами\n// Задача на починку https://st.yandex-team.ru/MFRONT-6134\n// @ts-nocheck\n\nimport { IoCContainer, singleton, factory } from '@yandex-music-int/container';\nimport { HttpClientRequestOptions, HttpClientHooks } from '@yandex-music-int/http-client';\nimport { BrowserHttpClient } from '@yandex-music-int/http-client/browser';\nimport { LogLevels } from '@yandex-music-int/logger';\nimport { BrowserLogger } from '@yandex-music-int/logger/browser';\nimport {\n    AccountResource,\n    AlbumsResource,\n    ArtistsResource,\n    LandingResource,\n    LibraryResource,\n    MusicExternalApiResourceLanguage,\n    RotorResource,\n    SearchResource,\n    SlidesResource,\n    TopResource,\n    TracksResource,\n    UsersResource,\n    PlaylistResource\n} from '@yandex-music-int/resource-collection';\nimport { ClientCookieStorage, ClientLocalStorage, ClientSessionStorage } from '@yandex-music-int/storage';\n\nimport { getExternalApiClientName } from '../../api/index.js';\nimport { ClientAuthorization } from '../authorization/index.js';\nimport { getConfig } from '../config/getConfig.js';\nimport {\n    collectApiRequestErrorMetrics,\n    collectApiRequestMetrics,\n    collectApiResponseMetrics,\n    collectApiRetryMetrics\n} from '../metrics/collectApiMetrics.js';\nimport { getTLDHost } from '../router/utils/getTLDHost.js';\nimport { Storage } from '../types/Storage.js';\n\nimport {\n    CONTAINER_APP_ALBUM_RESOURCE_TOKEN,\n    CONTAINER_APP_ARTISTS_RESOURCE_TOKEN,\n    CONTAINER_APP_LANDING_RESOURCE_TOKEN,\n    CONTAINER_APP_LIBRARY_RESOURCE_TOKEN,\n    CONTAINER_APP_RESOURCE_TOKEN,\n    CONTAINER_APP_ROTOR_RESOURCE_TOKEN,\n    CONTAINER_APP_SEARCH_RESOURCE,\n    CONTAINER_APP_SLIDES_RESOURCE_TOKEN,\n    CONTAINER_APP_TOP_RESOURCE_TOKEN,\n    CONTAINER_APP_TRACKS_RESOURCE_TOKEN,\n    CONTAINER_APP_USERS_RESOURCE_TOKEN,\n    CONTAINER_AUTHORIZATION,\n    CONTAINER_CONFIG_TOKEN,\n    CONTAINER_COOKIE_STORAGE,\n    CONTAINER_HTTP_CLIENT_TOKEN,\n    CONTAINER_LOCAL_STORAGE,\n    CONTAINER_LOGGER_TOKEN,\n    CONTAINER_SESSION_STORAGE,\n    CONTAINER_STORAGE,\n    CONTAINER_APP_PLAYLIST_RESOURCE_TOKEN\n} from './constants/tokens.js';\n\n// Отключаем правила, так как сложно сделать определение возвращаемого типа\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/explicit-function-return-type\nexport async function createClientContainer(tld: string, env: typeof process.env.NEXT_PUBLIC_CONFIG_ENV) {\n    const config = await getConfig(env);\n\n    return new IoCContainer()\n        .register(\n            CONTAINER_CONFIG_TOKEN,\n            singleton(() => config)\n        )\n        .register(\n            CONTAINER_HTTP_CLIENT_TOKEN,\n            factory(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => (options?: HttpClientRequestOptions) => {\n                    const { metrics } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const metricsHooks: Required<HttpClientHooks> = {\n                        afterResponse: [],\n                        beforeError: [],\n                        beforeRequest: [],\n                        beforeRetry: []\n                    };\n                    if (metrics?.serverAddress && process.env.NODE_ENV === 'production') {\n                        const metricsEndpoint = `${location.origin}${metrics.serverAddress}`;\n                        const httpClient = new BrowserHttpClient();\n                        metricsHooks.afterResponse.push(collectApiResponseMetrics(metricsEndpoint, httpClient));\n                        metricsHooks.beforeError.push(collectApiRequestErrorMetrics(metricsEndpoint, httpClient));\n                        metricsHooks.beforeRequest.push(collectApiRequestMetrics(metricsEndpoint, httpClient));\n                        metricsHooks.beforeRetry.push(collectApiRetryMetrics(metricsEndpoint, httpClient));\n                    }\n\n                    return new BrowserHttpClient({\n                        ...options,\n                        hooks: {\n                            afterResponse: [...metricsHooks.afterResponse, ...(options?.hooks?.afterResponse || [])],\n                            beforeError: [...metricsHooks.beforeError, ...(options?.hooks?.beforeError || [])],\n                            beforeRequest: [...metricsHooks.beforeRequest, ...(options?.hooks?.beforeRequest || [])],\n                            beforeRetry: [...metricsHooks.beforeRetry, ...(options?.hooks?.beforeRetry || [])]\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_LOGGER_TOKEN,\n            singleton(\n                () =>\n                    new BrowserLogger({\n                        maxLogLevel: LogLevels.DEBUG\n                    })\n            )\n        )\n        .register(\n            CONTAINER_STORAGE,\n            singleton(() => new ClientCookieStorage<Storage>())\n        )\n        .register(\n            CONTAINER_COOKIE_STORAGE,\n            singleton(() => new ClientCookieStorage<Storage>())\n        )\n        .register(\n            CONTAINER_LOCAL_STORAGE,\n            singleton(() => new ClientLocalStorage<Storage>())\n        )\n        .register(\n            CONTAINER_AUTHORIZATION,\n            singleton(\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) =>\n                    new ClientAuthorization(\n                        container.get(CONTAINER_COOKIE_STORAGE),\n                        container.get(CONTAINER_CONFIG_TOKEN)\n                    )\n            )\n        )\n        .register(\n            CONTAINER_APP_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new AccountResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_USERS_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new UsersResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_LANDING_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new LandingResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_ALBUM_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new AlbumsResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_LIBRARY_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new LibraryResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_TRACKS_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new TracksResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_TOP_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new TopResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_ARTISTS_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new ArtistsResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_SLIDES_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new SlidesResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_ROTOR_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new RotorResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        retryPolicyConfig: musicExternalApi.retryPolicyConfig,\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_SEARCH_RESOURCE,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new SearchResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_APP_PLAYLIST_RESOURCE_TOKEN,\n            singleton(\n                // Отключаем правила, так как сложно сделать определение типа для контейнера\n                // eslint-disable-next-line @typescript-eslint/typedef\n                (container) => {\n                    const { resources } = container.get(CONTAINER_CONFIG_TOKEN);\n                    const { musicExternalApi } = resources;\n                    const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n                    const httpClient = httpClientFactory({\n                        credentials: 'include'\n                    });\n\n                    return new PlaylistResource(httpClient, {\n                        prefixUrl: getTLDHost(musicExternalApi.prefixUrl, tld),\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: MusicExternalApiResourceLanguage.RU\n                            }\n                        }\n                    });\n                }\n            )\n        )\n        .register(\n            CONTAINER_SESSION_STORAGE,\n            singleton(() => new ClientSessionStorage<Storage>())\n        );\n}\n","export var HttpResponseStatusCode;\n(function (HttpResponseStatusCode) {\n    HttpResponseStatusCode[HttpResponseStatusCode[\"NOT_FOUND\"] = 404] = \"NOT_FOUND\";\n    HttpResponseStatusCode[HttpResponseStatusCode[\"BAD_REQUEST\"] = 400] = \"BAD_REQUEST\";\n})(HttpResponseStatusCode || (HttpResponseStatusCode = {}));\n//# sourceMappingURL=HttpResponseStatusCode.js.map","export { HttpResponseStatusCode } from './types/HttpResponseStatusCode.js';\nexport { HttpException } from './exceptions/HttpException.js';\nexport { HttpErrorException } from './exceptions/HttpErrorException.js';\n//# sourceMappingURL=index.js.map"],"names":["isRequestError","error","collectApiResponseMetrics","metricsEndpoint","httpClient","response","aggregatedIdUrl","getAggregatedIdUrl","url","timings","post","json","type","data","method","request","path","duration","start","catch","console","err","statusCode","collectApiRequestMetrics","requestUrl","options","collectApiRequestErrorMetrics","cause","HttpErrorException","requestMethod","String","collectApiRetryMetrics","createClientContainer","tld","env","config","getConfig","IoCContainer","register","CONTAINER_CONFIG_TOKEN","singleton","CONTAINER_HTTP_CLIENT_TOKEN","factory","metrics","container","get","metricsHooks","afterResponse","beforeError","beforeRequest","beforeRetry","serverAddress","location","origin","concat","BrowserHttpClient","push","hooks","CONTAINER_LOGGER_TOKEN","BrowserLogger","maxLogLevel","LogLevels","DEBUG","CONTAINER_STORAGE","ClientCookieStorage","CONTAINER_COOKIE_STORAGE","CONTAINER_LOCAL_STORAGE","ClientLocalStorage","CONTAINER_AUTHORIZATION","ClientAuthorization","CONTAINER_APP_RESOURCE_TOKEN","resources","musicExternalApi","httpClientFactory","credentials","AccountResource","prefixUrl","getTLDHost","retryPolicyConfig","params","common","client","getExternalApiClientName","language","MusicExternalApiResourceLanguage","RU","CONTAINER_APP_USERS_RESOURCE_TOKEN","UsersResource","CONTAINER_APP_LANDING_RESOURCE_TOKEN","LandingResource","CONTAINER_APP_ALBUM_RESOURCE_TOKEN","AlbumsResource","CONTAINER_APP_LIBRARY_RESOURCE_TOKEN","LibraryResource","CONTAINER_APP_TRACKS_RESOURCE_TOKEN","TracksResource","CONTAINER_APP_TOP_RESOURCE_TOKEN","TopResource","CONTAINER_APP_ARTISTS_RESOURCE_TOKEN","ArtistsResource","CONTAINER_APP_SLIDES_RESOURCE_TOKEN","SlidesResource","CONTAINER_APP_ROTOR_RESOURCE_TOKEN","RotorResource","CONTAINER_APP_SEARCH_RESOURCE","SearchResource","CONTAINER_APP_PLAYLIST_RESOURCE_TOKEN","PlaylistResource","CONTAINER_SESSION_STORAGE","ClientSessionStorage","HttpResponseStatusCode"],"sourceRoot":""}