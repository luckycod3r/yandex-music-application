{"version":3,"file":"static/chunks/app/(product)/layout-fda09d32cfd94f63.js","mappings":"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","sources":["webpack://_N_E/?40e6","webpack://_N_E/../../packages/analytics/build/utils/Queue.js","webpack://_N_E/../../packages/analytics/build/helpers/createEvgenTracker.js","webpack://_N_E/../../packages/analytics/build/helpers/createGlobalParamsProvider.js","webpack://_N_E/../../packages/analytics/build/helpers/createPlatformParamsProvider.js","webpack://_N_E/../../packages/analytics/build/helpers/createEvgenAnalytics.js","webpack://_N_E/../../packages/analytics/build/eventsProvider/YaMusicAnalytics/YaMusicAnalytics.js","webpack://_N_E/../../packages/analytics/build/events/webHome/webHome.js","webpack://_N_E/../../packages/analytics/build/index.js","webpack://_N_E/./src/domain/app/providers/AnalyticsProvider.tsx","webpack://_N_E/./src/domain/app/providers/AuthorizationProvider.tsx","webpack://_N_E/./src/domain/app/providers/BlackboxProvider.tsx","webpack://_N_E/./src/domain/app/providers/ContainerProvider.tsx","webpack://_N_E/./src/domain/features/desktop-bridge/lib/handleUpdate.tsx","webpack://_N_E/./src/domain/features/desktop-bridge/lib/handleDesktopEvents.ts","webpack://_N_E/./src/domain/features/desktop-bridge/lib/sendApplicationReadyEvent.ts","webpack://_N_E/./src/domain/features/desktop-bridge/index.ts","webpack://_N_E/./src/domain/app/providers/DesktopProvider.tsx","webpack://_N_E/./src/domain/app/providers/HistoryProvider.tsx","webpack://_N_E/./src/domain/app/providers/LayoutProvider.tsx","webpack://_N_E/./src/domain/app/providers/PrefetchDataProvider.tsx","webpack://_N_E/../../player/public/cores/audio-html5/build/events/Events.js","webpack://_N_E/../../player/public/cores/audio-html5/build/audio-player/config.js","webpack://_N_E/../../player/public/cores/audio-html5/build/error/audio-error.js","webpack://_N_E/../../player/public/cores/audio-html5/build/audio-player/audio-static.js","webpack://_N_E/../../player/public/cores/audio-html5/build/html5/audio-html5-loader-static.js","webpack://_N_E/../../player/public/cores/audio-html5/build/error/playback-error.js","webpack://_N_E/../../player/public/cores/audio-html5/build/browser/BrowserDetect.js","webpack://_N_E/../../player/public/cores/audio-html5/build/html5/audio-html5-loader.js","webpack://_N_E/../../player/public/cores/audio-html5/build/html5/audio-html5.js","webpack://_N_E/../../player/public/cores/audio-html5/build/html5/index.js","webpack://_N_E/../../player/public/cores/audio-html5/build/audio-player/audio-player.js","webpack://_N_E/../../player/public/cores/audio-html5/build/audio-player/index.js","webpack://_N_E/../../player/public/cores/audio-html5/build/AudioCoreHtml5Adapter.js","webpack://_N_E/../../player/public/cores/audio-html5/build/index.js","webpack://_N_E/../../player/public/plugins/build/ApplyContextPlugin/ApplyContextPlugin.js","webpack://_N_E/../../player/public/plugins/build/AvailableActionsPlugin/helpers/updateMoveActionsAvailability.js","webpack://_N_E/../../player/public/plugins/build/AvailableActionsPlugin/AvailableActionsPlugin.js","webpack://_N_E/../../player/public/plugins/build/TotalPlayedTimePlugin/TotalPlayedTimePlugin.js","webpack://_N_E/../../player/public/plugins/build/PlaysPlugin/helpers/getAlbumId.js","webpack://_N_E/../../player/public/plugins/build/PlaysPlugin/helpers/createISOTimestamp.js","webpack://_N_E/../../player/public/plugins/build/PlaysPlugin/helpers/createEntityPlay.js","webpack://_N_E/../../player/public/plugins/build/PlaysPlugin/exceptions/playsException/PlaysException.js","webpack://_N_E/../../player/public/plugins/build/PlaysPlugin/PlaysPlugin.js","webpack://_N_E/../../player/public/plugins/build/MediaControlsPlugin/types/MediaAction.js","webpack://_N_E/../../player/public/plugins/build/MediaControlsPlugin/constants/matadataArtworkSizes.js","webpack://_N_E/../../player/public/plugins/build/MediaControlsPlugin/constants/mediaHandlersSpecial.js","webpack://_N_E/../../player/public/plugins/build/MediaControlsPlugin/MediaControlsPlugin.js","webpack://_N_E/../../player/public/plugins/build/LoggerPlugin/LoggerPlugin.js","webpack://_N_E/../../player/public/plugins/build/index.js","webpack://_N_E/../../player/public/providers/build/mediaProviders/downloadInfoMediaProvider/helpers/createMd5.js","webpack://_N_E/../../player/public/providers/build/mediaProviders/downloadInfoMediaProvider/helpers/createSrcLink.js","webpack://_N_E/../../player/public/providers/build/mediaProviders/downloadInfoMediaProvider/helpers/createFormatFlags.js","webpack://_N_E/../../player/public/providers/build/mediaProviders/downloadInfoMediaProvider/helpers/createSign.js","webpack://_N_E/../../player/public/providers/build/mediaProviders/downloadInfoMediaProvider/helpers/createTsInSeconds.js","webpack://_N_E/../../player/public/providers/build/mediaProviders/downloadInfoMediaProvider/exceptions/downloadInfoMediaProviderException/DownloadInfoMediaProviderException.js","webpack://_N_E/../../player/public/providers/build/mediaProviders/downloadInfoMediaProvider/DownloadInfoMediaProvider.js","webpack://_N_E/../../player/public/providers/build/yaMusicEntityProvider/exceptions/YaMusicEntityProviderException.js","webpack://_N_E/../../player/public/providers/build/yaMusicEntityProvider/YaMusicEntityProvider.js","webpack://_N_E/../../player/public/providers/build/index.js","webpack://_N_E/./src/domain/app/providers/SonataProvider.tsx","webpack://_N_E/./src/domain/app/store/defaultState.ts","webpack://_N_E/./src/domain/pages/collection/model/Albums.ts","webpack://_N_E/./src/domain/pages/collection/model/Artists.ts","webpack://_N_E/./src/domain/pages/collection/lib/updateItemsByPage.ts","webpack://_N_E/./src/domain/pages/collection/model/PlaylistsCreated.ts","webpack://_N_E/./src/domain/pages/collection/model/PlaylistsLiked.ts","webpack://_N_E/./src/domain/pages/collection/model/Collection.ts","webpack://_N_E/./src/domain/pages/collection/index.ts","webpack://_N_E/./src/domain/pages/main/model/Main.ts","webpack://_N_E/./src/domain/pages/main/index.ts","webpack://_N_E/./src/domain/pages/search/lib/constants/SupportedTypes.ts","webpack://_N_E/./src/domain/pages/search/lib/getSupportedTypes.ts","webpack://_N_E/./src/domain/pages/search/lib/searchInstantMixedResultsResponseToModel.ts","webpack://_N_E/./src/domain/pages/search/model/Search.ts","webpack://_N_E/./src/domain/pages/search/index.ts","webpack://_N_E/./src/domain/app/store/Root.ts","webpack://_N_E/./src/domain/app/store/createRootModel.ts","webpack://_N_E/./src/domain/app/store/excludeModelsFromRehydration.ts","webpack://_N_E/./src/domain/app/store/index.ts","webpack://_N_E/./src/domain/app/providers/StoreProvider.tsx","webpack://_N_E/./src/domain/app/providers/TranslationsProvider.tsx","webpack://_N_E/./src/domain/app/providers/TvmProvider.tsx","webpack://_N_E/./src/domain/features/desktop-bridge/lib/sendWindowEvent.ts","webpack://_N_E/./src/domain/features/desktop-bridge/ui/NotificationUpdate/NotificationUpdate.tsx","webpack://_N_E/./src/domain/features/desktop-bridge/ui/TitleBar/TitleBar.tsx","webpack://_N_E/./src/domain/features/sonata/ui/SonataControls/SonataControlsDesktop/SonataControlsDesktop.tsx","webpack://_N_E/./src/domain/features/sonata/ui/SonataControls/SonataControlsMobile/SonataControlsMobile.tsx","webpack://_N_E/./src/domain/features/sonata/ui/SonataControls/SonataControls.tsx","webpack://_N_E/./src/domain/features/sonata/lib/musicEntityMetaResponseToModel.ts","webpack://_N_E/./src/domain/features/sonata/model/MusicEntityMeta.tsx","webpack://_N_E/./src/domain/features/sonata/model/SonataState.ts","webpack://_N_E/./src/domain/features/sonata/lib/useOnLikeClick.tsx","webpack://_N_E/./src/domain/features/sonata/lib/useOnDislikeClick.tsx","webpack://_N_E/./src/domain/features/sonata/index.ts","webpack://_N_E/./src/domain/pages/album/lib/getPreparedIds.ts","webpack://_N_E/./src/domain/pages/album/lib/createVolumeItem.ts","webpack://_N_E/./src/domain/pages/album/lib/getVolumeItemKey.ts","webpack://_N_E/./src/domain/pages/album/lib/insertDataToVolumeItems.ts","webpack://_N_E/./src/domain/pages/album/lib/makeFlatVolumeItems.ts","webpack://_N_E/./src/domain/pages/album/lib/updateVolumeItemsState.ts","webpack://_N_E/./src/domain/pages/album/model/RelatedAlbums.ts","webpack://_N_E/./src/domain/pages/album/model/VolumeItem.ts","webpack://_N_E/./src/domain/pages/album/model/Album.ts","webpack://_N_E/./src/domain/pages/album/index.ts","webpack://_N_E/./src/domain/pages/album/lib/types/VolumeType.ts","webpack://_N_E/./src/domain/pages/album/ui/Album/Album.tsx","webpack://_N_E/./src/domain/pages/album/ui/AlbumNotFound/AlbumNotFound.tsx","webpack://_N_E/./src/domain/pages/artist/lib/artistBriefInfoResponseToMeta.ts","webpack://_N_E/./src/domain/pages/artist/lib/concatPopularAlbums.ts","webpack://_N_E/./src/domain/pages/artist/model/Artist.ts","webpack://_N_E/./src/domain/pages/artist/index.ts","webpack://_N_E/./src/domain/pages/artist/ui/Artist/Artist.tsx","webpack://_N_E/./src/domain/pages/artist/ui/ArtistNotFound/ArtistNotFound.tsx","webpack://_N_E/./src/domain/pages/playlist/lib/updatePlaylistItemsState.ts","webpack://_N_E/./src/domain/pages/playlist/model/PlaylistItem.ts","webpack://_N_E/./src/domain/pages/playlist/model/Playlist.ts","webpack://_N_E/./src/domain/pages/playlist/index.ts","webpack://_N_E/./src/domain/pages/playlist/ui/Playlist/Playlist.tsx","webpack://_N_E/./src/domain/pages/playlist/ui/PlaylistNotFound/PlaylistNotFound.tsx","webpack://_N_E/./src/domain/shared/api/constants/externalApiClientVersion.ts","webpack://_N_E/./src/domain/shared/api/types/ClientType.ts","webpack://_N_E/./src/domain/shared/api/getExternalApiClientName.ts","webpack://_N_E/./src/domain/shared/api/index.ts","webpack://_N_E/./src/domain/shared/lib/platform/getPlatformName.ts","webpack://_N_E/./src/domain/shared/lib/platform/types/ClientPlatform.ts","webpack://_N_E/./src/app/(product)/globals.scss","webpack://_N_E/./src/domain/features/desktop-bridge/ui/NotificationUpdate/NotificationUpdate.module.scss","webpack://_N_E/./src/domain/features/desktop-bridge/ui/TitleBar/TitleBar.module.scss","webpack://_N_E/./src/domain/features/sonata/ui/SonataControls/SonataControlsDesktop/SonataControlsDesktop.module.scss","webpack://_N_E/./src/domain/pages/album/ui/Album/Album.module.scss","webpack://_N_E/./src/domain/pages/artist/ui/Artist/Artist.module.scss","webpack://_N_E/./src/domain/pages/playlist/ui/Playlist/Playlist.module.scss","webpack://_N_E/../../packages/http-client/build/exceptions/HttpErrorException.js","webpack://_N_E/../../packages/http-client/build/exceptions/HttpException.js","webpack://_N_E/../../packages/http-client/build/types/HttpResponseStatusCode.js","webpack://_N_E/../../packages/http-client/build/index.js","webpack://_N_E/<anon>"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/analytics/useAnalytics.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/analytics/useMetrika.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/analytics/providers/block/useAnalyticsBlock.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/analytics/providers/page/useAnalyticsPage.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/analytics/providers/page/AnalyticsPageContext.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/analytics/providers/block/AnalyticsBlockContext.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/store/useStore.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/common/temp/node_modules/.pnpm/next@13.4.19_txdvpvppf2ilsh27xadmwrzlmm/node_modules/next/dist/shared/lib/hooks-client-context.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/common/temp/node_modules/.pnpm/next@13.4.19_txdvpvppf2ilsh27xadmwrzlmm/node_modules/next/dist/shared/lib/app-router-context.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/common/temp/node_modules/.pnpm/next@13.4.19_txdvpvppf2ilsh27xadmwrzlmm/node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-no-ssr.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/common/temp/node_modules/.pnpm/next@13.4.19_txdvpvppf2ilsh27xadmwrzlmm/node_modules/next/dist/shared/lib/server-inserted-html.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/container/useContainer.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/history/useHistory.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/layout/useLayout.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/metrics/useRumPage.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/packages/sol/build/components/Notification/index.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/router/useUrl.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/search/SearchFeedbackContext.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/sonata/useSonata.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/sonata/usePlayableContext.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/lib/sonata/usePlayableVibeContext.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/features/desktop-bridge/ui/NotificationUpdate/NotificationUpdate.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/features/desktop-bridge/ui/TitleBar/TitleBar.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/navigation/PrimaryPage.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/navigation/NavigationEvents.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/navigation/SecondaryPage.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/guards/WithAuth/WithAuth.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/guards/WithBetaUser/WithBetaUser.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/guards/WithSplashScreen/WithSplashScreen.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/DevPanel/useFutureFeatures.ts\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/DevPanel/DevPanel.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/BlockHeader/BlockHeader.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/CarouselControls/CarouselControls.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/CarouselBlock/CarouselBlock.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/CardLikes/CardLikes.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/FutureFeature/FutureFeature.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/DislikeButton/DislikeButton.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/Link/Link.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/LikeButton/LikeButton.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/PlayButton/PlayButton.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/MainSuspenseLoader/MainSuspenseLoader.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/Shimmer/TrackShimmer/PlaylistTrackShimmer/PlaylistTrackShimmer.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/Shimmer/TrackShimmer/AlbumTrackShimmer/AlbumTrackShimmer.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/TracksBlock/TracksBlock.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/VirtualScroll/VirtualScroll.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/Footer/Footer.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/ErrorBoundary/ErrorBoundary.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/packages/sol/build/components/Image/index.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/packages/sol/build/components/Tabs/index.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/packages/sol/build/components/Typography/index.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/ErrorBoosterScript/ErrorBoosterScript.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/RumScript/RumScript.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/packages/sol/build/components/Shimmer/index.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/packages/sol/build/components/Icon/index.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/packages/sol/build/components/Paper/index.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/packages/sol/build/components/Button/index.js\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/BaseNotification/BaseNotificationLike/BaseNotificationLike.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/MetrikaScript/MetrikaScript.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/BaseNotification/BaseNotificationError/BaseNotificationError.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/ContainerProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/AnalyticsProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/AuthorizationProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/BlackboxProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/DesktopProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/LayoutProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/HistoryProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/SonataProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/PrefetchDataProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/widgets/something-went-wrong/ui/SomethingWentWrong/SomethingWentWrong.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/TranslationsProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/StoreProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/app/providers/TvmProvider.tsx\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/TracksList/TracksList.module.scss\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/Tab/Tab.module.scss\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/Shimmer/TabShimmer/TabShimmer.module.scss\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/TabCarousel/TabCarousel.module.scss\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/BaseNotification/BaseNotification.module.scss\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/Shimmer/EntityCardShimmer/EntityCardShimmer.module.scss\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/domain/shared/ui/Shimmer/TextShimmer/TextShimmer.module.scss\");\nimport(/* webpackMode: \"eager\" */ \"/Users/andrey-volkov/projects/arcadia/music/frontend/musfront/services/music/src/app/(product)/globals.scss\")","export function createQueue({ callback, maxSendingItemsPerRequest, requestsSendingDelay }) {\n    const queue = [];\n    function sendRequests() {\n        if (queue.length > 0) {\n            const data = queue.splice(0, maxSendingItemsPerRequest);\n            callback(data);\n        }\n        window.setTimeout(sendRequests, requestsSendingDelay);\n    }\n    sendRequests();\n    return {\n        add(item) {\n            queue.push(item);\n        }\n    };\n}\n//# sourceMappingURL=Queue.js.map","import { createQueue } from '../utils/Queue.js';\nconst MAX_SENDING_EVENTS_PER_REQUEST = 21;\nconst EVENTS_SENDING_DELAY_MS = 1000;\nexport function createEventTracker(eventsSender, logger, isDebug) {\n    const queue = createQueue({\n        callback: (events) => {\n            eventsSender(events);\n        },\n        requestsSendingDelay: EVENTS_SENDING_DELAY_MS,\n        maxSendingItemsPerRequest: MAX_SENDING_EVENTS_PER_REQUEST\n    });\n    const tracker = {\n        trackEvent(event, params) {\n            if (isDebug) {\n                logger.log(event, params);\n            }\n            const eventData = {\n                [event]: params\n            };\n            queue.add(eventData);\n        }\n    };\n    return tracker;\n}\n//# sourceMappingURL=createEvgenTracker.js.map","class EvgenAnalyticsGlobalParams {\n    makeParams() {\n        const parameters = {};\n        return parameters;\n    }\n}\nexport function createGlobalParamsProvider() {\n    const globalParams = new EvgenAnalyticsGlobalParams();\n    return {\n        getGlobalParams() {\n            return globalParams;\n        }\n    };\n}\n//# sourceMappingURL=createGlobalParamsProvider.js.map","class EvgenAnalyticsPlatformParams {\n    makeParams() {\n        const parameters = {};\n        return parameters;\n    }\n}\nexport function createPlatformParamsProvider() {\n    const params = new EvgenAnalyticsPlatformParams();\n    return {\n        getPlatformParams() {\n            return params;\n        }\n    };\n}\n//# sourceMappingURL=createPlatformParamsProvider.js.map","export function createEvgenAnalytics(eventTracker, globalParamsProvider, platformParamsProvider) {\n    const trackEvent = (event, params) => {\n        const mergedParameters = {\n            ...params,\n            ...globalParamsProvider.getGlobalParams(),\n            ...platformParamsProvider.getPlatformParams()\n        };\n        eventTracker.trackEvent(event, mergedParameters);\n    };\n    return { trackEvent };\n}\n//# sourceMappingURL=createEvgenAnalytics.js.map","import { createEvgenAnalytics } from '../../helpers/createEvgenAnalytics.js';\nexport class YaMusicAnalytics {\n    evgen;\n    constructor(eventTracker, globalParamsProvider, platformParamsProvider) {\n        this.evgen = createEvgenAnalytics(eventTracker, globalParamsProvider, platformParamsProvider);\n    }\n    sendEvent(event, params) {\n        this.evgen.trackEvent(event, params);\n    }\n}\n//# sourceMappingURL=YaMusicAnalytics.js.map","/**\n    AUTO-GENERATED FILE. DO NOT MODIFY\n    This class was automatically generated.\n*/\n/**\n    eslint-disable\n*/\nimport { makeMetaParams } from '../../helpers/makeMetaParams.js';\n/**\n    Открытие вкладки 'Главное'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n*/\nexport function webHomeOpened(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.Opened', enhancedParams);\n}\n/**\n    Загрузка данных на главной веба\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n*/\nexport function webHomeLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.Loaded', enhancedParams);\n}\n/**\n    Открытие вкладки 'Всё'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n*/\nexport function webHomeAllTabOpened(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Opened', enhancedParams);\n}\n/**\n    Загрузка вкладки \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - 'Тип объекта совершения действия  promotions - фичеры  popular - популярное  track-chart – чарт треков  album-chart - чарт альбомов  recently-played - недавно слушали  editorial - редакторские альбомы  editorial-playlists - редакторские плейлисты  playlist-with-tracks - раскрытый плейлист  category - категория, как карусель  categories-tab - категории  radio - РУПь  timed-show – шоу  menu - меню внизу лендинга  year_results_personal_playlist - блок с плейлистом Итоги 2021'\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n*/\nexport function webHomeAllTabLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Loaded', enhancedParams);\n}\n/**\n    Переходы на \"Смотреть всё\" из вкладки \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - 'Тип объекта совершения действия  promotions - фичеры  popular - популярное  track-chart – чарт треков  album-chart - чарт альбомов  recently-played - недавно слушали  editorial - редакторские альбомы  editorial-playlists - редакторские плейлисты  playlist-with-tracks - раскрытый плейлист  category - категория, как карусель  categories-tab - категории  radio - РУПь  timed-show – шоу  menu - меню внизу лендинга  year_results_personal_playlist - блок с плейлистом Итоги 2021'\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. to - Куда был совершен переход\n    12. from - Откуда был совершен переход\n*/\nexport function webHomeAllTabNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Navigated', enhancedParams);\n}\n/**\n    Загрузка \"Моей волны\" на вкладке 'Всё'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n*/\nexport function webHomeAllTabMyWaveLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'my_wave';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.MyWave.Loaded', enhancedParams);\n}\n/**\n    Показ \"Моей волны\" на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_showed_percent - Процент показа объекта\n*/\nexport function webHomeAllTabMyWaveShowed(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'my_wave';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.MyWave.Showed', enhancedParams);\n}\n/**\n    Запуск \"Моей волны\" на вкладке 'Всё'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n*/\nexport function webHomeAllTabMyWaveStarted(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'my_wave';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalStarted: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.MyWave.Started', enhancedParams);\n}\n/**\n    Пауза прослушивания\n\n    0. page_type - Тип страницы\n    1. playlist_type - Тип плейлиста (user - пользовательский, smart - умный, editor - редакторский, liked - мне нравится)\n    2. playlist_id - id плейлиста\n    3. playlist_name - Название плейлиста\n    4. hash - Хеш\n    5. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabMyWavePaused(evgen_analytics, parameters) {\n    const page_type = 'object';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.MyWave.Paused', enhancedParams);\n}\n/**\n    Загрузка персональных плейлистов на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabPersonalPlaylistsLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'personal_playlists';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.PersonalPlaylists.Loaded', enhancedParams);\n}\n/**\n    Показ персональных плейлистов на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. object_showed_percent - Процент показа объекта\n*/\nexport function webHomeAllTabPersonalPlaylistsShowed(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'personal_playlists';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.PersonalPlaylists.Showed', enhancedParams);\n}\n/**\n    Переход из персональных плейлистов на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeAllTabPersonalPlaylistsNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'personal_playlists';\n    const from = 'all_tab_screen';\n    const to = 'playlist_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, to, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.PersonalPlaylists.Navigated', enhancedParams);\n}\n/**\n    Запуск персональных плейлистов на вкладке 'Всё'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n*/\nexport function webHomeAllTabPersonalPlaylistsStarted(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'personal_playlists';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalStarted: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.PersonalPlaylists.Started', enhancedParams);\n}\n/**\n    Пауза прослушивания\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabPersonalPlaylistsPaused(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.PersonalPlaylists.Paused', enhancedParams);\n}\n/**\n    Лайк плейлиста\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabPersonalPlaylistsLiked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'playlist';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.PersonalPlaylists.Liked', enhancedParams);\n}\n/**\n    Дизлайк плейлиста\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. playlist_type - Тип плейлиста (user - пользовательский, smart - умный, editor - редакторский, liked - мне нравится)\n    4. playlist_id - id плейлиста\n    5. playlist_name - Название плейлиста\n    6. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabPersonalPlaylistsUnliked(evgen_analytics, parameters) {\n    const page_type = 'object';\n    const object_type = 'playlist';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.PersonalPlaylists.Unliked', enhancedParams);\n}\n/**\n    Загрузка блока подкастов/аудиокниг на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabPodcastsLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'podcasts';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Podcasts.Loaded', enhancedParams);\n}\n/**\n    Показ блока подкастов/аудиокниг на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. object_showed_percent - Процент показа объекта\n*/\nexport function webHomeAllTabPodcastsShowed(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'podcasts';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Podcasts.Showed', enhancedParams);\n}\nexport var WebHomeAllTabPodcastsNavigatedTo;\n(function (WebHomeAllTabPodcastsNavigatedTo) {\n    WebHomeAllTabPodcastsNavigatedTo[\"AlbumScreen\"] = \"album_screen\";\n    WebHomeAllTabPodcastsNavigatedTo[\"ArtistScreen\"] = \"artist_screen\";\n    WebHomeAllTabPodcastsNavigatedTo[\"PlaylistScreen\"] = \"playlist_screen\";\n    WebHomeAllTabPodcastsNavigatedTo[\"PodcastLandingScreen\"] = \"podcast_landing_screen\";\n    WebHomeAllTabPodcastsNavigatedTo[\"Link\"] = \"link\";\n})(WebHomeAllTabPodcastsNavigatedTo || (WebHomeAllTabPodcastsNavigatedTo = {}));\n/**\n    Переход из подкастов на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeAllTabPodcastsNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'podcasts';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Podcasts.Navigated', enhancedParams);\n}\n/**\n    Запуск подкастов на вкладке 'Всё'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n*/\nexport function webHomeAllTabPodcastsStarted(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'podcasts';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalStarted: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Podcasts.Started', enhancedParams);\n}\n/**\n    Пауза прослушивания подкаста\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabPodcastsPaused(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Podcasts.Paused', enhancedParams);\n}\n/**\n    Лайк подкаста/аудиокниги\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabPodcastsLiked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'album';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Podcasts.Liked', enhancedParams);\n}\n/**\n    Дизлайк подкаста/аудиокниги\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. album_type - Тип альбома\n    4. album_id - id альбома\n    5. album_name - Название альбома\n    6. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabPodcastsUnliked(evgen_analytics, parameters) {\n    const page_type = 'object';\n    const object_type = 'album';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Podcasts.Unliked', enhancedParams);\n}\n/**\n    Загрузка фичеров на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabPromotionsLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'promotions';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Promotions.Loaded', enhancedParams);\n}\n/**\n    Показ фичеров на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. object_showed_percent - Процент показа объекта\n*/\nexport function webHomeAllTabPromotionsShowed(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'promotions';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Promotions.Showed', enhancedParams);\n}\n/**\n    Переход из фичеров на главной\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. to - Куда был совершен переход\n    12. from - Откуда был совершен переход\n*/\nexport function webHomeAllTabPromotionsNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'promotions';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Promotions.Navigated', enhancedParams);\n}\n/**\n    Загрузка новых релизов на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabNewReleasesImpressionLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'new_releases';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.NewReleasesImpression.Loaded', enhancedParams);\n}\n/**\n    Показ новых релизов на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. object_showed_percent - Процент показа объекта\n*/\nexport function webHomeAllTabNewReleasesImpressionShowed(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'new_releases';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.NewReleasesImpression.Showed', enhancedParams);\n}\nexport var WebHomeAllTabNewReleasesImpressionNavigatedTo;\n(function (WebHomeAllTabNewReleasesImpressionNavigatedTo) {\n    WebHomeAllTabNewReleasesImpressionNavigatedTo[\"AlbumScreen\"] = \"album_screen\";\n    WebHomeAllTabNewReleasesImpressionNavigatedTo[\"ArtistScreen\"] = \"artist_screen\";\n    WebHomeAllTabNewReleasesImpressionNavigatedTo[\"PlaylistScreen\"] = \"playlist_screen\";\n    WebHomeAllTabNewReleasesImpressionNavigatedTo[\"NewReleasesTabScreen\"] = \"new_releases_tab_screen\";\n})(WebHomeAllTabNewReleasesImpressionNavigatedTo || (WebHomeAllTabNewReleasesImpressionNavigatedTo = {}));\n/**\n    Переход из блока Новые релезы на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeAllTabNewReleasesImpressionNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'new_releases';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.NewReleasesImpression.Navigated', enhancedParams);\n}\n/**\n    Запуск треков из Новых релизов на вкладке 'Всё'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n*/\nexport function webHomeAllTabNewReleasesImpressionStarted(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'new_releases';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalStarted: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.NewReleasesImpression.Started', enhancedParams);\n}\n/**\n    Пауза прослушивания трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabNewReleasesImpressionPaused(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.NewReleasesImpression.Paused', enhancedParams);\n}\n/**\n    Лайк альбома\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabNewReleasesImpressionLiked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'album';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.NewReleasesImpression.Liked', enhancedParams);\n}\n/**\n    Дизлайк альбома\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. album_type - Тип альбома\n    4. album_id - id альбома\n    5. album_name - Название альбома\n    6. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabNewReleasesImpressionUnliked(evgen_analytics, parameters) {\n    const page_type = 'object';\n    const object_type = 'album';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.NewReleasesImpression.Unliked', enhancedParams);\n}\n/**\n    Загрузка блока Хиты и новинки на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabHitsLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'editorial-playlists';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Hits.Loaded', enhancedParams);\n}\n/**\n    Показ блока Хиты и новинки на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. object_showed_percent - Процент показа объекта\n*/\nexport function webHomeAllTabHitsShowed(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'editorial-playlists';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Hits.Showed', enhancedParams);\n}\nexport var WebHomeAllTabHitsNavigatedTo;\n(function (WebHomeAllTabHitsNavigatedTo) {\n    WebHomeAllTabHitsNavigatedTo[\"PlaylistScreen\"] = \"playlist_screen\";\n    WebHomeAllTabHitsNavigatedTo[\"PlaylistListScreen\"] = \"playlist_list_screen\";\n})(WebHomeAllTabHitsNavigatedTo || (WebHomeAllTabHitsNavigatedTo = {}));\n/**\n    Переход из блока Хиты и новинки на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeAllTabHitsNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'editorial-playlists';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Hits.Navigated', enhancedParams);\n}\n/**\n    Запуск треков из блока Хиты и новинки на вкладке 'Всё'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n*/\nexport function webHomeAllTabHitsStarted(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'editorial-playlists';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalStarted: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Hits.Started', enhancedParams);\n}\n/**\n    Пауза прослушивания трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabHitsPaused(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Hits.Paused', enhancedParams);\n}\n/**\n    Лайк плейлиста\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabHitsLiked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'playlist';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Hits.Liked', enhancedParams);\n}\n/**\n    Дизлайк плейлиста\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. playlist_type - Тип плейлиста (user - пользовательский, smart - умный, editor - редакторский, liked - мне нравится)\n    4. playlist_id - id плейлиста\n    5. playlist_name - Название плейлиста\n    6. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabHitsUnliked(evgen_analytics, parameters) {\n    const page_type = 'object';\n    const object_type = 'playlist';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.Hits.Unliked', enhancedParams);\n}\n/**\n    Загрузка чарта на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabChartImpressionLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'track-chart';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.ChartImpression.Loaded', enhancedParams);\n}\n/**\n    Показ чарта на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. object_showed_percent - Процент показа объекта '''\n*/\nexport function webHomeAllTabChartImpressionShowed(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'track-chart';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.ChartImpression.Showed', enhancedParams);\n}\nexport var WebHomeAllTabChartImpressionNavigatedTo;\n(function (WebHomeAllTabChartImpressionNavigatedTo) {\n    WebHomeAllTabChartImpressionNavigatedTo[\"AlbumScreen\"] = \"album_screen\";\n    WebHomeAllTabChartImpressionNavigatedTo[\"ArtistScreen\"] = \"artist_screen\";\n    WebHomeAllTabChartImpressionNavigatedTo[\"TrackListScreen\"] = \"track_list_screen\";\n    WebHomeAllTabChartImpressionNavigatedTo[\"ChartTabScreen\"] = \"chart_tab_screen\";\n})(WebHomeAllTabChartImpressionNavigatedTo || (WebHomeAllTabChartImpressionNavigatedTo = {}));\n/**\n    Переход из чарта на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeAllTabChartImpressionNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'track-chart';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.ChartImpression.Navigated', enhancedParams);\n}\n/**\n    Запуск треков чарта на вкладке 'Всё'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n*/\nexport function webHomeAllTabChartImpressionStarted(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'track-chart';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalStarted: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.ChartImpression.Started', enhancedParams);\n}\n/**\n    Пауза прослушивания трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabChartImpressionPaused(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.ChartImpression.Paused', enhancedParams);\n}\n/**\n    Лайк трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabChartImpressionLiked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.ChartImpression.Liked', enhancedParams);\n}\n/**\n    Дизлайк трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabChartImpressionUnliked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.ChartImpression.Unliked', enhancedParams);\n}\n/**\n    Загрузка блока Вы недавно слушали на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabRecentlyPlayedLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'recently-played';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.RecentlyPlayed.Loaded', enhancedParams);\n}\n/**\n    Показ блока Вы недавно слушали на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. object_showed_percent - Процент показа объекта\n*/\nexport function webHomeAllTabRecentlyPlayedShowed(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'recently-played';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.RecentlyPlayed.Showed', enhancedParams);\n}\nexport var WebHomeAllTabRecentlyPlayedNavigatedTo;\n(function (WebHomeAllTabRecentlyPlayedNavigatedTo) {\n    WebHomeAllTabRecentlyPlayedNavigatedTo[\"PlaylistScreen\"] = \"playlist_screen\";\n    WebHomeAllTabRecentlyPlayedNavigatedTo[\"AlbumScreen\"] = \"album_screen\";\n    WebHomeAllTabRecentlyPlayedNavigatedTo[\"CompilationsScreen\"] = \"compilations_screen\";\n    WebHomeAllTabRecentlyPlayedNavigatedTo[\"ArtistScreen\"] = \"artist_screen\";\n})(WebHomeAllTabRecentlyPlayedNavigatedTo || (WebHomeAllTabRecentlyPlayedNavigatedTo = {}));\n/**\n    Переход из блока Вы недавно слушали на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeAllTabRecentlyPlayedNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'recently-played';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.RecentlyPlayed.Navigated', enhancedParams);\n}\n/**\n    Запуск треков из блока Вы недавно слушали на вкладке 'Всё'\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n*/\nexport function webHomeAllTabRecentlyPlayedStarted(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'recently-played';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalStarted: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.RecentlyPlayed.Started', enhancedParams);\n}\n/**\n    Пауза прослушивания трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeAllTabRecentlyPlayedPaused(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.RecentlyPlayed.Paused', enhancedParams);\n}\n/**\n    Лайк объекта\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип элемента\n    4. object_id - id элемента\n    5. object_name - Название элемента\n    6. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabRecentlyPlayedLiked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.RecentlyPlayed.Liked', enhancedParams);\n}\n/**\n    Дизлайк объекта\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип элемента\n    4. object_id - id элемента\n    5. object_name - Название элемента\n    6. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabRecentlyPlayedUnliked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.RecentlyPlayed.Unliked', enhancedParams);\n}\n/**\n    Загрузка подборок на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n*/\nexport function webHomeAllTabMixesImpressionLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'mixes';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.MixesImpression.Loaded', enhancedParams);\n}\n/**\n    Показ Подборок на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. object_showed_percent - Процент показа объекта\n*/\nexport function webHomeAllTabMixesImpressionShowed(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'mixes';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, entity_type, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.MixesImpression.Showed', enhancedParams);\n}\nexport var WebHomeAllTabMixesImpressionNavigatedTo;\n(function (WebHomeAllTabMixesImpressionNavigatedTo) {\n    WebHomeAllTabMixesImpressionNavigatedTo[\"PlaylistScreen\"] = \"playlist_screen\";\n    WebHomeAllTabMixesImpressionNavigatedTo[\"PlaylistListScreen\"] = \"playlist_list_screen\";\n    WebHomeAllTabMixesImpressionNavigatedTo[\"AlbumScreen\"] = \"album_screen\";\n    WebHomeAllTabMixesImpressionNavigatedTo[\"AlbumListScreen\"] = \"album_list_screen\";\n    WebHomeAllTabMixesImpressionNavigatedTo[\"MixesTabScreen\"] = \"mixes_tab_screen\";\n})(WebHomeAllTabMixesImpressionNavigatedTo || (WebHomeAllTabMixesImpressionNavigatedTo = {}));\n/**\n    Переход из Подборок на вкладке \"Всё\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeAllTabMixesImpressionNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'mixes';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.AllTab.MixesImpression.Navigated', enhancedParams);\n}\n/**\n    Открытие вкладки \"Новые релизы\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n*/\nexport function webHomeNewReleasesTabOpened(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.NewReleasesTab.Opened', enhancedParams);\n}\n/**\n    Загрузка вкладки \"Новые релизы\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - 'Тип объекта совершения действия  promotions - фичеры  popular - популярное  track-chart – чарт треков  album-chart - чарт альбомов  recently-played - недавно слушали  editorial - редакторские альбомы  editorial-playlists - редакторские плейлисты  playlist-with-tracks - раскрытый плейлист  category - категория, как карусель  categories-tab - категории  radio - РУПь  timed-show – шоу  menu - меню внизу лендинга  year_results_personal_playlist - блок с плейлистом Итоги 2021'\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n*/\nexport function webHomeNewReleasesTabLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.NewReleasesTab.Loaded', enhancedParams);\n}\nexport var WebHomeNewReleasesTabNavigatedTo;\n(function (WebHomeNewReleasesTabNavigatedTo) {\n    WebHomeNewReleasesTabNavigatedTo[\"AlbumScreen\"] = \"album_screen\";\n    WebHomeNewReleasesTabNavigatedTo[\"ArtistScreen\"] = \"artist_screen\";\n    WebHomeNewReleasesTabNavigatedTo[\"PlaylistScreen\"] = \"playlist_screen\";\n})(WebHomeNewReleasesTabNavigatedTo || (WebHomeNewReleasesTabNavigatedTo = {}));\n/**\n    Переход из вкладки \"Новые релизы\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeNewReleasesTabNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'new_releases';\n    const from = 'new_releases_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.NewReleasesTab.Navigated', enhancedParams);\n}\n/**\n    Запуск треков из вкладки Новые релизы\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n*/\nexport function webHomeNewReleasesTabStarted(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'new_releases';\n    const from = 'all_tab_screen';\n    const interfaces = {\n        generalStarted: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.NewReleasesTab.Started', enhancedParams);\n}\n/**\n    Пауза прослушивания трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeNewReleasesTabPaused(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.NewReleasesTab.Paused', enhancedParams);\n}\n/**\n    Лайк альбома\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeNewReleasesTabLiked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'album';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.NewReleasesTab.Liked', enhancedParams);\n}\n/**\n    Дизлайк альбома\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. album_type - Тип альбома\n    4. album_id - id альбома\n    5. album_name - Название альбома\n    6. object_type - Тип объекта совершения действия\n*/\nexport function webHomeNewReleasesTabUnliked(evgen_analytics, parameters) {\n    const page_type = 'object';\n    const object_type = 'album';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.NewReleasesTab.Unliked', enhancedParams);\n}\n/**\n    Открытие вкладки \"Чарт\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n*/\nexport function webHomeChartTabOpened(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.ChartTab.Opened', enhancedParams);\n}\n/**\n    Загрузка вкладки \"Чарт\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - 'Тип объекта совершения действия  promotions - фичеры  popular - популярное  track-chart – чарт треков  album-chart - чарт альбомов  recently-played - недавно слушали  editorial - редакторские альбомы  editorial-playlists - редакторские плейлисты  playlist-with-tracks - раскрытый плейлист  category - категория, как карусель  categories-tab - категории  radio - РУПь  timed-show – шоу  menu - меню внизу лендинга  year_results_personal_playlist - блок с плейлистом Итоги 2021'\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n*/\nexport function webHomeChartTabLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.ChartTab.Loaded', enhancedParams);\n}\nexport var WebHomeChartTabNavigatedTo;\n(function (WebHomeChartTabNavigatedTo) {\n    WebHomeChartTabNavigatedTo[\"AlbumScreen\"] = \"album_screen\";\n    WebHomeChartTabNavigatedTo[\"ArtistScreen\"] = \"artist_screen\";\n})(WebHomeChartTabNavigatedTo || (WebHomeChartTabNavigatedTo = {}));\n/**\n    Переходы  из вкладки \"Чарт\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - 'Тип объекта совершения действия  promotions - фичеры  popular - популярное  track-chart – чарт треков  album-chart - чарт альбомов  recently-played - недавно слушали  editorial - редакторские альбомы  editorial-playlists - редакторские плейлисты  playlist-with-tracks - раскрытый плейлист  category - категория, как карусель  categories-tab - категории  radio - РУПь  timed-show – шоу  menu - меню внизу лендинга  year_results_personal_playlist - блок с плейлистом Итоги 2021'\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeChartTabNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const from = 'chart_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.ChartTab.Navigated', enhancedParams);\n}\n/**\n    Запуск треков чарта на вкладке \"Чарт\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - Тип сущности, содержащей объекты\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n*/\nexport function webHomeChartTabStarted(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const entity_type = 'track-chart';\n    const from = 'chart_tab_screen';\n    const interfaces = {\n        generalStarted: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, entity_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.ChartTab.Started', enhancedParams);\n}\n/**\n    Пауза прослушивания трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeChartTabPaused(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.ChartTab.Paused', enhancedParams);\n}\n/**\n    Лайк трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeChartTabLiked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.ChartTab.Liked', enhancedParams);\n}\n/**\n    Дизлайк трека\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. object_type - Тип объекта совершения действия\n*/\nexport function webHomeChartTabUnliked(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const object_type = 'track';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, object_type, _meta };\n    evgen_analytics.trackEvent('WebHome.ChartTab.Unliked', enhancedParams);\n}\n/**\n    Открытие вкладки \"Настроения и жанры\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n*/\nexport function webHomeMixesTabOpened(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.MixesTab.Opened', enhancedParams);\n}\n/**\n    Загрузка вкладки \"Настроения и жанры\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - 'Тип объекта совершения действия  promotions - фичеры  popular - популярное  track-chart – чарт треков  album-chart - чарт альбомов  recently-played - недавно слушали  editorial - редакторские альбомы  editorial-playlists - редакторские плейлисты  playlist-with-tracks - раскрытый плейлист  category - категория, как карусель  categories-tab - категории  radio - РУПь  timed-show – шоу  menu - меню внизу лендинга  year_results_personal_playlist - блок с плейлистом Итоги 2021'\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n*/\nexport function webHomeMixesTabLoaded(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const _meta = makeMetaParams(1);\n    const enhancedParams = { ...parameters, page_type, _meta };\n    evgen_analytics.trackEvent('WebHome.MixesTab.Loaded', enhancedParams);\n}\nexport var WebHomeMixesTabNavigatedTo;\n(function (WebHomeMixesTabNavigatedTo) {\n    WebHomeMixesTabNavigatedTo[\"AlbumScreen\"] = \"album_screen\";\n    WebHomeMixesTabNavigatedTo[\"PlaylistScreen\"] = \"playlist_screen\";\n    WebHomeMixesTabNavigatedTo[\"GenreScreen\"] = \"genre_screen\";\n})(WebHomeMixesTabNavigatedTo || (WebHomeMixesTabNavigatedTo = {}));\n/**\n    Переходы из вкладки \"Настроения и жанры\"\n\n    0. page_type - Тип страницы\n    1. page_id - тег страницы (main, kids, collection, ..)\n    2. hash - Хеш\n    3. entity_type - 'Тип объекта совершения действия  promotions - фичеры  popular - популярное  track-chart – чарт треков  album-chart - чарт альбомов  recently-played - недавно слушали  editorial - редакторские альбомы  editorial-playlists - редакторские плейлисты  playlist-with-tracks - раскрытый плейлист  category - категория, как карусель  categories-tab - категории  radio - РУПь  timed-show – шоу  menu - меню внизу лендинга  year_results_personal_playlist - блок с плейлистом Итоги 2021'\n    4. entity_id - id сущности\n    5. entity_name - Название сущности\n    6. entity_pos - Позиция сущности\n    7. object_type - Тип элемента\n    8. object_id - id элемента\n    9. object_name - Название элемента\n    10. object_pos - Позиция элемента\n    11. from - Откуда был совершен переход\n    12. to - Куда был совершен переход\n*/\nexport function webHomeMixesTabNavigated(evgen_analytics, parameters) {\n    const page_type = 'landing';\n    const from = 'mixes_tab_screen';\n    const interfaces = {\n        generalNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = { ...parameters, page_type, from, _meta };\n    evgen_analytics.trackEvent('WebHome.MixesTab.Navigated', enhancedParams);\n}\n/**\n    Загрузка персонализированного UI-блока\n\n    0. hash - Хэш, характеризующий позицию экрана в навигационном стеке (a.k.a. From 4.0)\n    1. page_id - Унифицированное имя/id экрана на латинице\n    2. page_type - Тип страницы\n    3. tab_id - Унифицированное имя/id таба на латинице. По-умолчанию, есть табы \"Для вас\" и \"Обзор\", но в будущем могут появится промо-табы\n    4. tabPos - Порядковый номер таба по горизонтали. Индексация с 1\n    5. isTabSelectedByDefault - True если таб предвыбран заранее для пользователя\n    6. displayReasonId - ID запроса на бекенд рекомендаций.Критически важен для обучения алгоритмов персонализации.Детали https://st.yandex-team.ru/MUSICBACKEND-13411Если блок строится не по данным рекомендаций, то по-умолчанию отсылается пустая строка\n    7. entity_type - Тип визуального элемента (IN_STYLE, WAVES, NEW_RELEASES и т.д.). Типы задаются на бекенде. Полный список - https://a.yandex-team.ru/arcadia/music/backend/music-common/landing-proto/proto/block.proto?rev=r12565191#L110\n    8. entity_id - Идентификатор элемента. Если статичен, то совпадает с entity_type. Если динамичен, то отсылается ID из скелетона.\n    9. entityPosX - Позиция элемента на экране по горизонтали (индексация с 1; по-умолчанию 1). Для \"узких\" мобильных платформ всегда 1, но может пригодится для web/desktop.\n    10. entityPosY - Позиция элемента на экране по вертикали (индексация с 1; по-умолчанию 1)\n    11. objectsCount - Количество доменных объектов, которые отображаются внутри элемента (по-умолчанию 0)\n    12. filterKey - Тип параметра по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album или artist, а для WAVES - genre, mood и т.д. Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    13. filterValue - Значение параметр по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album_id или artist_id, а для WAVES - genre:rock или любой другой ID станции Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    14. filterPos - Позиция фильтра в блоке. Индексация с 1. Например, в блоках IN_STYLE и WAVES по-умолчанию выбран фильтр с позицией 1. Если в блоке не предусмотрен выбор категории/фильтра, то передается 0\n*/\nexport function webHomeDiscoveryBlockLoaded(evgen_analytics, parameters) {\n    const { tabPos = 1, isTabSelectedByDefault = false, displayReasonId = '', entityPosX = 1, entityPosY = 1, objectsCount = 0, filterKey = '', filterValue = '', filterPos = 0 } = parameters;\n    const page_id = 'main_screen';\n    const page_type = 'landing';\n    const interfaces = {\n        from40Properties: {\n            version: 1\n        },\n        uIScreenProperties: {\n            version: 1\n        },\n        uITabProperties: {\n            version: 1\n        },\n        uIEntityProperties: {\n            version: 1\n        },\n        uIEntityDisplayReason: {\n            version: 1\n        },\n        uIEntityLoaded: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = {\n        ...parameters,\n        tabPos,\n        isTabSelectedByDefault,\n        displayReasonId,\n        entityPosX,\n        entityPosY,\n        objectsCount,\n        filterKey,\n        filterValue,\n        filterPos,\n        page_id,\n        page_type,\n        _meta\n    };\n    evgen_analytics.trackEvent('WebHome.DiscoveryBlock.Loaded', enhancedParams);\n}\n/**\n    Условия отправки: элемент был на экране не меньше одной секунды и не меньше, чем на 80% своей площади.\nОтправляется один ра если:\n  1. элемент скрылся с экрана и затем показан снова, то отсылаем повторно.\n  2. блок имеет категории/фильтры, то при смене фильтра событие отслается еще раз, но с новыми значениями.\n\n    0. hash - Хэш, характеризующий позицию экрана в навигационном стеке (a.k.a. From 4.0)\n    1. page_id - Унифицированное имя/id экрана на латинице\n    2. page_type - Тип страницы\n    3. tab_id - Унифицированное имя/id таба на латинице. По-умолчанию, есть табы \"Для вас\" и \"Обзор\", но в будущем могут появится промо-табы\n    4. tabPos - Порядковый номер таба по горизонтали. Индексация с 1\n    5. isTabSelectedByDefault - True если таб предвыбран заранее для пользователя\n    6. displayReasonId - ID запроса на бекенд рекомендаций.Критически важен для обучения алгоритмов персонализации.Детали https://st.yandex-team.ru/MUSICBACKEND-13411Если блок строится не по данным рекомендаций, то по-умолчанию отсылается пустая строка\n    7. entity_type - Тип визуального элемента (IN_STYLE, WAVES, NEW_RELEASES и т.д.). Типы задаются на бекенде. Полный список - https://a.yandex-team.ru/arcadia/music/backend/music-common/landing-proto/proto/block.proto?rev=r12565191#L110\n    8. entity_id - Идентификатор элемента. Если статичен, то совпадает с entity_type. Если динамичен, то отсылается ID из скелетона.\n    9. entityPosX - Позиция элемента на экране по горизонтали (индексация с 1; по-умолчанию 1). Для \"узких\" мобильных платформ всегда 1, но может пригодится для web/desktop.\n    10. entityPosY - Позиция элемента на экране по вертикали (индексация с 1; по-умолчанию 1)\n    11. objectsCount - Количество доменных объектов, которые отображаются внутри элемента (по-умолчанию 0)\n    12. filterKey - Тип параметра по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album или artist, а для WAVES - genre, mood и т.д. Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    13. filterValue - Значение параметр по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album_id или artist_id, а для WAVES - genre:rock или любой другой ID станции Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    14. filterPos - Позиция фильтра в блоке. Индексация с 1. Например, в блоках IN_STYLE и WAVES по-умолчанию выбран фильтр с позицией 1. Если в блоке не предусмотрен выбор категории/фильтра, то передается 0\n    15. view_uuid - Генерируется для каждого элемента внутри блока (или для целого блока, если у него нет подэлементов) на экране. Сохраняется за элементом до тех пор, пока он не скроется с экрана (юзер пролистал ленту ИЛИ перешел на другой экран ИЛИ сменил фильтр у блока). Когда элемент вновь пояляется на экране, то генерируется новый UUID. Использование в аналитике и ML: в рамках view_uuid можно вычислить время пребывания элемента на экране, если вычесть timestamp события из Hinned timestamp события Showed. Комментарий реализации от schernenok@: В Android уже есть модифаер, который сам считает это значение при показе/скрытии элемента: Modifier.analyticsVisibilityChanged Суть значения такая: когда мы показываем элемент (событие shown) мы генерим уникальный uuid, который позже передаем в симметричное событие hidden. Этот uuid затем нужен в аналитке для связки этих двух событий, например для вычисления времени, проведенного на экране.Использование uuid выглядит проще в реализации, чем самим на клиентах считать время элемента на экране\n    16. object_type - Тип показанного объекта. \"Объект\" представляет собой доменную сущность из предметной области Музыки и способная иметь множество визуальных представлений (трек, альбом, артист, плейлист и т.д.)\n    17. object_id - Идентификатор показанного объекта. Если тип shortcut, то передавать path из deep link.\n    18. objectPosX - Позиция элемента внутри UI-блока по вертикали (например, позиция Волны или Трека в Карусели). Индексация объектов внутри блока с 1. Если переход идет по ссылки (например, \"Всё >\"), то отсылается 0\n    19. objectPosY - Позиция элемента внутри UI-блока по горизонтали (например, позиция Волны или Трека в Карусели). Индексация объектов внутри блока с 1. Если переход идет по ссылки (например, \"Всё >\"), то отсылается 0\n*/\nexport function webHomeDiscoveryBlockShowed(evgen_analytics, parameters) {\n    const { tabPos = 1, isTabSelectedByDefault = false, displayReasonId = '', entityPosX = 1, entityPosY = 1, objectsCount = 0, filterKey = '', filterValue = '', filterPos = 0, objectPosX = 0, objectPosY = 0 } = parameters;\n    const page_id = 'main_screen';\n    const page_type = 'landing';\n    const interfaces = {\n        from40Properties: {\n            version: 1\n        },\n        uIScreenProperties: {\n            version: 1\n        },\n        uITabProperties: {\n            version: 1\n        },\n        uIEntityProperties: {\n            version: 1\n        },\n        uIEntityDisplayReason: {\n            version: 1\n        },\n        uIEntityFilterable: {\n            version: 1\n        },\n        domainObjectProperties: {\n            version: 1\n        },\n        uIEntityLifecycle: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = {\n        ...parameters,\n        tabPos,\n        isTabSelectedByDefault,\n        displayReasonId,\n        entityPosX,\n        entityPosY,\n        objectsCount,\n        filterKey,\n        filterValue,\n        filterPos,\n        objectPosX,\n        objectPosY,\n        page_id,\n        page_type,\n        _meta\n    };\n    evgen_analytics.trackEvent('WebHome.DiscoveryBlock.Showed', enhancedParams);\n}\n/**\n    Персонализированный UI-блок скрылся с экрана\n\n    0. hash - Хэш, характеризующий позицию экрана в навигационном стеке (a.k.a. From 4.0)\n    1. page_id - Унифицированное имя/id экрана на латинице\n    2. page_type - Тип страницы\n    3. tab_id - Унифицированное имя/id таба на латинице. По-умолчанию, есть табы \"Для вас\" и \"Обзор\", но в будущем могут появится промо-табы\n    4. tabPos - Порядковый номер таба по горизонтали. Индексация с 1\n    5. isTabSelectedByDefault - True если таб предвыбран заранее для пользователя\n    6. displayReasonId - ID запроса на бекенд рекомендаций.Критически важен для обучения алгоритмов персонализации.Детали https://st.yandex-team.ru/MUSICBACKEND-13411Если блок строится не по данным рекомендаций, то по-умолчанию отсылается пустая строка\n    7. entity_type - Тип визуального элемента (IN_STYLE, WAVES, NEW_RELEASES и т.д.). Типы задаются на бекенде. Полный список - https://a.yandex-team.ru/arcadia/music/backend/music-common/landing-proto/proto/block.proto?rev=r12565191#L110\n    8. entity_id - Идентификатор элемента. Если статичен, то совпадает с entity_type. Если динамичен, то отсылается ID из скелетона.\n    9. entityPosX - Позиция элемента на экране по горизонтали (индексация с 1; по-умолчанию 1). Для \"узких\" мобильных платформ всегда 1, но может пригодится для web/desktop.\n    10. entityPosY - Позиция элемента на экране по вертикали (индексация с 1; по-умолчанию 1)\n    11. objectsCount - Количество доменных объектов, которые отображаются внутри элемента (по-умолчанию 0)\n    12. filterKey - Тип параметра по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album или artist, а для WAVES - genre, mood и т.д. Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    13. filterValue - Значение параметр по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album_id или artist_id, а для WAVES - genre:rock или любой другой ID станции Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    14. filterPos - Позиция фильтра в блоке. Индексация с 1. Например, в блоках IN_STYLE и WAVES по-умолчанию выбран фильтр с позицией 1. Если в блоке не предусмотрен выбор категории/фильтра, то передается 0\n    15. view_uuid - Генерируется для каждого элемента внутри блока (или для целого блока, если у него нет подэлементов) на экране. Сохраняется за элементом до тех пор, пока он не скроется с экрана (юзер пролистал ленту ИЛИ перешел на другой экран ИЛИ сменил фильтр у блока). Когда элемент вновь пояляется на экране, то генерируется новый UUID. Использование в аналитике и ML: в рамках view_uuid можно вычислить время пребывания элемента на экране, если вычесть timestamp события из Hinned timestamp события Showed. Комментарий реализации от schernenok@: В Android уже есть модифаер, который сам считает это значение при показе/скрытии элемента: Modifier.analyticsVisibilityChanged Суть значения такая: когда мы показываем элемент (событие shown) мы генерим уникальный uuid, который позже передаем в симметричное событие hidden. Этот uuid затем нужен в аналитке для связки этих двух событий, например для вычисления времени, проведенного на экране.Использование uuid выглядит проще в реализации, чем самим на клиентах считать время элемента на экране\n    16. object_type - Тип показанного объекта. \"Объект\" представляет собой доменную сущность из предметной области Музыки и способная иметь множество визуальных представлений (трек, альбом, артист, плейлист и т.д.)\n    17. object_id - Идентификатор показанного объекта. Если тип shortcut, то передавать path из deep link.\n    18. objectPosX - Позиция элемента внутри UI-блока по вертикали (например, позиция Волны или Трека в Карусели). Индексация объектов внутри блока с 1. Если переход идет по ссылки (например, \"Всё >\"), то отсылается 0\n    19. objectPosY - Позиция элемента внутри UI-блока по горизонтали (например, позиция Волны или Трека в Карусели). Индексация объектов внутри блока с 1. Если переход идет по ссылки (например, \"Всё >\"), то отсылается 0\n*/\nexport function webHomeDiscoveryBlockHidden(evgen_analytics, parameters) {\n    const { tabPos = 1, isTabSelectedByDefault = false, displayReasonId = '', entityPosX = 1, entityPosY = 1, objectsCount = 0, filterKey = '', filterValue = '', filterPos = 0, objectPosX = 0, objectPosY = 0 } = parameters;\n    const page_id = 'main_screen';\n    const page_type = 'landing';\n    const interfaces = {\n        from40Properties: {\n            version: 1\n        },\n        uIScreenProperties: {\n            version: 1\n        },\n        uITabProperties: {\n            version: 1\n        },\n        uIEntityProperties: {\n            version: 1\n        },\n        uIEntityDisplayReason: {\n            version: 1\n        },\n        uIEntityFilterable: {\n            version: 1\n        },\n        domainObjectProperties: {\n            version: 1\n        },\n        uIEntityLifecycle: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = {\n        ...parameters,\n        tabPos,\n        isTabSelectedByDefault,\n        displayReasonId,\n        entityPosX,\n        entityPosY,\n        objectsCount,\n        filterKey,\n        filterValue,\n        filterPos,\n        objectPosX,\n        objectPosY,\n        page_id,\n        page_type,\n        _meta\n    };\n    evgen_analytics.trackEvent('WebHome.DiscoveryBlock.Hidden', enhancedParams);\n}\n/**\n    Переход на другой экран с персонализированного UI-блока\n\n    0. hash - Хэш, характеризующий позицию экрана в навигационном стеке (a.k.a. From 4.0)\n    1. page_id - Унифицированное имя/id экрана на латинице\n    2. page_type - Тип страницы\n    3. tab_id - Унифицированное имя/id таба на латинице. По-умолчанию, есть табы \"Для вас\" и \"Обзор\", но в будущем могут появится промо-табы\n    4. tabPos - Порядковый номер таба по горизонтали. Индексация с 1\n    5. isTabSelectedByDefault - True если таб предвыбран заранее для пользователя\n    6. from - С какого экрана приложения был совершен переход\n    7. to - На какой экран приложения был совершен переход\n    8. deepLink - Опциональный параметр с \"сырым\" значением ссылки для перехода\n    9. displayReasonId - ID запроса на бекенд рекомендаций.Критически важен для обучения алгоритмов персонализации.Детали https://st.yandex-team.ru/MUSICBACKEND-13411Если блок строится не по данным рекомендаций, то по-умолчанию отсылается пустая строка\n    10. entity_type - Тип визуального элемента (IN_STYLE, WAVES, NEW_RELEASES и т.д.). Типы задаются на бекенде. Полный список - https://a.yandex-team.ru/arcadia/music/backend/music-common/landing-proto/proto/block.proto?rev=r12565191#L110\n    11. entity_id - Идентификатор элемента. Если статичен, то совпадает с entity_type. Если динамичен, то отсылается ID из скелетона.\n    12. entityPosX - Позиция элемента на экране по горизонтали (индексация с 1; по-умолчанию 1). Для \"узких\" мобильных платформ всегда 1, но может пригодится для web/desktop.\n    13. entityPosY - Позиция элемента на экране по вертикали (индексация с 1; по-умолчанию 1)\n    14. objectsCount - Количество доменных объектов, которые отображаются внутри элемента (по-умолчанию 0)\n    15. filterKey - Тип параметра по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album или artist, а для WAVES - genre, mood и т.д. Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    16. filterValue - Значение параметр по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album_id или artist_id, а для WAVES - genre:rock или любой другой ID станции Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    17. filterPos - Позиция фильтра в блоке. Индексация с 1. Например, в блоках IN_STYLE и WAVES по-умолчанию выбран фильтр с позицией 1. Если в блоке не предусмотрен выбор категории/фильтра, то передается 0\n    18. object_type - Тип показанного объекта. \"Объект\" представляет собой доменную сущность из предметной области Музыки и способная иметь множество визуальных представлений (трек, альбом, артист, плейлист и т.д.)\n    19. object_id - Идентификатор показанного объекта. Если тип shortcut, то передавать path из deep link.\n    20. objectPosX - Позиция элемента внутри UI-блока по вертикали (например, позиция Волны или Трека в Карусели). Индексация объектов внутри блока с 1. Если переход идет по ссылки (например, \"Всё >\"), то отсылается 0\n    21. objectPosY - Позиция элемента внутри UI-блока по горизонтали (например, позиция Волны или Трека в Карусели). Индексация объектов внутри блока с 1. Если переход идет по ссылки (например, \"Всё >\"), то отсылается 0\n*/\nexport function webHomeDiscoveryBlockNavigated(evgen_analytics, parameters) {\n    const { tabPos = 1, isTabSelectedByDefault = false, deepLink = '', displayReasonId = '', entityPosX = 1, entityPosY = 1, objectsCount = 0, filterKey = '', filterValue = '', filterPos = 0, objectPosX = 0, objectPosY = 0 } = parameters;\n    const page_id = 'main_screen';\n    const page_type = 'landing';\n    const interfaces = {\n        from40Properties: {\n            version: 1\n        },\n        uIScreenProperties: {\n            version: 1\n        },\n        uITabProperties: {\n            version: 1\n        },\n        domainObjectProperties: {\n            version: 1\n        },\n        uIEntityProperties: {\n            version: 1\n        },\n        uIEntityDisplayReason: {\n            version: 1\n        },\n        uIEntityFilterable: {\n            version: 1\n        },\n        uIEntityNavigated: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = {\n        ...parameters,\n        tabPos,\n        isTabSelectedByDefault,\n        deepLink,\n        displayReasonId,\n        entityPosX,\n        entityPosY,\n        objectsCount,\n        filterKey,\n        filterValue,\n        filterPos,\n        objectPosX,\n        objectPosY,\n        page_id,\n        page_type,\n        _meta\n    };\n    evgen_analytics.trackEvent('WebHome.DiscoveryBlock.Navigated', enhancedParams);\n}\n/**\n    Запуск медиа с персонализированного UI-блока\n\n    0. hash - Хэш, характеризующий позицию экрана в навигационном стеке (a.k.a. From 4.0)\n    1. page_id - Унифицированное имя/id экрана на латинице\n    2. page_type - Тип страницы\n    3. tab_id - Унифицированное имя/id таба на латинице. По-умолчанию, есть табы \"Для вас\" и \"Обзор\", но в будущем могут появится промо-табы\n    4. tabPos - Порядковый номер таба по горизонтали. Индексация с 1\n    5. isTabSelectedByDefault - True если таб предвыбран заранее для пользователя\n    6. displayReasonId - ID запроса на бекенд рекомендаций.Критически важен для обучения алгоритмов персонализации.Детали https://st.yandex-team.ru/MUSICBACKEND-13411Если блок строится не по данным рекомендаций, то по-умолчанию отсылается пустая строка\n    7. entity_type - Тип визуального элемента (IN_STYLE, WAVES, NEW_RELEASES и т.д.). Типы задаются на бекенде. Полный список - https://a.yandex-team.ru/arcadia/music/backend/music-common/landing-proto/proto/block.proto?rev=r12565191#L110\n    8. entity_id - Идентификатор элемента. Если статичен, то совпадает с entity_type. Если динамичен, то отсылается ID из скелетона.\n    9. entityPosX - Позиция элемента на экране по горизонтали (индексация с 1; по-умолчанию 1). Для \"узких\" мобильных платформ всегда 1, но может пригодится для web/desktop.\n    10. entityPosY - Позиция элемента на экране по вертикали (индексация с 1; по-умолчанию 1)\n    11. objectsCount - Количество доменных объектов, которые отображаются внутри элемента (по-умолчанию 0)\n    12. filterKey - Тип параметра по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album или artist, а для WAVES - genre, mood и т.д. Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    13. filterValue - Значение параметр по которому идет фильтрация. Например, для блока IN_STYLE - это может быть album_id или artist_id, а для WAVES - genre:rock или любой другой ID станции Если в блоке не предусмотрен выбор категории/фильтра, то по-умолчанию передается пустая строка.\n    14. filterPos - Позиция фильтра в блоке. Индексация с 1. Например, в блоках IN_STYLE и WAVES по-умолчанию выбран фильтр с позицией 1. Если в блоке не предусмотрен выбор категории/фильтра, то передается 0\n    15. object_type - Тип показанного объекта. \"Объект\" представляет собой доменную сущность из предметной области Музыки и способная иметь множество визуальных представлений (трек, альбом, артист, плейлист и т.д.)\n    16. object_id - Идентификатор показанного объекта. Если тип shortcut, то передавать path из deep link.\n    17. objectPosX - Позиция элемента внутри UI-блока по вертикали (например, позиция Волны или Трека в Карусели). Индексация объектов внутри блока с 1. Если переход идет по ссылки (например, \"Всё >\"), то отсылается 0\n    18. objectPosY - Позиция элемента внутри UI-блока по горизонтали (например, позиция Волны или Трека в Карусели). Индексация объектов внутри блока с 1. Если переход идет по ссылки (например, \"Всё >\"), то отсылается 0\n*/\nexport function webHomeDiscoveryBlockStarted(evgen_analytics, parameters) {\n    const { tabPos = 1, isTabSelectedByDefault = false, displayReasonId = '', entityPosX = 1, entityPosY = 1, objectsCount = 0, filterKey = '', filterValue = '', filterPos = 0, objectPosX = 0, objectPosY = 0 } = parameters;\n    const page_id = 'main_screen';\n    const page_type = 'landing';\n    const interfaces = {\n        from40Properties: {\n            version: 1\n        },\n        uIScreenProperties: {\n            version: 1\n        },\n        uITabProperties: {\n            version: 1\n        },\n        uIEntityProperties: {\n            version: 1\n        },\n        uIEntityDisplayReason: {\n            version: 1\n        },\n        uIEntityFilterable: {\n            version: 1\n        },\n        domainObjectProperties: {\n            version: 1\n        }\n    };\n    const _meta = makeMetaParams(1, interfaces);\n    const enhancedParams = {\n        ...parameters,\n        tabPos,\n        isTabSelectedByDefault,\n        displayReasonId,\n        entityPosX,\n        entityPosY,\n        objectsCount,\n        filterKey,\n        filterValue,\n        filterPos,\n        objectPosX,\n        objectPosY,\n        page_id,\n        page_type,\n        _meta\n    };\n    evgen_analytics.trackEvent('WebHome.DiscoveryBlock.Started', enhancedParams);\n}\n//# sourceMappingURL=webHome.js.map","export { createEventTracker } from './helpers/createEvgenTracker.js';\nexport { createGlobalParamsProvider } from './helpers/createGlobalParamsProvider.js';\nexport { createPlatformParamsProvider } from './helpers/createPlatformParamsProvider.js';\nexport { YaMusicAnalytics } from './eventsProvider/YaMusicAnalytics/YaMusicAnalytics.js';\nexport * from './events/webHome/webHome.js';\n//# sourceMappingURL=index.js.map","'use client';\n\nimport { ReactElement, useMemo } from 'react';\n\nimport {\n    YaMusicAnalytics,\n    createEventTracker,\n    createGlobalParamsProvider,\n    createPlatformParamsProvider\n} from '@yandex-music-int/analytics';\n\nimport { AnalyticsContext, WithChildren, useLogger, useMetrika } from '@/shared/lib/index.js';\n\ninterface Props extends WithChildren {}\n\nlet singletonAnalytics: YaMusicAnalytics | null = null;\n\nexport const AnalyticsProvider = ({ children }: Props): ReactElement => {\n    const metrika = useMetrika();\n    const logger = useLogger();\n    const analytics = useMemo(() => {\n        if (typeof window === 'undefined' || !metrika.isLoaded) {\n            return null;\n        }\n\n        if (singletonAnalytics) {\n            return singletonAnalytics;\n        }\n\n        const eventTracker = createEventTracker(\n            (events: Array<Record<string, unknown>>) => {\n                return metrika.count(events, 'evgen');\n            },\n            logger,\n            false\n        );\n\n        const globalParamsProvider = createGlobalParamsProvider();\n        const platformParamsProvider = createPlatformParamsProvider();\n\n        singletonAnalytics = new YaMusicAnalytics(eventTracker, globalParamsProvider, platformParamsProvider);\n\n        return singletonAnalytics;\n    }, [metrika, logger]);\n\n    return <AnalyticsContext.Provider value={analytics}>{children}</AnalyticsContext.Provider>;\n};\n","'use client';\n\nimport { observer } from 'mobx-react-lite';\nimport { ReactNode } from 'react';\n\nimport {\n    WithChildren,\n    useUrl,\n    useContainer,\n    CONTAINER_AUTHORIZATION,\n    getTldFromHost,\n    useStore\n} from '@/shared/lib/index.js';\n\ninterface Props extends WithChildren {\n    host: string;\n}\n\n/*\n    Этот провайдер неразрывно связан с классом Authorization и нужен для доставки\n    необходимой информации (модель User, текущий URL) в этот класс\n*/\nexport const AuthorizationProvider = observer(({ children, host: serverSideHost }: Props): ReactNode => {\n    const container = useContainer();\n    const { user } = useStore();\n    const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n    const { pathname, host, searchParams, tld } = useUrl();\n\n    authorization.setRedirectUrl({\n        pathname,\n        searchParams,\n        host: typeof window === 'undefined' ? serverSideHost : host,\n        tld: typeof window === 'undefined' ? getTldFromHost(serverSideHost) : tld\n    });\n\n    authorization.setTokenOwnerLogin?.(user.account?.login);\n    authorization.check();\n\n    return children;\n});\n","'use client';\n\nimport { ReactNode, use } from 'react';\n\nimport {\n    Blackbox,\n    WithChildren,\n    useContainer,\n    CONTAINER_BLACKBOX,\n    CONTAINER_CONFIG_TOKEN,\n    ensureContainerExists\n} from '@/shared/lib/index.js';\n\ninterface Props extends WithChildren {\n    host: string;\n    userIp: string;\n}\n\nexport const BlackboxProvider = ({ children, host, userIp }: Props): ReactNode => {\n    if (typeof window === 'undefined') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const container = useContainer();\n        const config = container.get(CONTAINER_CONFIG_TOKEN);\n        const { blackbox: blackboxConfig } = config;\n\n        if (blackboxConfig.enabled) {\n            const hostname = host.replace(/:[\\d]+$/i, '');\n            const blackbox = container.get(CONTAINER_BLACKBOX);\n\n            if (ensureContainerExists(blackbox, Blackbox)) {\n                use(blackbox.loadSession(hostname, userIp));\n            }\n        }\n    }\n\n    return children;\n};\n","'use client';\n\nimport { ReactElement, use } from 'react';\n\nimport { WithChildren, ContainerContext, getContainer } from '@/shared/lib/index.js';\n\ninterface Props extends WithChildren {\n    hostTld: string;\n    env: typeof process.env.NEXT_PUBLIC_CONFIG_ENV;\n}\n\nexport const ContainerProvider = ({ children, hostTld, env }: Props): ReactElement => {\n    const container = use(getContainer(hostTld, env));\n\n    return <ContainerContext.Provider value={container}>{children}</ContainerContext.Provider>;\n};\n","import { ReactNode } from 'react';\nimport { IntlFormatters } from 'react-intl';\n\nimport { NotificationContainerId, NotifyFunction, DesktopEvents } from '@/shared/lib/index.js';\n\nimport { NotificationUpdate } from '../ui/NotificationUpdate/NotificationUpdate.js';\n\nexport const handleUpdate = (\n    formatMessage: IntlFormatters<ReactNode>['formatMessage'],\n    notify: NotifyFunction\n): void => {\n    let latestVersion: string | null = null;\n\n    window.desktopEvents?.on(DesktopEvents.ON_UPDATE_AVAILABLE, (event: unknown, version: string): void => {\n        if (latestVersion === version) {\n            return;\n        }\n\n        latestVersion = version;\n\n        notify(<NotificationUpdate formatMessage={formatMessage} version={version} />, {\n            containerId: NotificationContainerId.APPLICATION_UPDATE\n        });\n    });\n};\n","import { ReactNode } from 'react';\nimport { IntlFormatters } from 'react-intl';\n\nimport { NotifyFunction } from '@/shared/lib/index.js';\n\nimport { handleUpdate } from './handleUpdate.js';\n\nexport const handleDesktopEvents = (\n    formatMessage: IntlFormatters<ReactNode>['formatMessage'],\n    notify: NotifyFunction\n): void => {\n    handleUpdate(formatMessage, notify);\n};\n","import { DesktopEvents } from '@/shared/lib/index.js';\n\nexport const sendApplicationReadyEvent = (): void => {\n    window.desktopEvents?.send(DesktopEvents.ON_APPLICATION_READY);\n};\n","export { handleDesktopEvents } from './lib/handleDesktopEvents.js';\nexport { sendApplicationReadyEvent } from './lib/sendApplicationReadyEvent.js';\nexport { sendWindowMinimizeEvent, sendWindowMaximizeEvent, sendWindowCloseEvent } from './lib/sendWindowEvent.js';\nexport { TitleBar } from './ui/TitleBar/TitleBar.js';\n","/* eslint-disable react-hooks/rules-of-hooks */\n\n'use client';\n\nimport { clsx } from 'clsx';\nimport { useEffect, ReactNode } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Notification } from '@yandex-music-int/sol/components/Notification';\n\nimport { sendApplicationReadyEvent, handleDesktopEvents } from '@/features/desktop-bridge/index.js';\n\nimport { useNotify, getPlatform, NotificationContainerId, WithChildren, Platform } from '@/shared/lib/index.js';\n\ninterface Props extends WithChildren {}\n\nexport const DesktopProvider = ({ children }: Props): ReactNode => {\n    const platform = getPlatform();\n\n    if (process.env.BUILD_TYPE === 'desktop') {\n        const { formatMessage } = useIntl();\n        const { notify } = useNotify();\n\n        useEffect(() => {\n            sendApplicationReadyEvent();\n        }, []);\n\n        useEffect(() => {\n            handleDesktopEvents(formatMessage, notify);\n        }, [notify, formatMessage]);\n    }\n\n    return (\n        <>\n            {children}\n            {process.env.BUILD_TYPE === 'desktop' && (\n                <Notification\n                    className={clsx({\n                        updateNotificationContainer: true,\n                        updateNotificationContainer_application_windows: platform === Platform.WINDOWS,\n                        updateNotificationContainer_application_macos: platform === Platform.MACOS\n                    })}\n                    enableMultiContainer\n                    containerId={NotificationContainerId.APPLICATION_UPDATE}\n                    position=\"top-center\"\n                />\n            )}\n        </>\n    );\n};\n","'use client';\n\nimport { useRouter } from 'next/navigation.js';\nimport { ReactElement, useCallback, useMemo, useState } from 'react';\n\nimport { HistoryNode } from '@/shared/lib/history/HistoryNode.js';\nimport { HistoryNodeData } from '@/shared/lib/history/types/HistoryNodeData.js';\nimport {\n    HistoryList,\n    HistoryContext,\n    WithChildren,\n    useContainer,\n    CONTAINER_SESSION_STORAGE\n} from '@/shared/lib/index.js';\n\ninterface Props extends WithChildren {}\n\nlet singletonHistory: HistoryList | null = null;\n\nexport const HistoryProvider = ({ children }: Props): ReactElement => {\n    const container = useContainer();\n    const router = useRouter();\n\n    const [canBack, setCanBack] = useState(false);\n    const [canForward, setCanForward] = useState(false);\n    const [state, setState] = useState<HistoryNode | null>(null);\n\n    const history = useMemo((): HistoryList | null => {\n        if (typeof window === 'undefined') {\n            return null;\n        }\n\n        if (singletonHistory) {\n            return singletonHistory;\n        }\n\n        const sessionStorage = container.get(CONTAINER_SESSION_STORAGE);\n\n        singletonHistory = new HistoryList(sessionStorage);\n\n        return singletonHistory;\n    }, [container]);\n\n    const updateState = useCallback(() => {\n        if (!history) {\n            return;\n        }\n\n        setCanBack(history.canBack);\n        setCanForward(history.canForward);\n        setState(history.state);\n    }, [history]);\n\n    const replaceState = useCallback(\n        (data: HistoryNodeData) => {\n            if (!history) {\n                return;\n            }\n\n            history.replaceState(data);\n            router.replace(data.href);\n        },\n        [history, router]\n    );\n\n    const pushState = useCallback(\n        (data: HistoryNodeData) => {\n            if (!history) {\n                return;\n            }\n\n            history.pushState(data);\n            updateState();\n        },\n        [history, updateState]\n    );\n\n    const back = useCallback(() => {\n        if (!history) {\n            return;\n        }\n\n        history.back();\n        updateState();\n        router.back();\n    }, [history, router, updateState]);\n\n    const forward = useCallback(() => {\n        if (!history) {\n            return;\n        }\n\n        history.forward();\n        updateState();\n        router.forward();\n    }, [history, router, updateState]);\n\n    return (\n        <HistoryContext.Provider\n            value={{\n                pushState,\n                replaceState,\n                canForward,\n                canBack,\n                back,\n                forward,\n                state\n            }}\n        >\n            {children}\n        </HistoryContext.Provider>\n    );\n};\n","'use client';\n\nimport { throttle } from 'lodash-es';\nimport { observer } from 'mobx-react-lite';\nimport { ReactElement, useEffect, useMemo, useLayoutEffect, useState, useCallback } from 'react';\n\nimport {\n    getLayoutName,\n    getPlatform,\n    useStore,\n    userAgentLayout,\n    Theme,\n    LayoutContext,\n    WithChildren,\n    UserAgent,\n    ColorScheme\n} from '@/shared/lib/index.js';\nimport { SettingsModel } from '@/shared/models/Settings.js';\n\nconst THROTTLE_WAIT = 100;\n\ninterface Props extends WithChildren {\n    userAgent: UserAgent;\n    clientTld: string;\n}\n\nexport const setClientSideLayout = (settings: SettingsModel): void => {\n    if (typeof window !== 'undefined') {\n        document.body.classList.remove('desktop');\n        settings.setLayout(getLayoutName(window.innerWidth));\n    }\n};\n\nexport const LayoutProvider = observer(({ children, userAgent, clientTld }: Props): ReactElement<Props> => {\n    const { settings } = useStore();\n    const [contentRef, setContentRef] = useState<HTMLElement | null>(null);\n    const platform = getPlatform();\n\n    settings.setClientTld(clientTld);\n\n    if (platform) {\n        settings.setPlatform(platform);\n    }\n\n    if (!settings.layout && typeof window === 'undefined') {\n        settings.setLayout(userAgentLayout(userAgent));\n    }\n\n    const theme = Theme.Dark;\n    const colorScheme: ColorScheme = 'dark';\n\n    const handleWindowResize = useMemo(() => {\n        return throttle(() => {\n            setClientSideLayout(settings);\n        }, THROTTLE_WAIT);\n    }, [settings]);\n\n    useLayoutEffect(() => {\n        setClientSideLayout(settings);\n    }, [settings]);\n\n    useEffect(() => {\n        window.addEventListener('resize', handleWindowResize);\n\n        return () => {\n            window.removeEventListener('resize', handleWindowResize);\n        };\n    }, [handleWindowResize]);\n\n    const setContentRefHandler = useCallback((ref: HTMLElement | null) => {\n        setContentRef(ref);\n    }, []);\n\n    const value = useMemo(() => {\n        return {\n            theme,\n            colorScheme,\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            setTheme: () => {},\n            contentRef,\n            setContentRef: setContentRefHandler\n        };\n    }, [contentRef, setContentRefHandler, theme]);\n\n    return <LayoutContext.Provider value={value}>{children}</LayoutContext.Provider>;\n});\n","'use client';\n\nimport { observer } from 'mobx-react-lite';\nimport { ReactNode, use } from 'react';\n\nimport { useStore, WithChildren, LoadingState, useContainer, CONTAINER_AUTHORIZATION } from '@/shared/lib/index.js';\n\nimport { setClientSideLayout } from './LayoutProvider.js';\n\ninterface Props extends WithChildren {}\n\nconst prefetchRequests = async (store: RootModel, hasAuthorizationCredentials: boolean): Promise<void> => {\n    const { user, library, experiments, slides } = store;\n\n    // если у нас не установлен токен в хранилище либо кука авторизации, то пользователь 100% не авторизован\n    // нет смысла делать запрос за его данными (account/about), просто проставляем ему незалогина в модель\n    const authorizationAction = hasAuthorizationCredentials ? user.getAbout : user.setUnauthorized;\n\n    await Promise.all([authorizationAction(), experiments.getData()]);\n\n    if (user.isAuthorized) {\n        await Promise.all([user.getSettings(), library.getData(), slides.getUserSlides()]);\n    }\n};\n\nexport const PrefetchDataProvider = observer(({ children }: Props): ReactNode => {\n    const store = useStore();\n    const container = useContainer();\n    const authorization = container.get(CONTAINER_AUTHORIZATION);\n    const hasAuthorizationCredentials = authorization.hasAuthorizationCredentials;\n\n    /*\n        Т.к. модель settings исключена из гидратации, то нам нужно инициализировать ее\n        на клиенте как можно скорее, чтобы исключить лишние перерисовки компонентов\n    */\n    setClientSideLayout(store.settings);\n\n    if (store.user.account.loadingState === LoadingState.IDLE) {\n        use(prefetchRequests(store, hasAuthorizationCredentials));\n    }\n\n    return children;\n});\n","export class Events {\n    listeners = {};\n    muted = false;\n    on(event, callback) {\n        const callbackArray = this.listeners[event];\n        if (!callbackArray) {\n            this.listeners[event] = [callback];\n        }\n        else {\n            this.listeners[event] = [...callbackArray, callback];\n        }\n    }\n    off(event, callback) {\n        if (!this.listeners[event]) {\n            return;\n        }\n        if (!callback) {\n            delete this.listeners[event];\n            return;\n        }\n        const callbacks = this.listeners[event];\n        if (callbacks) {\n            for (let k = 0, l = callbacks.length; k < l; k++) {\n                if (callbacks[k] === callback) {\n                    callbacks.splice(k, 1);\n                    if (!callbacks.length) {\n                        delete this.listeners[event];\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    clearListeners() {\n        for (const key in this.listeners) {\n            if (Object.prototype.hasOwnProperty.call(this.listeners, key)) {\n                delete this.listeners[key];\n            }\n        }\n    }\n    trigger(event, ...args) {\n        if (this.muted) {\n            return;\n        }\n        /* eslint-disable-next-line */\n        args = [].slice.call(arguments, 1);\n        if (!this.listeners[event]) {\n            return;\n        }\n        const callbackArray = this.listeners[event];\n        if (callbackArray) {\n            for (let k = 0, l = callbackArray.length; k < l; k++) {\n                const callback = callbackArray[k];\n                if (callback) {\n                    callback(...args);\n                }\n            }\n        }\n    }\n    muteEvents() {\n        this.muted = true;\n    }\n    unmuteEvents() {\n        this.muted = false;\n    }\n}\n//# sourceMappingURL=Events.js.map","/**\n * Настройки библиотеки.\n * @exported ya.music.Audio.config\n * @namespace\n */\nexport const config = {\n    // =================================================================\n    //  Общие настройки\n    // =================================================================\n    /**\n     * Общие настройки.\n     * @namespace\n     */\n    audio: {\n        /**\n         * Количество попыток реинициализации.\n         * @type {Number}\n         */\n        retry: 3\n    },\n    // =================================================================\n    //  HTML5-плеер\n    // =================================================================\n    /**\n     * Описание настроек HTML5 плеера.\n     * @namespace\n     */\n    html5: {\n        /**\n         * Список идентификаторов для которых лучше не использовать html5 плеер. Используется при\n         * авто-определении типа плеера. Идентификаторы сравниваются со строкой построенной по шаблону\n         * `@<platform.version> <platform.os>:<browser.name>/<browser.version>`\n         *\n         * @type { Array.<String> }\n         */\n        blacklist: [':opera/12', '@NT 5', '@NT 4', ':msie/9']\n    }\n};\n//# sourceMappingURL=config.js.map","export class AudioError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'AudioError';\n    }\n}\nexport const AudioErrorStatic = {\n    /**\n     * Не найдена реализация плеера или возникла ошибка при инициализации всех доступных реализаций.\n     */\n    NO_IMPLEMENTATION: 'cannot find suitable implementation',\n    /**\n     * Аудиофайл не был предзагружен или во время загрузки произошла ошибка.\n     */\n    NOT_PRELOADED: 'track is not preloaded',\n    /**\n     * Действие недоступно из текущего состояния.\n     */\n    BAD_STATE: 'action is not permited from current state'\n};\n//# sourceMappingURL=audio-error.js.map","/**\n * @alias Audio\n * @ignore\n */\nexport const AudioStatic = {\n    /**\n     * Начало воспроизведения трека.\n     */\n    EVENT_PLAY: 'play',\n    /**\n     * Начало воспроизведения не через API.\n     */\n    EVENT_OUTER_PLAY: 'outerplay',\n    /**\n     * Остановка воспроизведения.\n     */\n    EVENT_STOP: 'stop',\n    /**\n     * Пауза воспроизведения\n     */\n    EVENT_PAUSE: 'pause',\n    /**\n     * Восстановление воспроизведения\n     */\n    EVENT_RESUME: 'resume',\n    /**\n     * Пауза воспроизведения не через API.\n     */\n    EVENT_OUTER_PAUSE: 'outerpause',\n    /**\n     * Обновление позиции воспроизведения.\n     */\n    EVENT_PROGRESS: 'progress',\n    /**\n     * Ручное выставление позиции воспроизведения.\n     */\n    EVENT_POSITION: 'position',\n    /**\n     * Началась загрузка трека.\n     */\n    EVENT_LOADING: 'loading',\n    /**\n     * Загрузка трека завершена.\n     */\n    EVENT_LOADED: 'loaded',\n    /**\n     * Изменение громкости.\n     */\n    EVENT_VOLUME: 'volumechange',\n    /**\n     * Изменение скорости.\n     */\n    EVENT_SPEED: 'ratechange',\n    /**\n     * Воспроизведение трека завершено.\n     */\n    EVENT_ENDED: 'ended',\n    /**\n     * Возникла ошибка при инициализации плеера.\n     */\n    EVENT_CRASHED: 'crashed',\n    /**\n     * Возникла ошибка при воспроизведении.\n     */\n    EVENT_ERROR: 'error',\n    /**\n     * Возникла ошибка при воспроизведении hls.\n     */\n    HLS_EVENT_ERROR: 'hlserror',\n    /**\n     * Уничтожение плеера.\n     */\n    EVENT_DESTROY: 'destroy',\n    /**\n     * Изменение статуса плеера.\n     */\n    EVENT_STATE: 'state',\n    /**\n     * Переключение между текущим и предзагруженным треком.\n     */\n    EVENT_SWAP: 'swap',\n    /**\n     * Событие предзагрузчика. Используется в качестве префикса.\n     */\n    PRELOADER_EVENT: 'preloader:',\n    /**\n     * Плеер находится в состоянии инициализации.\n     */\n    STATE_INIT: 'init',\n    /**\n     * Не удалось инициализировать плеер.\n     */\n    STATE_CRASHED: 'crashed',\n    /**\n     * Плеер готов и ожидает.\n     */\n    STATE_IDLE: 'idle',\n    /**\n     * Плеер проигрывает трек.\n     */\n    STATE_PLAYING: 'playing',\n    /**\n     * Плеер поставлен на паузу.\n     */\n    STATE_PAUSED: 'paused'\n};\n//# sourceMappingURL=audio-static.js.map","export const AudioHTML5LoaderStatic = {\n    /**\n     * Интервал обновления таймингов трека\n     */\n    updateInterval: 30,\n    /**\n     * Звук-заглушка (666 семплов стерео-тишины в mp3), необходимый для корректной инициализации\n     */\n    EMPTY_SOUND: 'data:audio/mp3;base64,//uQZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWGluZwAAAA8AAAADAAAC2QBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr///////////////////////////////////////////8AAAA8TEFNRTMuOThyBK8AAAAAAAAAADQgJAimTQABzAAAAtmIVtmVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//sQZAAO4AAAf4AAAAgAAA/wAAABAoQDLmAAACBYgGYMAAAE+oH///////0WKFRVzjKnAmjp+XX9qP//////p0USaKtMwpjZNhNFyEM61QAAOAP////////nfSpMQU1FMy45OC4yqqr/+xBEDI/wAAB/gAAACAxgGaMAAAEAAAH+AAAAIAAAP8AAAASqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7EGQoD/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq',\n    /**\n     * Нативное событие начала воспроизведения\n     */\n    EVENT_NATIVE_PLAY: 'play',\n    /**\n     * Нативное событие паузы\n     */\n    EVENT_NATIVE_PAUSE: 'pause',\n    /**\n     * Нативное событие обновление позиции воспроизведения\n     */\n    EVENT_NATIVE_TIMEUPDATE: 'timeupdate',\n    /**\n     * Нативное событие завершения трека\n     */\n    EVENT_NATIVE_ENDED: 'ended',\n    /**\n     * Нативное событие изменения длительности\n     */\n    EVENT_NATIVE_DURATION: 'durationchange',\n    /**\n     * Нативное событие изменения длительности загруженной части\n     */\n    EVENT_NATIVE_LOADING: 'progress',\n    /**\n     * Нативное событие доступности мета-данных трека\n     */\n    EVENT_NATIVE_META: 'loadedmetadata',\n    /**\n     * Нативное событие возможности начать воспроизведение\n     */\n    EVENT_NATIVE_CANPLAY: 'canplay',\n    /**\n     * Нативное событие ошибки\n     */\n    EVENT_NATIVE_ERROR: 'error',\n    /**\n     * Список событий плеера при которых можно ожидать загрузки\n     */\n    promiseLoadedEvents: ['progress'],\n    /**\n     * Список событий плеера при которых можно ожидать проигрывания нужно части\n     */\n    promisePlayingEvents: ['timeupdate'],\n    /**\n     * Список событий плеера при которых можно ожидать готовности метаданных\n     */\n    promiseMetadataEvents: ['loadedmetadata', 'canplay']\n};\n//# sourceMappingURL=audio-html5-loader-static.js.map","export class PlaybackError extends Error {\n    src;\n    constructor(message, src) {\n        super(message);\n        this.src = src;\n        this.name = 'PlaybackError';\n    }\n}\nexport const PlaybackErrorStatic = {\n    /**\n     * Отмена соединения.\n     */\n    CONNECTION_ABORTED: 'Connection aborted',\n    /**\n     * Сетевая ошибка.\n     */\n    NETWORK_ERROR: 'Network error',\n    /**\n     * Ошибка декодирования аудио.\n     */\n    DECODE_ERROR: 'Decode error',\n    /**\n     * Недоступный источник.\n     */\n    BAD_DATA: 'Bad data',\n    /**\n     * Не запускается воспроизведение.\n     */\n    DONT_START: 'Playback start error'\n};\n/**\n * Таблица соответствия кодов ошибок HTML5-плеера.\n */\nexport const html5PlayerErrorCodes = {\n    '1': PlaybackErrorStatic.CONNECTION_ABORTED,\n    '2': PlaybackErrorStatic.NETWORK_ERROR,\n    '3': PlaybackErrorStatic.DECODE_ERROR,\n    '4': PlaybackErrorStatic.BAD_DATA\n};\n//# sourceMappingURL=playback-error.js.map","export class BrowserDetect {\n    /**\n     * Получение данных о возможности менять громкость\n     * @returns {boolean}\n     * @private\n     */\n    isOnlyDeviceVolume() {\n        let noVolume = true;\n        try {\n            const audio = document.createElement('audio');\n            audio.volume = 0.63;\n            noVolume = Math.abs(audio.volume - 0.63) > 0.01;\n        }\n        catch (e) {\n            noVolume = true;\n        }\n        return noVolume;\n    }\n    parseParams(url) {\n        const search = url.split('?')[1];\n        if (!search || !search.length) {\n            return {};\n        }\n        return search.split('&').reduce(function (result, part) {\n            const parts = part.split('=');\n            const key = parts[0];\n            const value = parts[1];\n            if (key && value) {\n                result[key] = value;\n            }\n            return result;\n        }, {});\n    }\n    updateUrl(url, params) {\n        const paramsInUrl = this.parseParams(url);\n        let search = '';\n        Object.assign(paramsInUrl, params);\n        for (const key in paramsInUrl) {\n            if (Object.prototype.hasOwnProperty.call(paramsInUrl, key)) {\n                search += `${key}=${paramsInUrl[key]}`;\n            }\n        }\n        return url + (search ? `?${search}` : '');\n    }\n    getCookie(name) {\n        const map = document.cookie\n            .split(';')\n            .reduce((prev, curr) => {\n            let result;\n            const [key, value] = curr.trim().split('=');\n            if (key && value) {\n                result = {\n                    ...prev,\n                    [key]: value\n                };\n            }\n            else {\n                result = prev;\n            }\n            return result;\n        }, {});\n        const cookie = map[name];\n        if (cookie) {\n            return cookie;\n            /* eslint-disable-next-line no-else-return*/\n        }\n        else {\n            return '';\n        }\n    }\n}\n//# sourceMappingURL=BrowserDetect.js.map","/*\n    Игнорим правило import/no-named-as-default-member, потому что если импортить как import * as Hls, то\n    некстовое приложение ругается на отсутствие экспортов.\n\n    Пример:\n        Attempted import error: 'Events' is not exported from 'hls.js' (imported as 'Hls').\n*/\nimport Hls from 'hls.js';\nimport { AudioHTML5LoaderStatic } from './audio-html5-loader-static.js';\nimport { AudioStatic } from '../audio-player/audio-static.js';\nimport { Events } from '../events/index.js';\nimport { PlaybackError, PlaybackErrorStatic, html5PlayerErrorCodes } from '../error/playback-error.js';\nimport { BrowserDetect } from '../browser/index.js';\nlet loaderId = 1;\nexport class AudioHTML5Loader {\n    browser = new BrowserDetect();\n    emitter = new Events();\n    /**\n     * Ссылка на трек\n     */\n    src = '';\n    /**\n     * Назначенная позиция воспроизведения\n     * @private\n     */\n    position = 0;\n    /**\n     * Последнее ненулевое значение текущей позиции\n     * @private\n     */\n    lastGoodTime = 0;\n    /**\n     * Время последнего обновления данных\n     * @private\n     */\n    lastUpdate = 0;\n    /**\n     * Флаг начала загрузки\n     * @private\n     */\n    notLoading = true;\n    /**\n     * Выход для Web Audio API\n     * @private\n     */\n    output = null;\n    shouldUseHlsPlayer;\n    skipEmptySound;\n    audio = null;\n    shouldPause = false;\n    shouldPlay = false;\n    playing = false;\n    ended = false;\n    // TODO кажется флаг вовсе не нужен, подумать как избавиться\n    promiseMode = false;\n    isHlsTrack = false;\n    /**\n     * Контейнер для различных ожиданий событий\n     * TODO придумать как отказаться от PromisifiedState интерфейса и cancelWait() метода\n     * @private\n     */\n    promises = {};\n    audioContext = null;\n    loaderTimer = null;\n    promiseCheckTO = null;\n    retry = 0;\n    // TODO булщит который нужно убрать\n    clearInitListener = null;\n    // TODO булщит который нужно убрать\n    clearNativePauseListener = null;\n    hls = null;\n    /**\n     * До окончания инициализации плеер считается неспособным начать автовоспроизведение\n     */\n    isAutoplayable = false;\n    name = loaderId++;\n    whenReady;\n    constructor(shouldUseHlsPlayer, skipEmptySound) {\n        this.shouldUseHlsPlayer = shouldUseHlsPlayer;\n        this.skipEmptySound = skipEmptySound;\n        if (skipEmptySound) {\n            this.src = AudioHTML5LoaderStatic.EMPTY_SOUND;\n        }\n        this.startupAudio = this.startupAudio.bind(this);\n        this.updateProgress = this.updateProgress.bind(this);\n        this.onNativeLoading = this.onNativeLoading.bind(this);\n        this.onNativeEnded = this.onNativeEnded.bind(this);\n        this.onNativeError = this.onNativeError.bind(this);\n        this.onNativePause = this.onNativePause.bind(this);\n        this.onNativePlay = this.onNativePlay.bind(this);\n        this.whenReady = this.init();\n    }\n    on(event, callback) {\n        this.emitter.on(event, callback);\n    }\n    off(event, callback) {\n        this.emitter.off(event, callback);\n    }\n    trigger(event, ...args) {\n        this.emitter.trigger(event, ...args);\n    }\n    muteEvents() {\n        this.emitter.muteEvents();\n    }\n    unmuteEvents() {\n        this.emitter.unmuteEvents();\n    }\n    // =================================================================\n    //  Обработчики событий\n    // =================================================================\n    /**\n     * Обработчик обновления таймингов трека\n     * @private\n     */\n    updateProgress() {\n        const currentTime = Number(new Date());\n        if (currentTime - this.lastUpdate < AudioHTML5LoaderStatic.updateInterval) {\n            return;\n        }\n        if (this.audio && this.audio.currentTime) {\n            this.lastGoodTime = this.audio.currentTime;\n        }\n        this.lastUpdate = currentTime;\n        this.trigger(AudioStatic.EVENT_PROGRESS);\n    }\n    /**\n     * Обработчик событий загрузки трека\n     * @private\n     */\n    onNativeLoading() {\n        this.updateProgress();\n        if (this.audio && this.audio.buffered.length) {\n            const loaded = this.audio.buffered.end(0) - this.audio.buffered.start(0);\n            if (this.notLoading && loaded) {\n                this.notLoading = false;\n                this.trigger(AudioStatic.EVENT_LOADING);\n            }\n            if (loaded >= this.audio.duration - 0.1) {\n                this.trigger(AudioStatic.EVENT_LOADED);\n            }\n        }\n    }\n    /**\n     * Обработчик события окончания трека\n     * @private\n     */\n    onNativeEnded() {\n        this.trigger(AudioStatic.EVENT_PROGRESS);\n        this.ended = true;\n        this.playing = false;\n        this.shouldPause = true;\n        if (this.audio) {\n            this.audio.pause();\n        }\n        this.trigger(AudioStatic.EVENT_ENDED);\n    }\n    /**\n     * Обработчик ошибок воспроизведения\n     * @param {Event} e - Событие ошибки\n     * @private\n     */\n    onNativeError(e) {\n        if (!this.src || this.src === AudioHTML5LoaderStatic.EMPTY_SOUND) {\n            return;\n        }\n        if (this.audio && this.audio.error && this.audio.error.code === 2) {\n            console.warn('Network error. Restarting...', this.src);\n            // loggerWarn(this, 'Network error. Restarting...', logger._showUrl(this.src));\n            this.position = this.lastGoodTime;\n            this.restart(`audioError code:${this.audio.error.code}`);\n            return;\n        }\n        let error;\n        if (this.audio && this.audio.error) {\n            const errorMsg = html5PlayerErrorCodes[String(this.audio.error.code)];\n            error = new PlaybackError(errorMsg ? errorMsg : 'onNativeError', this.src);\n        }\n        else {\n            error = new PlaybackError(e instanceof Error ? e.message : 'onNativeError', this.src);\n        }\n        this.playing = false;\n        this.trigger(AudioStatic.EVENT_ERROR, error);\n    }\n    /**\n     * Обработчик события паузы\n     * @private\n     */\n    onNativePause() {\n        // Внезапное событие паузы, когда его никто не звал — то есть со стороны\n        // Перед событием окончания вызывается событие паузы, в этом случае игнорируем\n        if (this.audio && !this.shouldPause && this.audio.currentTime !== this.audio.duration) {\n            this.trigger(AudioStatic.EVENT_OUTER_PAUSE);\n            return;\n        }\n        /**\n         * Не эмитим событие наверх, если onNativePause сработал в результате того, что в\n         * audio закончилось воспроизведение аудио-дорожки\n         */\n        if (this.audio && !this.audio.ended) {\n            this.trigger(AudioStatic.EVENT_PAUSE);\n        }\n        this.shouldPause = false;\n    }\n    /**\n     * Обработчик события старта\n     * @private\n     */\n    onNativePlay() {\n        // Внезапное событие старта, когда его никто не звал — то есть со стороны\n        // Останавливаем и тригаем на себе событие, выше по уровню товарищи разберутся\n        if (!this.shouldPlay) {\n            this.shouldPause = true;\n            this.pause();\n            this.trigger(AudioStatic.EVENT_OUTER_PLAY);\n            return;\n        }\n        this.trigger(AudioStatic.EVENT_PLAY);\n        this.shouldPlay = false;\n    }\n    // =================================================================\n    //  Инициализация и деинициализация Audio\n    // =================================================================\n    /**\n     * Инициализация слушателей пользовательских событий для инициализации плеера\n     * @private\n     */\n    initUserEvents() {\n        document.body.addEventListener('mousedown', this.startupAudio, true);\n        document.body.addEventListener('keydown', this.startupAudio, true);\n        document.body.addEventListener('touchstart', this.startupAudio, true);\n    }\n    /**\n     * Деинициализация слушателей пользовательских событий для инициализации плеера\n     * @private\n     */\n    deinitUserEvents() {\n        document.body.removeEventListener('mousedown', this.startupAudio, true);\n        document.body.removeEventListener('keydown', this.startupAudio, true);\n        document.body.removeEventListener('touchstart', this.startupAudio, true);\n    }\n    /**\n     * Инициализация слушателей нативных событий audio-элемента\n     * @private\n     */\n    initNativeEvents() {\n        if (this.audio) {\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PAUSE, this.onNativePause);\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PLAY, this.onNativePlay);\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_ENDED, this.onNativeEnded);\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_TIMEUPDATE, this.updateProgress);\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_DURATION, this.updateProgress);\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_LOADING, this.onNativeLoading);\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_ERROR, this.onNativeError);\n        }\n    }\n    /**\n     * Инициализация слушателей hls событий\n     * @private\n     */\n    initHlsEvents() {\n        if (this.hls) {\n            this.hls.on(Hls.Events.ERROR, (event, data) => {\n                if (this.hls) {\n                    this.hls.destroy();\n                }\n                this.playing = false;\n                this.trigger(AudioStatic.HLS_EVENT_ERROR, data);\n            });\n        }\n    }\n    /**\n     * Деинициализация слушателей нативных событий audio-элемента\n     * @private\n     */\n    deinitNativeEvents() {\n        if (this.audio) {\n            this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PAUSE, this.onNativePause);\n            this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PLAY, this.onNativePlay);\n            this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_ENDED, this.onNativeEnded);\n            this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_TIMEUPDATE, this.updateProgress);\n            this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_DURATION, this.updateProgress);\n            this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_LOADING, this.onNativeLoading);\n            this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_ERROR, this.onNativeError);\n        }\n    }\n    /**\n     * Создание объекта Audio и назначение обработчиков событий\n     * @private\n     */\n    init() {\n        return new Promise((resolve, reject) => {\n            this.muteEvents();\n            if (this.shouldUseHlsPlayer) {\n                if (this.hls) {\n                    resolve();\n                }\n                else {\n                    this.initHls().then(resolve).catch(reject);\n                }\n            }\n            else {\n                this.initAudioElement();\n                this.initEvents().then(resolve).catch(reject);\n            }\n        });\n    }\n    initHls() {\n        return new Promise((resolve, reject) => {\n            this.initAudioElement();\n            this.initEvents()\n                .then(() => {\n                const params = {\n                    liveDurationInfinity: true,\n                    maxBufferSize: 3 * 1000 * 1000\n                };\n                this.hls = new Hls.default(params);\n                if (this.audio) {\n                    this.hls.attachMedia(this.audio);\n                }\n                this.hls.on(Hls.Events.MEDIA_ATTACHED, resolve);\n                this.hls.on(Hls.Events.ERROR, (event, data) => {\n                    if (data.fatal && this.hls) {\n                        switch (data.type) {\n                            case Hls.ErrorTypes.NETWORK_ERROR:\n                                // try to recover network error\n                                this.hls.startLoad();\n                                break;\n                            case Hls.ErrorTypes.MEDIA_ERROR:\n                                this.hls.recoverMediaError();\n                                // hls.swapAudioCodec(); // if the next error appeared quickly\n                                break;\n                            default:\n                                // cannot recover\n                                this.hls.destroy();\n                                this.trigger(AudioStatic.EVENT_DESTROY);\n                                break;\n                        }\n                    }\n                });\n                this.hls.on(Hls.Events.DESTROYING, () => {\n                    this.hls = null;\n                });\n                const INIT_HLS_TIMEOUT = 3000;\n                setTimeout(() => {\n                    reject(new Error('Time for the init HLS is over'));\n                }, INIT_HLS_TIMEOUT);\n            })\n                .catch(reject);\n        });\n    }\n    initEvents() {\n        return new Promise((resolve, reject) => {\n            this.initUserEvents();\n            this.initNativeEvents();\n            this.initAndCheckAutoplay().then(resolve).catch(reject);\n        });\n    }\n    initAudioElement() {\n        this.audio = document.createElement('audio');\n        this.audio.loop = false; // caution: for IE\n        this.audio.preload = 'auto';\n        // this.audio.autobuffer = 'auto';\n        this.audio.autoplay = false;\n        if (!this.skipEmptySound) {\n            this.audio.src = AudioHTML5LoaderStatic.EMPTY_SOUND;\n        }\n    }\n    /**\n     * Инициализация объекта Audio. Для начала воспроизведение требуется любое пользовательское действие.\n     *\n     * Совершенно эзотеричный и магический метод. Для инициализации плеера требуется вызывать метод play в обработчике\n     * пользовательского события. После этого требуется поставить плеер обратно на паузу, т.к. некоторые браузеры\n     * в противном случае начинают проигрывать трек автоматически как только он загружается. При этом в некоторых браузерах\n     * после вызова метода load событие play никогда не наступает, так что приходится слушать события получения метаданных\n     * или ошибки загрузки (если src не указан). В некоторых браузерах также может не наступить событие pause. При этом\n     * стоит ещё учитывать, что трек может грузиться из кеша, тогда события получения мета-данных и возможности\n     * воспроизведения могут возникнуть быстрее события play или pause, так что нужно предусматривать прерывание процесса\n     * инициализации.\n     * @private\n     */\n    startupAudio() {\n        // MUSIC-18549\n        if (this.audioContext) {\n            this.audioContext.resume();\n        }\n        this.deinitUserEvents();\n        const success = () => {\n            this.shouldPlay = false;\n            this.unmuteEvents();\n            this.isAutoplayable = true;\n        };\n        const fail = (error) => {\n            this.shouldPlay = false;\n            this.unmuteEvents();\n            console.info(`_startupAudio:failReason:${error ? error : ''}`);\n        };\n        // INFO: после инициализационного вызова play нужно дождаться события и вызвать pause.\n        const initListener = () => {\n            if (this.audio) {\n                this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PLAY, initListener);\n                this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_CANPLAY, initListener);\n                this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_META, initListener);\n                this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_ERROR, initListener);\n            }\n            if (this.promiseMode) {\n                return;\n            }\n            // INFO: после вызова pause нужно дождаться события, завершить инициализацию и разрешить передачу событий\n            const nativePauseListener = () => {\n                if (this.audio) {\n                    this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PAUSE, nativePauseListener);\n                }\n                success();\n            };\n            this.clearNativePauseListener = () => {\n                if (this.audio) {\n                    this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PAUSE, nativePauseListener);\n                }\n            };\n            if (this.audio) {\n                this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PAUSE, nativePauseListener);\n                this.audio.pause();\n                this.shouldPause = true;\n            }\n        };\n        this.clearInitListener = () => {\n            if (this.audio) {\n                this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PLAY, initListener);\n                this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_CANPLAY, initListener);\n                this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_META, initListener);\n                this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_ERROR, initListener);\n            }\n        };\n        if (this.audio) {\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PLAY, initListener);\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_CANPLAY, initListener);\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_META, initListener);\n            this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_ERROR, initListener);\n            // INFO: перед использованием объект Audio требуется инициализировать, в обработчике пользовательского события\n            this.audio.load();\n            this.shouldPlay = true;\n            this.promiseMode = true;\n            // TODO из-за этого места, событие старта трека стреляет 3 раза вместо 1, не уверен что это место вообще нужно\n            this.audio\n                .play()\n                .then(() => {\n                success();\n                this.shouldPause = true;\n                this.shouldPlay = false;\n                if (this.audio) {\n                    this.audio.pause();\n                }\n            })\n                .catch(() => {\n                this.shouldPause = true;\n                this.shouldPlay = false;\n                fail('audio.play');\n            });\n        }\n    }\n    /**\n     * До того, как произойдет полная инициализация всех возможностей в методе _startupAudio,\n     * непосредственно в момент инициализации плеера делается попытка проиграть пустой звук.\n     * Например, Firefox с настройкой media.autoplay.enabled=false будет делать вид,\n     * что ничего не понимает и не может проиграть файл, ему мы поставим isAutoplayable = false.\n     * @private\n     *\n     *\n     * TODO метод явно требует рефакторинга\n     */\n    initAndCheckAutoplay() {\n        return new Promise((resolve) => {\n            if (this.skipEmptySound) {\n                this.isAutoplayable = true;\n                resolve();\n            }\n            const success = () => {\n                this.shouldPlay = false;\n                this.isAutoplayable = true;\n                resolve();\n            };\n            const fail = (error) => {\n                this.shouldPlay = false;\n                this.isAutoplayable = false;\n                console.info(this, `initAndCheckAutoplay:failReason:${error ? error : ''}`);\n                resolve();\n            };\n            const autoplayListener = (e) => {\n                if (this.audio) {\n                    this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PLAY, autoplayListener);\n                    this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_CANPLAY, autoplayListener);\n                    this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_META, autoplayListener);\n                    this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_ERROR, autoplayListener);\n                }\n                if (this.promiseMode) {\n                    return;\n                }\n                // Если при попытке проиграть пустой звук первой пришла\n                // ошибка (как в FF), или событие loaded_metadata (как в мобилах),\n                // то плеер не умеет играть без действия пользователя a.k.a. autoplay\n                // Ставим галочку и резолвим инициализацию\n                if (e.type === AudioHTML5LoaderStatic.EVENT_NATIVE_ERROR ||\n                    e.type === AudioHTML5LoaderStatic.EVENT_NATIVE_META) {\n                    fail(e.type);\n                    return;\n                }\n                // Ну а если нет ошибки, доведем начатое до конца и поставим пустой звук на паузу\n                // и зарезолвим инициализацию чуть позже\n                const nativePauseListener = (event) => {\n                    // Но еще раз проверим на предмет ошибок\n                    if (event.type === AudioHTML5LoaderStatic.EVENT_NATIVE_ERROR) {\n                        fail(event.type);\n                        return;\n                    }\n                    if (this.audio) {\n                        this.audio.removeEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PAUSE, nativePauseListener);\n                    }\n                    success();\n                };\n                if (this.audio) {\n                    this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PAUSE, nativePauseListener);\n                    this.audio.pause();\n                }\n                this.shouldPause = true;\n            };\n            if (this.audio) {\n                this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_PLAY, autoplayListener);\n                this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_CANPLAY, autoplayListener);\n                this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_META, autoplayListener);\n                this.audio.addEventListener(AudioHTML5LoaderStatic.EVENT_NATIVE_ERROR, autoplayListener);\n                // Попробуем поиграть пустой файл\n                this.audio.src = AudioHTML5LoaderStatic.EMPTY_SOUND;\n                this.audio.load();\n                this.shouldPlay = true;\n                this.promiseMode = true;\n                this.audio\n                    .play()\n                    .then(() => {\n                    success();\n                    this.shouldPause = true;\n                    this.shouldPlay = false;\n                    if (this.audio) {\n                        this.audio.pause();\n                    }\n                })\n                    .catch(() => {\n                    this.shouldPause = true;\n                    this.shouldPlay = false;\n                    fail('audio.play');\n                });\n            }\n        });\n    }\n    /**\n     * Если метод _startPlay вызван раньше, чем закончилась инициализация, нужно отменить текущий шаг инициализации.\n     * @private\n     */\n    breakStartup(reason) {\n        this.deinitUserEvents();\n        this.unmuteEvents();\n        if (this.clearInitListener) {\n            this.clearInitListener();\n        }\n        if (this.clearNativePauseListener) {\n            this.clearNativePauseListener();\n        }\n        console.warn('_startupAudio:interrupted', reason);\n    }\n    // =================================================================\n    //  Методы ожидания различных событий и генерации обещаний\n    // =================================================================\n    /**\n     * Дождаться определённого состояния плеера\n     * Определенное состояние плеера наступает, когда произойдет один из эвентов в listen\n     * @param {String} name - имя состояния\n     * @param {Function} check - метод проверки, что мы находимся в нужном состоянии\n     * @param {Array.<String>} listen - список событий, при которых может смениться состояние\n     * @returns {Promise}\n     * @private\n     */\n    waitFor(name, check, listen) {\n        const waitPromise = this.promises[name];\n        let result;\n        if (waitPromise) {\n            result = waitPromise.promise();\n        }\n        else {\n            let cancelPromise = () => { };\n            const promises = [\n                /* eslint-disable-next-line */\n                new Promise((_, reject) => {\n                    cancelPromise = reject;\n                })\n            ];\n            const listeners = {};\n            // создаем промис который зарезолвится, когда эвент случится\n            const waitEventPromise = (event) => {\n                return new Promise((resolve) => {\n                    // обработчик эвента, который резолвит промис, если прошел чек\n                    const listener = () => {\n                        if (check()) {\n                            resolve();\n                        }\n                    };\n                    if (this.audio) {\n                        // добавляем обработчик\n                        this.audio.addEventListener(event, listener);\n                        // сохраняем обработчик конкретного эвента, чтобы потом была возможность отписаться\n                        listeners[event] = listener;\n                    }\n                });\n            };\n            const clearListeners = () => {\n                for (const event of Object.keys(listeners)) {\n                    if (this.audio) {\n                        const listener = listeners[event];\n                        if (listener) {\n                            this.audio.removeEventListener(event, listener);\n                        }\n                    }\n                }\n            };\n            for (const event of listen) {\n                promises.push(waitEventPromise(event));\n            }\n            // ждем первый зарезолвившийся промис из любого обработчика событий, если это произошло, значит плеер перешел в ожидаемое состояние\n            const racePromise = Promise.race(promises);\n            // после резолва нужно отписаться от всех уже не нужных обработчиков\n            racePromise.then(clearListeners).catch(clearListeners);\n            this.promises[name] = {\n                promise: () => racePromise,\n                reject: cancelPromise\n            };\n            result = racePromise;\n        }\n        return result;\n    }\n    /**\n     * Отмена ожидания состояния\n     * @param {String} name - имя состояния\n     * @param {String} reason - причина отмены ожидания\n     * @todo reason сделать наследником класса Error\n     * @private\n     */\n    cancelWait(name, reason) {\n        let promise;\n        if ((promise = this.promises[name])) {\n            delete this.promises[name];\n            promise.reject(reason);\n        }\n    }\n    /**\n     * Отмена всех ожиданий\n     * @param {String} reason - причина отмены ожидания\n     * @private\n     */\n    abortPromises(reason) {\n        for (const key in this.promises) {\n            if (Object.prototype.hasOwnProperty.call(this.promises, key)) {\n                this.cancelWait(key, reason);\n            }\n        }\n    }\n    // =================================================================\n    //  Ожидание получения метаданных трека\n    // =================================================================\n    /**\n     * Проверка получения метаданных\n     * @returns {Boolean}\n     * @private\n     */\n    promiseMetadataCheck() {\n        return this.audio ? this.audio.readyState > this.audio.HAVE_METADATA : false;\n    }\n    /**\n     * Ожидание получения метаданных\n     * @returns {Promise}\n     * @private\n     */\n    promiseMetadata() {\n        return this.waitFor('metadata', () => this.promiseMetadataCheck(), AudioHTML5LoaderStatic.promiseMetadataEvents);\n    }\n    // =================================================================\n    //  Ожидание загрузки нужной части трека\n    // =================================================================\n    /**\n     * Проверка, что загружена нужная часть трека\n     * @returns {Boolean}\n     * @private\n     */\n    promiseLoadedCheck() {\n        if (this.loaderTimer) {\n            clearTimeout(this.loaderTimer);\n        }\n        else {\n            this.loaderTimer = setTimeout(() => {\n                this.cancelWait('loaded', 'timeout');\n            }, 5000);\n        }\n        if (this.audio) {\n            // INFO: позицию нужно брать с большим запасом, т.к. данные записаны блоками и нам нужно дождаться загрузки блока\n            const loaded = Math.min(this.position + 45, this.audio.duration);\n            const diff = this.audio.buffered.end(0) - this.audio.buffered.start(0);\n            return this.audio.buffered.length !== 0 && diff >= loaded;\n        }\n        return false;\n    }\n    /**\n     * Ожидание загрузки нужной части трека\n     * @returns {Promise}\n     * @private\n     */\n    promiseLoaded() {\n        const promise = this.waitFor('loaded', () => this.promiseLoadedCheck(), AudioHTML5LoaderStatic.promiseLoadedEvents);\n        const promiseHandler = () => {\n            if (this.loaderTimer) {\n                clearTimeout(this.loaderTimer);\n            }\n        };\n        promise.then(promiseHandler).catch(promiseHandler);\n        return promise;\n    }\n    // =================================================================\n    //  Ожидание проигрывания нужной части трека\n    // =================================================================\n    /**\n     * Проверка, что проигрывается нужная часть трека\n     * @returns {Boolean}\n     * @private\n     */\n    promisePlayingCheck() {\n        if (this.audio) {\n            const time = Math.min(this.position + 0.2, this.audio.duration);\n            if (this.promiseCheckTO) {\n                clearTimeout(this.promiseCheckTO);\n            }\n            if (this.audio.currentTime === 0 && !this.audio.paused) {\n                // Сдернем-ка Хром с мертвой точки, если за секунду не проснется\n                // Звук немножко щелкнет, но не будет эффекта \"начала заново\"\n                this.promiseCheckTO = setTimeout(() => {\n                    if (this.audio && this.audio.currentTime === 0 && !this.audio.paused) {\n                        this.audio.currentTime = 1;\n                    }\n                }, 1000);\n            }\n            return this.audio.currentTime >= time;\n        }\n        return false;\n    }\n    /**\n     * Ожидание проигрывания нужной части трека\n     * @returns {Promise}\n     * @private\n     */\n    promisePlaying() {\n        return this.waitFor('playing', () => this.promisePlayingCheck(), AudioHTML5LoaderStatic.promisePlayingEvents);\n    }\n    // =================================================================\n    //  Ожидание начала воспроизведения\n    // =================================================================\n    /**\n     * Ожидание начала воспроиведения, перезапуск трека, если воспроизведение не началось\n     * @returns {Promise}\n     * @private\n     */\n    promiseStartPlaying() {\n        let ready = false;\n        let result;\n        if (this.promises.startPlaying) {\n            result = this.promises.startPlaying.promise();\n        }\n        else {\n            let cancelPromise = () => { };\n            let timer;\n            const promise = new Promise((resolve, reject) => {\n                this.promisePlaying()\n                    .then(() => {\n                    ready = true;\n                    clearTimeout(timer);\n                    resolve();\n                })\n                    .catch((reason) => {\n                    ready = true;\n                    clearTimeout(timer);\n                    this.cancelWait('startPlaying', reason);\n                });\n                this.promiseLoaded()\n                    .then(() => {\n                    if (ready) {\n                        return;\n                    }\n                    timer = setTimeout(() => {\n                        reject('timeout');\n                        this.cancelWait('playing', 'timeout');\n                        console.warn('startPlaying:failed');\n                    }, 5000);\n                })\n                    .catch((reason) => {\n                    ready = true;\n                    clearTimeout(timer);\n                    this.cancelWait('startPlaying', reason);\n                });\n                cancelPromise = reject;\n            });\n            this.promises.startPlaying = {\n                promise: () => promise,\n                reject: cancelPromise\n            };\n            result = this.promises.startPlaying.promise();\n        }\n        return result;\n    }\n    // =================================================================\n    //  Управление элементом Audio\n    // =================================================================\n    /**\n     * Начать загрузку трека\n     * @param {String} src\n     */\n    load(src) {\n        this.abortPromises('load');\n        this.breakStartup('load');\n        this.ended = false;\n        this.playing = false;\n        this.notLoading = true;\n        this.position = 0;\n        this.lastGoodTime = 0;\n        this.src = src;\n        if (/\\.m3u8$/.test(src) && this.hls && this.audio) {\n            this.isHlsTrack = true;\n            // генерим уникальный хеш для логов статистики strm-куба, нолик, чтобы добрать длину\n            //TODO: проверить как вообще его правильно формировать\n            const vsid = `${this.browser.getCookie('device_id')}0${Date.now().toString(16)}${Date.now().toString(16)}`;\n            const url = this.browser.updateUrl(src, { vsid });\n            this.hls.destroy();\n            const params = {\n                liveDurationInfinity: true,\n                maxBufferSize: 3 * 1000 * 1000\n            };\n            this.hls = new Hls.default(params);\n            this.initHlsEvents();\n            this.hls.loadSource(url);\n            this.hls.attachMedia(this.audio);\n            this.audio.load();\n        }\n        else if (this.audio) {\n            this.isHlsTrack = false;\n            this.audio.src = src;\n            this.audio.load();\n        }\n    }\n    /** Остановить воспроизведение и загрузку трека */\n    stop() {\n        this.abortPromises('stop');\n        this.breakStartup('stop');\n        this.load('');\n        if (this.isHlsTrack && this.hls) {\n            this.hls.stopLoad();\n        }\n    }\n    /**\n     * Начать воспроизведение трека\n     * @private\n     */\n    startPlay() {\n        if (this.audio) {\n            this.audio.currentTime = this.position;\n        }\n        if (!this.playing) {\n            return;\n        }\n        this.breakStartup('startPlay');\n        this.shouldPlay = true;\n        if (this.audio) {\n            this.audio.play().catch((error) => {\n                console.error(error);\n            });\n        }\n        if (this.hls) {\n            this.hls.startLoad();\n        }\n        this.promiseStartPlaying()\n            .then(() => {\n            this.retry = 0;\n        })\n            .catch(() => this.restart(''));\n    }\n    /**\n     * Перезапустить воспроизведение трека\n     * @param {String} [reason] - если причина вызова указана и не равна \"timeout\" ничего не происходит\n     * @private\n     */\n    restart(reason) {\n        if (!this.src || this.src === AudioHTML5LoaderStatic.EMPTY_SOUND || (reason && reason !== 'timeout')) {\n            return;\n        }\n        this.retry++;\n        if (this.retry > 5) {\n            this.playing = false;\n            this.trigger(AudioStatic.EVENT_ERROR, new PlaybackError(PlaybackErrorStatic.DONT_START, this.src));\n            return;\n        }\n        // INFO: Запоминаем текущее состояние, т.к. оно сбросится после перезагрузки\n        const position = this.position;\n        const playing = this.playing;\n        this.load(this.src);\n        if (playing) {\n            this.loadMetadata(position);\n        }\n        else {\n            this.setPosition(position);\n        }\n    }\n    /**\n     * Воспроизведение трека/отмена паузы\n     * @param {Number} [position] - позиция воспроизведения\n     */\n    play(position) {\n        this.retry = 0;\n        this.loadMetadata(position);\n    }\n    /**\n     * Воспроизведение трека/отмена паузы - внутренний метод\n     * @param {Number} [position] - позиция воспроизведения\n     * @private\n     */\n    loadMetadata(position) {\n        if (this.playing) {\n            return;\n        }\n        this.breakStartup('play');\n        this.ended = false;\n        this.playing = true;\n        if (position !== undefined && position !== null) {\n            this.position = position;\n        }\n        this.promiseMetadata()\n            .then(() => this.startPlay())\n            .catch((error) => {\n            console.error(error);\n        });\n    }\n    /** Пауза */\n    pause() {\n        this.shouldPause = true;\n        this.playing = false;\n        this.cancelWait('startPlaying', 'pause');\n        this.breakStartup('pause');\n        if (this.isHlsTrack && this.hls) {\n            this.hls.stopLoad();\n        }\n        if (this.audio) {\n            this.audio.pause();\n            this.position = this.audio.currentTime;\n        }\n    }\n    /**\n     * Установить позицию воспроизведения\n     * @param {Number} position - позиция воспроизведения\n     */\n    setPosition(position) {\n        if (!isFinite(position)) {\n            console.warn('setPositionFailed', position);\n            return;\n        }\n        this.position = position;\n        this.promiseMetadata().then(() => {\n            if (this.audio) {\n                this.audio.currentTime = this.position;\n            }\n        });\n    }\n    // =================================================================\n    //  Подключение/отключение источника для Web Audio API\n    // =================================================================\n    /**\n     * Включить режим crossDomain для HTML5 плеера\n     * @param {Boolean} state - включить/выключить\n     */\n    toggleCrossDomain(state) {\n        if (state && this.audio) {\n            this.audio.crossOrigin = 'anonymous';\n        }\n        else if (this.audio) {\n            this.audio.removeAttribute('crossOrigin');\n        }\n        this.restart('toggleCrossDomain');\n    }\n    /**\n     * Создать источник для Web Audio API\n     * !!!Внимание!!! - при использовании Web Audio API в браузере стоит учитывать, что все треки должны либо загружаться\n     * с того же домена, либо для них должны быть правильно выставлены заголовки CORS.\n     * При вызове данного метода трек будет перезапущен\n     * @param {AudioContext} audioContext - контекст Web Audio API\n     */\n    createSource(audioContext) {\n        // MUSIC-18549\n        this.audioContext = audioContext;\n        if (this.output) {\n            return;\n        }\n        let needRestart = false;\n        if (this.audio) {\n            needRestart = !this.audio.crossOrigin;\n            this.audio.crossOrigin = 'anonymous';\n            this.output = audioContext.createMediaElementSource(this.audio);\n            this.output.connect(audioContext.destination);\n        }\n        if (needRestart) {\n            this.restart('crossOrigin');\n        }\n    }\n    // =================================================================\n    //  Удаление всех обработчиков и объекта Audio\n    // =================================================================\n    /** Удаление всех обработчиков и объекта Audio. После вызова данного метода этот объект будет нельзя использовать */\n    destroy() {\n        if (this.audio) {\n            this.shouldPause = true;\n            this.audio.pause();\n            // this._catchPromise(audio.pause());\n            this.deinitNativeEvents();\n        }\n        if (this.output) {\n            this.output.disconnect();\n            this.output = null;\n        }\n        this.abortPromises('destroy');\n        this.muteEvents();\n        this.deinitUserEvents();\n        this.promises = {};\n        this.audio = null;\n    }\n    get currentTime() {\n        return this.audio ? this.audio.currentTime : null;\n    }\n    get duration() {\n        return this.audio ? this.audio.duration : null;\n    }\n    get loaded() {\n        let result;\n        if (this.audio && this.audio.buffered.length) {\n            const index = this.audio.buffered.length - 1;\n            result = this.audio.buffered.end(index);\n        }\n        else {\n            result = null;\n        }\n        return result;\n    }\n    get volumeLevel() {\n        return this.audio ? this.audio.volume : 0;\n    }\n    set volumeLevel(volume) {\n        if (this.audio) {\n            this.audio.volume = volume;\n        }\n    }\n    get outputAudioNode() {\n        return this.output;\n    }\n    set defaultPlaybackRate(value) {\n        if (this.audio) {\n            this.audio.defaultPlaybackRate = value;\n        }\n    }\n    set playbackRate(value) {\n        if (this.audio) {\n            this.audio.playbackRate = value;\n        }\n    }\n    get audioSrc() {\n        return this.src;\n    }\n    get audioNotLoading() {\n        return this.notLoading;\n    }\n    get autoplayable() {\n        return this.isAutoplayable;\n    }\n}\n//# sourceMappingURL=audio-html5-loader.js.map","import { AudioStatic } from '../audio-player/audio-static.js';\nimport { Events } from '../events/Events.js';\nimport { AudioHTML5Loader } from './audio-html5-loader.js';\nimport { BrowserDetect } from '../browser/index.js';\nlet playerId = 1;\n// =================================================================\n//  Конструктор\n// =================================================================\n/**\n * @classdesc Класс HTML5-аудиоплеера.\n * @extends IAudioImplementation\n *\n * @fires IAudioImplementation#EVENT_PLAY\n * @fires IAudioImplementation#EVENT_ENDED\n * @fires IAudioImplementation#EVENT_VOLUME\n * @fires IAudioImplementation#EVENT_SPEED\n * @fires IAudioImplementation#EVENT_CRASHED\n * @fires IAudioImplementation#EVENT_SWAP\n *\n * @fires IAudioImplementation#EVENT_STOP\n * @fires IAudioImplementation#EVENT_PAUSE\n * @fires IAudioImplementation#EVENT_PROGRESS\n * @fires IAudioImplementation#EVENT_LOADING\n * @fires IAudioImplementation#EVENT_LOADED\n * @fires IAudioImplementation#EVENT_ERROR\n *\n * @constructor\n * @private\n */\nexport class AudioHTML5 {\n    browser = new BrowserDetect();\n    emitter = new Events();\n    audioContext;\n    webAudioApi = false;\n    // индекс текущего загрузчика\n    activeLoader = 0;\n    volume = 1;\n    speed = 1;\n    loaders = [];\n    audioOutput = null;\n    preprocessor = null;\n    skipEmptySound;\n    name = playerId++;\n    type = 'html5';\n    whenReady;\n    constructor(audioContext, shouldUseHlsPlayer, skipEmptySound) {\n        this.audioContext = audioContext;\n        this.whenReady = this.init(shouldUseHlsPlayer);\n        this.skipEmptySound = skipEmptySound;\n        this.setActive(0);\n    }\n    on(event, callback) {\n        this.emitter.on(event, callback);\n    }\n    off(event, callback) {\n        this.emitter.off(event, callback);\n    }\n    trigger(event, ...args) {\n        this.emitter.trigger(event, ...args);\n    }\n    init(shouldUseHlsPlayer) {\n        this.addLoader(shouldUseHlsPlayer);\n        // без второго addLoader не будет работать preload в случае если src следующего трека такой же как и у предыдущего\n        this.addLoader(shouldUseHlsPlayer);\n        const promises = this.loaders.map((loader) => {\n            return loader.whenReady;\n        });\n        return Promise.all(promises);\n    }\n    // =================================================================\n    //  Работа с загрузчиками\n    // =================================================================\n    /**\n     * Добавить загрузчик аудиофайлов.\n     * @private\n     */\n    addLoader(shouldUseHlsPlayer) {\n        const loader = new AudioHTML5Loader(shouldUseHlsPlayer, this.skipEmptySound);\n        this.loaders.push(loader);\n        this.subscribeLoaderEvents(loader);\n        if (this.webAudioApi && this.audioContext) {\n            loader.createSource(this.audioContext);\n        }\n    }\n    subscribeLoaderEvents(loader) {\n        const index = this.loaders.length - 1;\n        const listener = (event, ...data) => {\n            const offset = (this.loaders.length + index - this.activeLoader) % this.loaders.length;\n            this.trigger(event, offset, ...data);\n        };\n        loader.on(AudioStatic.EVENT_PROGRESS, (...args) => listener(AudioStatic.EVENT_PROGRESS, ...args));\n        loader.on(AudioStatic.EVENT_LOADING, (...args) => listener(AudioStatic.EVENT_LOADING, ...args));\n        loader.on(AudioStatic.EVENT_LOADED, (...args) => listener(AudioStatic.EVENT_LOADED, ...args));\n        loader.on(AudioStatic.EVENT_ENDED, (...args) => listener(AudioStatic.EVENT_ENDED, ...args));\n        loader.on(AudioStatic.EVENT_ERROR, (...args) => listener(AudioStatic.EVENT_ERROR, ...args));\n        loader.on(AudioStatic.EVENT_OUTER_PAUSE, (...args) => listener(AudioStatic.EVENT_OUTER_PAUSE, ...args));\n        loader.on(AudioStatic.EVENT_PAUSE, (...args) => listener(AudioStatic.EVENT_PAUSE, ...args));\n        loader.on(AudioStatic.EVENT_OUTER_PLAY, (...args) => listener(AudioStatic.EVENT_OUTER_PLAY, ...args));\n        loader.on(AudioStatic.EVENT_PLAY, (...args) => listener(AudioStatic.EVENT_PLAY, ...args));\n        loader.on(AudioStatic.HLS_EVENT_ERROR, (...args) => listener(AudioStatic.HLS_EVENT_ERROR, ...args));\n        loader.on(AudioStatic.EVENT_DESTROY, (...args) => listener(AudioStatic.EVENT_DESTROY, ...args));\n    }\n    /**\n     * Установить активный загрузчик\n     * @param {int} offset - 0: текущий загрузчик, 1: следующий загрузчик\n     * @private\n     */\n    setActive(offset) {\n        this.activeLoader = (this.activeLoader + offset) % this.loaders.length;\n        this.trigger(AudioStatic.EVENT_SWAP, offset);\n        if (offset !== 0) {\n            // INFO: если релизовывать концепцию множества загрузчиков, то это нужно доработать.\n            this.stop(offset);\n        }\n    }\n    /**\n     * Получить загрузчик и отписать его от событий старта воспроизведения\n     * @param {int} [offset=0] - 0: текущий загрузчик, 1: следующий загрузчик\n     * @returns {Audio}\n     * @private\n     */\n    getLoader(offset = 0) {\n        const loaders = this.loaders;\n        return loaders[(this.activeLoader + offset) % loaders.length];\n    }\n    // =================================================================\n    //  Подключение Web Audio API\n    // =================================================================\n    /**\n     * Включение режима CORS. ***ВАЖНО!*** - если включить режим CORS, аудио элемент не сможет загружать данные со\n     * сторонних доменов, если в ответе не будет правильного заголовка Access-Control-Allow-Origin. Если не планируется\n     * использование Web Audio API, не стоит включать этот режим.\n     * @param state\n     */\n    toggleCrossDomain(state) {\n        this.loaders.forEach((loader) => {\n            loader.toggleCrossDomain(state);\n        });\n    }\n    /**\n     * Переключение режима использования Web Audio API. Доступен только при html5-реализации плеера.\n     *\n     * **Внимание!** - после включения режима Web Audio API он не отключается полностью, т.к. для этого требуется\n     * реинициализация плеера, которой требуется клик пользователя. При отключении из графа обработки исключаются\n     * все ноды кроме нод-источников и ноды вывода, управление громкостью переключается на элементы audio, без\n     * использования GainNode\n     * @param {Boolean} state - запрашиваемый статус\n     * @returns {Boolean} -- итоговый статус плеера\n     */\n    toggleWebAudioAPI(state) {\n        if (this.webAudioApi === state) {\n            return state;\n        }\n        let result;\n        if (this.audioContext) {\n            if (state) {\n                this.audioOutput = this.audioContext.createGain();\n                this.audioOutput.gain.value = this.volume;\n                if (this.preprocessor) {\n                    // mfront-2899 bug#7 подключаем усилитель для управления громкостью ко входу экалайзера,\n                    // чтобы при дефолтных настройках включенного эквалайзера\n                    // громкость звука была такая же, как при выключенном эквалайзере\n                    this.audioOutput.connect(this.preprocessor.biquadFilterInput);\n                    if (this.preprocessor.biquadFilterOutput) {\n                        this.preprocessor.biquadFilterOutput.connect(this.audioContext.destination);\n                    }\n                }\n                else {\n                    this.audioOutput.connect(this.audioContext.destination);\n                }\n                this.loaders.forEach((loader) => {\n                    loader.volumeLevel = 1;\n                    if (this.audioContext) {\n                        loader.createSource(this.audioContext);\n                    }\n                    if (loader.outputAudioNode) {\n                        loader.outputAudioNode.disconnect();\n                        if (this.audioOutput) {\n                            loader.outputAudioNode.connect(this.audioOutput);\n                        }\n                    }\n                });\n                // MUSIC-18549\n                this.audioContext.resume();\n            }\n            else if (this.audioOutput) {\n                if (this.preprocessor && this.preprocessor.biquadFilterOutput) {\n                    this.preprocessor.biquadFilterOutput.disconnect();\n                }\n                this.audioOutput.disconnect();\n                this.audioOutput = null;\n                this.loaders.forEach((loader) => {\n                    loader.volumeLevel = this.volume;\n                    if (loader.outputAudioNode) {\n                        // INFO: после того как мы включили webAudioAPI его уже нельзя просто так выключить.\n                        loader.outputAudioNode.disconnect();\n                        if (this.audioContext) {\n                            loader.outputAudioNode.connect(this.audioContext.destination);\n                        }\n                    }\n                });\n            }\n            this.webAudioApi = state;\n            result = state;\n        }\n        else {\n            console.warn('toggleWebAudioAPIError', state);\n            result = false;\n        }\n        return result;\n    }\n    /**\n     * Подключение аудио препроцессора. Вход препроцессора подключается к аудио-элементу у которого выставлена\n     * 100% громкость. Выход препроцессора подключается к GainNode, которая регулирует итоговую громкость\n     * @param {Audio~AudioPreprocessor} preprocessor - препроцессор\n     * @returns {Boolean} -- статус успеха\n     *\n     * preprocessor - fx/equalizer/equalizer.js\n     */\n    setAudioPreprocessor(preprocessor) {\n        if (!this.webAudioApi) {\n            console.warn('setAudioPreprocessorError', preprocessor);\n            return false;\n        }\n        if (this.preprocessor === preprocessor) {\n            return true;\n        }\n        if (this.preprocessor && this.preprocessor.biquadFilterOutput) {\n            this.preprocessor.biquadFilterOutput.disconnect();\n        }\n        this.preprocessor = preprocessor;\n        if (!this.preprocessor) {\n            this.loaders.forEach(() => {\n                if (this.audioOutput) {\n                    this.audioOutput.disconnect();\n                    if (this.audioContext) {\n                        this.audioOutput.connect(this.audioContext.destination);\n                    }\n                }\n            });\n        }\n        else {\n            this.loaders.forEach(() => {\n                if (this.audioOutput && this.preprocessor) {\n                    this.audioOutput.disconnect();\n                    this.audioOutput.connect(this.preprocessor.biquadFilterInput);\n                }\n            });\n            if (this.preprocessor.biquadFilterOutput && this.audioContext) {\n                this.preprocessor.biquadFilterOutput.connect(this.audioContext.destination);\n            }\n        }\n        return true;\n    }\n    // =================================================================\n    //  Управление плеером\n    // =================================================================\n    /**\n     * Проиграть трек\n     * @param {String} src - ссылка на трек\n     */\n    play(src) {\n        const loader = this.getLoader();\n        if (loader) {\n            loader.load(src);\n            loader.play(0);\n        }\n    }\n    /** Поставить трек на паузу */\n    pause() {\n        const loader = this.getLoader();\n        if (loader) {\n            loader.pause();\n        }\n    }\n    /** Снять трек с паузы */\n    resume() {\n        const loader = this.getLoader();\n        if (loader) {\n            loader.play();\n        }\n    }\n    /**\n     * Остановить воспроизведение и загрузку трека\n     * @param {int} [offset=0] - 0: для текущего загрузчика, 1: для следующего загрузчика\n     */\n    stop(offset = 0) {\n        const loader = this.getLoader(offset);\n        if (loader) {\n            loader.stop();\n            this.trigger(AudioStatic.EVENT_STOP, offset);\n        }\n    }\n    /**\n     * Уничтожить трек\n     */\n    destroy() {\n        this.loaders.forEach((loader) => {\n            loader.destroy();\n        });\n        this.trigger(AudioStatic.EVENT_DESTROY);\n    }\n    /**\n     * Получить позицию воспроизведения\n     * @returns {number}\n     */\n    getPosition() {\n        const loader = this.getLoader();\n        return loader ? loader.currentTime : null;\n    }\n    /**\n     * Установить текущую позицию воспроизведения\n     * @param {number} position\n     */\n    setPosition(position) {\n        // FIXME: legacy-код. Понять нафиг тут нужен 0.001\n        const loader = this.getLoader();\n        if (loader) {\n            loader.setPosition(position - 0.001);\n        }\n    }\n    /**\n     * Получить длительность трека\n     * @param {int} [offset=0] - 0: текущий загрузчик, 1: следующий загрузчик\n     * @returns {number}\n     */\n    getDuration(offset = 0) {\n        const loader = this.getLoader(offset);\n        return loader ? loader.duration : null;\n    }\n    /**\n     * Получить длительность загруженной части трека\n     * @param {int} [offset=0] - 0: текущий загрузчик, 1: следующий загрузчик\n     * @returns {number}\n     */\n    getLoaded(offset) {\n        const loader = this.getLoader(offset);\n        return loader && loader.loaded ? loader.loaded : 0;\n    }\n    /**\n     * Получить текущее значение громкости\n     * @returns {number}\n     */\n    get volumeLevel() {\n        return this.volume;\n    }\n    /**\n     * Установить значение громкости\n     * @param {number} volume\n     */\n    set volumeLevel(volume) {\n        this.volume = Math.min(1, volume);\n        if (this.webAudioApi && this.audioOutput) {\n            if (typeof this.audioOutput.gain.setTargetAtTime === 'function' && this.audioContext) {\n                this.audioOutput.gain.setTargetAtTime(volume, this.audioContext.currentTime, 0.01);\n            }\n            else {\n                this.audioOutput.gain.value = volume;\n            }\n        }\n        else {\n            this.loaders.forEach((loader) => {\n                loader.volumeLevel = volume;\n            });\n        }\n        this.trigger(AudioStatic.EVENT_VOLUME);\n    }\n    /**\n     * Получить текущее значение скорости\n     * @returns {number}\n     */\n    get speedLevel() {\n        return this.speed;\n    }\n    /**\n     * Установить значение скорости\n     * @param {number} speed\n     */\n    set speedLevel(speed) {\n        this.speed = speed;\n        this.loaders.forEach((loader) => {\n            loader.defaultPlaybackRate = speed;\n            loader.playbackRate = speed;\n        });\n        this.trigger(AudioStatic.EVENT_SPEED);\n    }\n    // =================================================================\n    //  Предзагрузка\n    // =================================================================\n    /**\n     * Предзагрузить трек\n     * @param {String} src - Ссылка на трек\n     * @param {int} [offset=1] - 0: текущий загрузчик, 1: следующий загрузчик\n     */\n    preload(src, offset = 1) {\n        const loader = this.getLoader(offset);\n        if (loader) {\n            loader.load(src);\n        }\n    }\n    /**\n     * Проверить что трек предзагружается\n     * @param {String} src - ссылка на трек\n     * @param {int} [offset=1] - 0: текущий загрузчик, 1: следующий загрузчик\n     * @returns {Boolean}\n     */\n    isPreloaded(src, offset = 1) {\n        const loader = this.getLoader(offset);\n        return loader ? loader.audioSrc === src && !loader.audioNotLoading : false;\n    }\n    /**\n     * Проверить что трек начал предзагружаться\n     * @param {String} src - ссылка на трек\n     * @param {int} [offset=1] - 0: текущий загрузчик, 1: следующий загрузчик\n     * @returns {Boolean}\n     */\n    isPreloading(src, offset = 1) {\n        const loader = this.getLoader(offset);\n        return loader ? loader.audioSrc === src : false;\n    }\n    /**\n     * Запустить воспроизведение предзагруженного трека\n     * @param {int} [offset=1] - 0: текущий загрузчик, 1: следующий загрузчик\n     * @returns {Boolean} -- доступность данного действия\n     */\n    playPreloaded(offset = 1) {\n        const loader = this.getLoader(offset);\n        let result = false;\n        if (loader && loader.audioSrc) {\n            this.setActive(offset);\n            loader.play();\n            result = true;\n        }\n        return result;\n    }\n    // =================================================================\n    //  Получение данных о плеере\n    // =================================================================\n    /**\n     * Получить ссылку на трек\n     * @param {int} [offset=0] - 0: текущий загрузчик, 1: следующий загрузчик\n     * @returns {String|Boolean} -- Ссылка на трек или false, если нет загружаемого трека\n     */\n    getSrc(offset) {\n        const loader = this.getLoader(offset);\n        return loader && loader.audioSrc !== '' ? loader.audioSrc : null;\n    }\n    /**\n     * Проверить доступен ли программный контроль громкости\n     * @returns {Boolean}\n     */\n    isDeviceVolume() {\n        return this.browser.isOnlyDeviceVolume();\n    }\n    /**\n     * Проверить доступность воcпроизведения без пользовательского взаимодействия\n     * @returns {boolean}\n     */\n    isAutoplayable() {\n        const loader = this.getLoader(0);\n        return loader ? loader.autoplayable : null;\n    }\n}\n//# sourceMappingURL=audio-html5.js.map","export * from './audio-html5.js';\n//# sourceMappingURL=index.js.map","import { Events } from '../events/index.js';\nimport { config } from './config.js';\nimport { AudioError, AudioErrorStatic } from '../error/audio-error.js';\nimport { AudioStatic } from './audio-static.js';\nimport { AudioHTML5 } from '../html5/index.js';\nlet playerId = 1;\n// =================================================================\n//  Настройка доступных типов реализаций и их приоритета\n// =================================================================\n// =================================================================\n//  JSDOC: вспомогательные классы\n// =================================================================\n/**\n * Описание временных данных плеера.\n * @typedef {Object} Audio~AudioTimes\n *\n * @property {Number} duration Длительность аудиофайла.\n * @property {Number} loaded Длительность загруженной части.\n * @property {Number} position Позиция воспроизведения.\n * @property {Number} played Длительность воспроизведения.\n */\n// =================================================================\n//  JSDOC: Общие события плеера\n// =================================================================\n/**\n * Событие начала воспроизведения.\n * @event AudioStatic.EVENT_PLAY\n */\n/**\n * Событие завершения воспроизведения.\n * @event AudioStatic.EVENT_ENDED\n */\n/**\n * Событие изменения громкости.\n * @event AudioStatic.EVENT_VOLUME\n * @param {Number} volume Новое значение громкости.\n */\n/**\n * Событие изменения скорости.\n * @event AudioStatic.EVENT_SPEED\n * @param {Number} speed Новое значение скорости.\n */\n/**\n * Событие возникновения ошибки при инициализации плеера.\n * @event AudioStatic.EVENT_CRASHED\n */\n/**\n * Событие смены статуса плеера.\n * @event AudioStatic.EVENT_STATE\n * @param {String} state Новый статус плеера.\n */\n/**\n * Событие переключения активного плеера и прелоадера.\n * @event AudioStatic.EVENT_SWAP\n */\n// =================================================================\n//  JSDOC: события активного плеера\n// =================================================================\n/**\n * Событие остановки воспроизведения.\n * @event AudioStatic.EVENT_STOP\n */\n/**\n * Событие паузы воспроизведения.\n * @event AudioStatic.EVENT_PAUSE\n */\n/**\n * Событие обновления позиции воспроизведения или загруженной части.\n * @event AudioStatic.EVENT_PROGRESS\n * @param {Audio~AudioTimes} times Информация о временных данных аудиофайла.\n */\n/**\n * Событие начала загрузки аудиофайла.\n * @event AudioStatic.EVENT_LOADING\n */\n/**\n * Событие завершения загрузки аудиофайла.\n * @event AudioStatic.EVENT_LOADED\n */\n/**\n * Событие ошибки воспроизведения.\n * @event AudioStatic.EVENT_ERROR\n */\n// =================================================================\n//  JSDOC: события предзагрузчика\n// =================================================================\n/**\n * Событие остановки воспроизведения.\n * @event AudioStatic.PRELOADER_EVENT+EVENT_STOP\n */\n/**\n * Событие обновления позиции загруженной части.\n * @event AudioStatic.PRELOADER_EVENT+EVENT_PROGRESS\n * @param {Audio~AudioTimes} times Информация о временных данных аудиофайла.\n */\n/**\n * Событие начала загрузки аудиофайла.\n * @event AudioStatic.PRELOADER_EVENT+EVENT_LOADING\n */\n/**\n * Событие завершения загрузки аудиофайла.\n * @event AudioStatic.PRELOADER_EVENT+EVENT_LOADED\n */\n/**\n * Событие ошибки воспроизведения.\n * @event AudioStatic.PRELOADER_EVENT+EVENT_ERROR\n */\n// =================================================================\n//  Конструктор\n// =================================================================\n/**\n * @classdesc Аудиоплеер для браузера.\n * @exported ya.music.Audio\n *\n * @param {String} [preferredType=\"html5\"] Предпочитаемый тип плеера.\n *\n * @extends Events\n *\n * @fires AudioStatic.EVENT_PLAY\n * @fires AudioStatic.EVENT_ENDED\n * @fires AudioStatic.EVENT_VOLUME\n * @fires AudioStatic.EVENT_SPEED\n * @fires AudioStatic.EVENT_CRASHED\n * @fires AudioStatic.EVENT_STATE\n * @fires AudioStatic.EVENT_SWAP\n *\n * @fires AudioStatic.EVENT_STOP\n * @fires AudioStatic.EVENT_PAUSE\n * @fires AudioStatic.EVENT_PROGRESS\n * @fires AudioStatic.EVENT_LOADING\n * @fires AudioStatic.EVENT_LOADED\n * @fires AudioStatic.EVENT_ERROR\n *\n * @fires AudioStatic.PRELOADER_EVENT+EVENT_STOP\n * @fires AudioStatic.PRELOADER_EVENT+EVENT_PROGRESS\n * @fires AudioStatic.PRELOADER_EVENT+EVENT_LOADING\n * @fires AudioStatic.PRELOADER_EVENT+EVENT_LOADED\n * @fires AudioStatic.PRELOADER_EVENT+EVENT_ERROR\n *\n * @constructor\n */\n// =================================================================\n//  Статика\n// =================================================================\n/**\n * Контекст для Web Audio API.\n * @type {AudioContext}\n * @static\n */\nexport class AudioPlayer {\n    audioContext = this.createAudioContext();\n    emitter = new Events();\n    played = 0;\n    lastSkip = 0;\n    playId = null;\n    initInProgress = true;\n    shouldUseHlsPlayer;\n    implementation = null;\n    promises = {};\n    skipEmptySound;\n    name = playerId++;\n    state = AudioStatic.STATE_INIT;\n    whenReady;\n    constructor(shouldUseHlsPlayer = false, skipEmptySound = false) {\n        this.shouldUseHlsPlayer = shouldUseHlsPlayer;\n        this.skipEmptySound = skipEmptySound;\n        this.whenReady = this.init()\n            .then(() => this.onAudioPlayerInit())\n            .catch((error) => {\n            this.initInProgress = false;\n            this.setState(AudioStatic.STATE_CRASHED);\n            throw error;\n        });\n    }\n    on(event, callback) {\n        this.emitter.on(event, callback);\n    }\n    off(event, callback) {\n        this.emitter.off(event, callback);\n    }\n    trigger(event, ...args) {\n        this.emitter.trigger(event, ...args);\n    }\n    createAudioContext() {\n        return new AudioContext();\n    }\n    // =================================================================\n    //  Инициализация\n    // =================================================================\n    init() {\n        return new Promise((resolve, reject) => {\n            window.addEventListener('beforeunload', () => this.onBeforeUnload(), true);\n            this.createCore()\n                .then(resolve)\n                .catch(() => {\n                this.retryInit().then(resolve).catch(reject);\n            });\n        });\n    }\n    /**\n     * Инициализация плеера.\n     * @param {int} [retry=0] Количество попыток.\n     * @private\n     */\n    retryInit() {\n        let retry = 0;\n        const doRetry = (resolve, reject) => {\n            retry += 1;\n            if (!this.initInProgress) {\n                resolve([]);\n            }\n            this.createCore()\n                .then(resolve)\n                .catch(() => {\n                if (retry > config.audio.retry) {\n                    reject(new AudioError(AudioErrorStatic.NO_IMPLEMENTATION));\n                }\n                else {\n                    doRetry(resolve, reject);\n                }\n            });\n        };\n        const retryPromise = new Promise((resolve, reject) => {\n            doRetry(resolve, reject);\n        });\n        return retryPromise;\n    }\n    /**\n     * Запуск реализации плеера с указанным типом.\n     * @returns {Promise}\n     * @private\n     */\n    createCore() {\n        return new Promise((resolve, reject) => {\n            try {\n                /**\n                 * Текущая реализация аудиоплеера.\n                 */\n                this.implementation = new AudioHTML5(this.audioContext, this.shouldUseHlsPlayer, this.skipEmptySound);\n                this.implementation.whenReady.then(resolve).catch(reject);\n            }\n            catch (e) {\n                console.warn(e);\n                reject(e);\n            }\n        });\n    }\n    onAudioPlayerInit() {\n        this.initInProgress = false;\n        this.subscribeImplementationEvents();\n        this.setState(AudioStatic.STATE_IDLE);\n    }\n    subscribeImplementationEvents() {\n        const listener = (event, ...data) => {\n            const offset = data[0];\n            this.populateEvents(event, ...data);\n            if (!offset) {\n                switch (event) {\n                    case AudioStatic.EVENT_PLAY:\n                        this.setState(AudioStatic.STATE_PLAYING);\n                        break;\n                    case AudioStatic.EVENT_ENDED:\n                    case AudioStatic.EVENT_SWAP:\n                    case AudioStatic.EVENT_STOP:\n                    case AudioStatic.EVENT_ERROR:\n                    case AudioStatic.HLS_EVENT_ERROR:\n                        this.setState(AudioStatic.STATE_IDLE);\n                        break;\n                    case AudioStatic.EVENT_PAUSE:\n                        this.setState(AudioStatic.STATE_PAUSED);\n                        break;\n                    case AudioStatic.EVENT_CRASHED:\n                        this.setState(AudioStatic.STATE_CRASHED);\n                        break;\n                }\n            }\n        };\n        if (this.implementation) {\n            this.implementation.on(AudioStatic.EVENT_PROGRESS, (...args) => listener(AudioStatic.EVENT_PROGRESS, ...args));\n            this.implementation.on(AudioStatic.EVENT_LOADING, (...args) => listener(AudioStatic.EVENT_LOADING, ...args));\n            this.implementation.on(AudioStatic.EVENT_LOADED, (...args) => listener(AudioStatic.EVENT_LOADED, ...args));\n            this.implementation.on(AudioStatic.EVENT_ENDED, (...args) => listener(AudioStatic.EVENT_ENDED, ...args));\n            this.implementation.on(AudioStatic.EVENT_ERROR, (...args) => listener(AudioStatic.EVENT_ERROR, ...args));\n            this.implementation.on(AudioStatic.EVENT_OUTER_PAUSE, (...args) => listener(AudioStatic.EVENT_OUTER_PAUSE, ...args));\n            this.implementation.on(AudioStatic.EVENT_PAUSE, (...args) => listener(AudioStatic.EVENT_PAUSE, ...args));\n            this.implementation.on(AudioStatic.EVENT_OUTER_PLAY, (...args) => listener(AudioStatic.EVENT_OUTER_PLAY, ...args));\n            this.implementation.on(AudioStatic.EVENT_PLAY, (...args) => listener(AudioStatic.EVENT_PLAY, ...args));\n            this.implementation.on(AudioStatic.HLS_EVENT_ERROR, (...args) => listener(AudioStatic.HLS_EVENT_ERROR, ...args));\n            this.implementation.on(AudioStatic.EVENT_DESTROY, (...args) => listener(AudioStatic.EVENT_DESTROY, ...args));\n            this.implementation.on(AudioStatic.EVENT_SWAP, (...args) => listener(AudioStatic.EVENT_SWAP, ...args));\n            this.implementation.on(AudioStatic.EVENT_STOP, (...args) => listener(AudioStatic.EVENT_STOP, ...args));\n            this.implementation.on(AudioStatic.EVENT_VOLUME, (...args) => listener(AudioStatic.EVENT_VOLUME, ...args));\n            this.implementation.on(AudioStatic.EVENT_SPEED, (...args) => listener(AudioStatic.EVENT_SPEED, ...args));\n        }\n    }\n    onBeforeUnload() {\n        if (typeof window !== 'undefined' && navigator && navigator.maxTouchPoints === 1) {\n            return;\n        }\n        this.destroy();\n    }\n    /**\n     * Установить статус плеера.\n     * @param {String} state Новый статус.\n     * @private\n     */\n    setState(state) {\n        if (state === AudioStatic.STATE_PAUSED && this.state !== AudioStatic.STATE_PLAYING) {\n            return;\n        }\n        const changed = this.state !== state;\n        this.state = state;\n        if (changed) {\n            this.trigger(AudioStatic.EVENT_STATE, state);\n        }\n    }\n    // =================================================================\n    //  Обработка событий\n    // =================================================================\n    /**\n     * Создание обещания, которое разрешается при одном из списка событий.\n     * @param {String} action - название действия\n     * @param {Array.<String>} resolveEvents - список ожидаемых событий для разрешения обещания\n     * @param {Array.<String>} rejectEvents - список ожидаемый событий для отклонения обещания\n     * @returns {Promise} -- также создает свойство с названием _when<Action>, которое живет до момента разрешения\n     * @private\n     */\n    waitEvents(action, resolveEvents, rejectEvents) {\n        let resolvePromise = () => { };\n        let rejectPromise = () => { };\n        const promise = new Promise((resolve, reject) => {\n            resolvePromise = resolve;\n            rejectPromise = reject;\n        });\n        this.promises[action] = {\n            promise: () => promise,\n            reject: rejectPromise\n        };\n        const cleanupEvents = () => {\n            for (const event of resolveEvents) {\n                this.off(event, resolvePromise);\n            }\n            for (const event of rejectEvents) {\n                this.off(event, rejectPromise);\n            }\n            delete this.promises[action];\n        };\n        for (const event of resolveEvents) {\n            this.on(event, resolvePromise);\n        }\n        const listener = (event) => {\n            return (data) => {\n                const error = data instanceof Error ? data : new AudioError(event);\n                rejectPromise(error);\n            };\n        };\n        for (const event of rejectEvents) {\n            this.on(event, listener(event));\n        }\n        promise.then(cleanupEvents).catch(cleanupEvents);\n        return promise;\n    }\n    /**\n     * Расширение событий аудиоплеера дополнительными свойствами. Подписывается на все события аудиоплеера,\n     * триггерит итоговые события, разделяя их по типу активный плеер или прелоадер, дополняет события данными.\n     * @param {String} event - событие\n     * @param {int} offset - источник события. 0 - активный плеер. 1 - прелоадер.\n     * @param {*} data - дополнительные данные события.\n     * @private\n     */\n    populateEvents(event, ...data) {\n        const offset = data[0];\n        const outerEvent = (offset ? AudioStatic.PRELOADER_EVENT : '') + event;\n        switch (event) {\n            case AudioStatic.EVENT_CRASHED:\n            case AudioStatic.EVENT_SWAP:\n                this.trigger(event, ...data);\n                break;\n            case AudioStatic.EVENT_ERROR:\n                this.trigger(outerEvent, ...data);\n                break;\n            case AudioStatic.HLS_EVENT_ERROR:\n                this.trigger(outerEvent, ...data);\n                break;\n            case AudioStatic.EVENT_VOLUME:\n                this.trigger(event, this.getVolume());\n                break;\n            case AudioStatic.EVENT_SPEED:\n                this.trigger(event, this.getSpeed());\n                break;\n            case AudioStatic.EVENT_PROGRESS:\n                this.trigger(outerEvent, {\n                    duration: this.getDuration(offset),\n                    loaded: this.getLoaded(offset),\n                    position: offset ? 0 : this.getPosition(),\n                    played: offset ? 0 : this.getPlayed()\n                });\n                break;\n            case AudioStatic.EVENT_OUTER_PLAY:\n            case AudioStatic.EVENT_OUTER_PAUSE:\n                this.trigger(event);\n                break;\n            default:\n                this.trigger(outerEvent);\n                break;\n        }\n    }\n    // =================================================================\n    //  Общие функции управления плеером\n    // =================================================================\n    /*\n     INFO: данный метод было решено оставить, т.к. это удобнее чем использовать обещание - есть возможность в начале\n     инициализации получить сразу ссылку на экземпляр плеера и обвешать его обработчиками событий. Плюс к тому при\n     таком подходе реинициализацию делать проще - при ней не придется переназначать обработчики и обновлять везде ссылку\n     на текущий экземпляр плеера.\n     */\n    /**\n     * Получить обещание, разрешающееся после завершения инициализации.\n     * @returns {Promise}\n     */\n    initPromise() {\n        return this.whenReady;\n    }\n    /**\n     * Получить статус плеера.\n     * @returns {String}\n     */\n    getState() {\n        return this.state;\n    }\n    /**\n     * Получить ссылку на текущий трек.\n     * @param {int} [offset=0] Брать аудиофайл из активного плеера или из прелоадера. 0 - активный плеер, 1 - прелоадер.\n     * @returns {String|null}\n     */\n    getSrc(offset) {\n        return this.implementation ? this.implementation.getSrc(offset) : null;\n    }\n    // =================================================================\n    //  Управление воспроизведением\n    // =================================================================\n    /**\n     * Запуск воспроизведения.\n     * @param {String} src Ссылка на трек.\n     * @returns {AbortablePromise}\n     */\n    play(src) {\n        this.played = 0;\n        this.lastSkip = 0;\n        this.generatePlayId();\n        if (this.promises.whenPlay) {\n            this.promises.whenPlay.reject('play');\n        }\n        if (this.promises.whenPause) {\n            this.promises.whenPause.reject('play');\n        }\n        if (this.promises.whenStop) {\n            this.promises.whenStop.reject('play');\n        }\n        const promise = this.waitEvents('whenPlay', [AudioStatic.EVENT_PLAY], [AudioStatic.EVENT_STOP, AudioStatic.EVENT_ERROR, AudioStatic.HLS_EVENT_ERROR, AudioStatic.EVENT_CRASHED]);\n        this.setState(AudioStatic.STATE_PAUSED);\n        if (this.implementation) {\n            this.implementation.play(src);\n        }\n        return promise;\n    }\n    /**\n     * Перезапуск воспроизведения.\n     * @returns {AbortablePromise} обещание, которое разрешится, когда трек будет перезапущен.\n     */\n    restart() {\n        if (!this.getDuration()) {\n            return Promise.reject(new AudioError(AudioErrorStatic.BAD_STATE));\n        }\n        this.generatePlayId();\n        this.setPosition(0);\n        this.played = 0;\n        this.lastSkip = 0;\n        return this.resume();\n    }\n    /**\n     * Остановка воспроизведения.\n     * @param {int} [offset=0] Активный плеер или прелоадер. 0 - активный плеер. 1 - прелоадер.\n     * @returns {AbortablePromise} обещание, которое разрешится, когда воспроизведение будет остановлено.\n     */\n    stop(offset) {\n        if (offset !== 0 && this.implementation) {\n            this.implementation.stop(offset);\n            Promise.resolve();\n        }\n        this.played = 0;\n        this.lastSkip = 0;\n        if (this.promises.whenPlay) {\n            this.promises.whenPlay.reject('stop');\n        }\n        if (this.promises.whenPause) {\n            this.promises.whenPause.reject('stop');\n        }\n        let promise;\n        if (this.promises.whenStop) {\n            promise = this.promises.whenStop.promise();\n        }\n        else {\n            promise = this.waitEvents('_whenStop', [AudioStatic.EVENT_STOP], [\n                AudioStatic.EVENT_PLAY,\n                AudioStatic.EVENT_ERROR,\n                AudioStatic.HLS_EVENT_ERROR,\n                AudioStatic.EVENT_CRASHED\n            ]);\n        }\n        if (this.implementation) {\n            this.implementation.stop();\n        }\n        return promise;\n    }\n    /**\n     * Поставить плеер на паузу.\n     * @returns {AbortablePromise} обещание, которое  разрешится, когда плеер будет поставлен на паузу.\n     */\n    pause() {\n        if (this.state !== AudioStatic.STATE_PLAYING) {\n            return Promise.reject(new AudioError(AudioErrorStatic.BAD_STATE));\n        }\n        let promise;\n        if (this.promises.whenPlay) {\n            this.promises.whenPlay.reject('pause');\n        }\n        if (this.promises.whenPause) {\n            promise = this.promises.whenPause.promise();\n        }\n        else {\n            promise = this.waitEvents('_whenPause', [AudioStatic.EVENT_PAUSE], [\n                AudioStatic.EVENT_STOP,\n                AudioStatic.EVENT_PLAY,\n                AudioStatic.EVENT_ERROR,\n                AudioStatic.HLS_EVENT_ERROR,\n                AudioStatic.EVENT_CRASHED\n            ]);\n        }\n        if (this.implementation) {\n            this.implementation.pause();\n        }\n        return promise;\n    }\n    /**\n     * Снятие плеера с паузы.\n     * @returns {AbortablePromise} обещание, которое разрешится, когда начнется воспроизведение.\n     */\n    resume() {\n        if (this.state === AudioStatic.STATE_PLAYING && !this.promises.whenPause) {\n            return Promise.resolve();\n        }\n        if (!(this.state === AudioStatic.STATE_IDLE ||\n            this.state === AudioStatic.STATE_PAUSED ||\n            this.state === AudioStatic.STATE_PLAYING)) {\n            return Promise.reject(new AudioError(AudioErrorStatic.BAD_STATE));\n        }\n        let promise;\n        if (this.promises.whenPause) {\n            this.promises.whenPause.reject('resume');\n        }\n        if (this.promises.whenPlay) {\n            promise = this.promises.whenPlay.promise();\n        }\n        else {\n            promise = this.waitEvents('_whenPlay', [AudioStatic.EVENT_PLAY], [\n                AudioStatic.EVENT_STOP,\n                AudioStatic.EVENT_ERROR,\n                AudioStatic.HLS_EVENT_ERROR,\n                AudioStatic.EVENT_CRASHED\n            ]);\n        }\n        if (this.implementation) {\n            this.implementation.resume();\n        }\n        return promise.then(() => this.trigger(AudioStatic.EVENT_RESUME));\n    }\n    /**\n     * TODO могут быть баги в этом методе\n     * Запуск воспроизведения предзагруженного аудиофайла.\n     * @param {String} [src] Ссылка на аудиофайл (для проверки, что в прелоадере нужный трек).\n     * @returns {AbortablePromise} обещание, которое разрешится, когда начнется воспроизведение предзагруженного аудиофайла.\n     */\n    playPreloaded(src) {\n        const preloadedSrc = src ? src : this.getSrc(1);\n        if (preloadedSrc && !this.isPreloaded(preloadedSrc)) {\n            console.warn('playPreloadedBadTrack', AudioErrorStatic.NOT_PRELOADED);\n            return Promise.reject(new AudioError(AudioErrorStatic.NOT_PRELOADED));\n        }\n        this.played = 0;\n        this.lastSkip = 0;\n        this.generatePlayId();\n        if (this.promises.whenPlay) {\n            this.promises.whenPlay.reject('playPreloaded');\n        }\n        if (this.promises.whenPause) {\n            this.promises.whenPause.reject('playPreloaded');\n        }\n        if (this.promises.whenStop) {\n            this.promises.whenStop.reject('playPreloaded');\n        }\n        const promise = this.waitEvents('whenPlay', [AudioStatic.EVENT_PLAY], [AudioStatic.EVENT_STOP, AudioStatic.EVENT_ERROR, AudioStatic.HLS_EVENT_ERROR, AudioStatic.EVENT_CRASHED]);\n        this.setState(AudioStatic.STATE_PAUSED);\n        let result = false;\n        if (this.implementation) {\n            result = this.implementation.playPreloaded();\n        }\n        if (!result && this.promises.whenPlay) {\n            console.warn('playPreloadedError', AudioErrorStatic.NOT_PRELOADED);\n            this.promises.whenPlay.reject(new AudioError(AudioErrorStatic.NOT_PRELOADED));\n        }\n        return promise;\n    }\n    /**\n     * Уничтожение плеера\n     */\n    destroy() {\n        this.played = 0;\n        this.lastSkip = 0;\n        if (this.promises.whenPlay) {\n            this.promises.whenPlay.reject('destroy');\n        }\n        if (this.promises.whenPause) {\n            this.promises.whenPause.reject('destroy');\n        }\n        if (this.implementation) {\n            this.implementation.destroy();\n        }\n    }\n    // =================================================================\n    //  Предзагрузка\n    // =================================================================\n    /**\n     * Предзагрузка аудиофайла.\n     * @param {String} src Ссылка на трек.\n     * @param {Number} [duration] Длительность аудиофайла.\n     * длительность определяется с погрешностью.\n     * @returns {AbortablePromise} обещание, которое разрешится, когда начнется предзагрузка аудиофайла.\n     */\n    preload(src) {\n        if (this.promises.whenPreload) {\n            this.promises.whenPreload.reject('preload');\n        }\n        const promise = this.waitEvents('whenPreload', [AudioStatic.PRELOADER_EVENT + AudioStatic.EVENT_LOADING, AudioStatic.EVENT_SWAP], [\n            AudioStatic.PRELOADER_EVENT + AudioStatic.EVENT_CRASHED,\n            AudioStatic.PRELOADER_EVENT + AudioStatic.EVENT_ERROR,\n            AudioStatic.PRELOADER_EVENT + AudioStatic.HLS_EVENT_ERROR,\n            AudioStatic.PRELOADER_EVENT + AudioStatic.EVENT_STOP\n        ]);\n        if (this.implementation) {\n            this.implementation.preload(src);\n        }\n        return promise;\n    }\n    /**\n     * Проверка, что аудиофайл предзагружен.\n     * @param {String} src Ссылка на трек.\n     * @returns {Boolean} true, если аудиофайл предзагружен, false - иначе.\n     */\n    isPreloaded(src) {\n        return this.implementation ? this.implementation.isPreloaded(src) : false;\n    }\n    /**\n     * Проверка, что аудиофайл предзагружается.\n     * @param {String} src Ссылка на трек.\n     * @returns {Boolean} true, если аудиофайл начал предзагружаться, false - иначе.\n     */\n    isPreloading(src) {\n        return this.implementation ? this.implementation.isPreloading(src, 1) : false;\n    }\n    // =================================================================\n    //  Тайминги\n    // =================================================================\n    /**\n     * Получение позиции воспроизведения (в секундах).\n     * @returns {Number}\n     */\n    getPosition() {\n        let position = null;\n        if (this.implementation) {\n            position = this.implementation.getPosition();\n        }\n        return position ? position : 0;\n    }\n    /**\n     * Установка позиции воспроизведения (в секундах).\n     * @param {Number} position Новая позиция воспроизведения\n     * @returns {Number} итоговая позиция воспроизведения.\n     */\n    setPosition(position) {\n        if (this.implementation) {\n            this.implementation.setPosition(position);\n        }\n        this.played += this.getPosition() - this.lastSkip;\n        this.lastSkip = position;\n        return position;\n    }\n    /**\n     * Получить длительность текущего аудиофайла (в секундах).\n     * @param {Boolean|int} preloader Активный плеер или предзагрузчик. 0 - активный плеер, 1 - предзагрузчик.\n     * @returns {Number}\n     */\n    getDuration(preloader = 0) {\n        let duration = null;\n        if (this.implementation && this.implementation.getDuration(preloader)) {\n            duration = this.implementation.getDuration(preloader);\n        }\n        return duration ? duration : 0;\n    }\n    /**\n     * Получить длительность загруженной части (в секундах).\n     * @param {Boolean|int} preloader Активный плеер или предзагрузчик. 0 - активный плеер, 1 - предзагрузчик.\n     * @returns {Number}\n     */\n    getLoaded(preloader = 0) {\n        return this.implementation ? this.implementation.getLoaded(preloader) : 0;\n    }\n    /**\n     * Получить длительность воспроизведения (в секундах).\n     * @returns {Number}\n     */\n    getPlayed() {\n        const position = this.getPosition();\n        this.played += position - this.lastSkip;\n        this.lastSkip = position;\n        return this.played;\n    }\n    // =================================================================\n    //  Громкость\n    // =================================================================\n    /**\n     * Получить текущее значение громкости плеера.\n     * @returns {Number}\n     */\n    getVolume() {\n        return this.implementation ? this.implementation.volumeLevel : 0;\n    }\n    /**\n     * Установка громкости плеера.\n     * @param {Number} volume Новое значение громкости.\n     * @returns {Number} итоговое значение громкости.\n     */\n    setVolume(volume) {\n        let result = 0;\n        if (this.implementation) {\n            this.implementation.volumeLevel = volume;\n            result = volume;\n        }\n        return result;\n    }\n    /**\n     * Получить текущее значение скорости плеера.\n     * @returns {Number}\n     */\n    getSpeed() {\n        return this.implementation ? this.implementation.speedLevel : 0;\n    }\n    /**\n     * Установка скорости плеера.\n     * @param {Number} speed Новое значение скорости.\n     * @returns {Number} итоговое значение скорости.\n     */\n    setSpeed(speed) {\n        let result = 0;\n        if (this.implementation) {\n            this.implementation.speedLevel = speed;\n            result = speed;\n        }\n        return result;\n    }\n    /**\n     * Проверка, что громкость управляется устройством, а не программно.\n     * @returns {Boolean} true, если громкость управляется устройством, false - иначе.\n     */\n    isDeviceVolume() {\n        return this.implementation ? this.implementation.isDeviceVolume() : true;\n    }\n    /**\n     * Проверка возможности воспроизведения без пользовательского взаимодействия\n     * @returns {Boolean}\n     */\n    isAutoplayable() {\n        let result = null;\n        if (this.implementation) {\n            result = this.implementation.isAutoplayable();\n        }\n        return result !== null ? result : false;\n    }\n    // =================================================================\n    //  Web Audio API\n    // =================================================================\n    /**\n     * Включить режим CORS для получения аудиотреков. <note type=\"attention\">Если включить режим CORS, аудио элемент не сможет загружать данные со\n     * сторонних доменов, если в ответе не будет правильного заголовка Access-Control-Allow-Origin. Если не планируется\n     * использование Web Audio API, не стоит включать этот режим.</note>\n     * @param {Boolean} state Запрашиваемый статус.\n     * @returns {Boolean} статус успеха.\n     */\n    toggleCrossDomain(state) {\n        let result = false;\n        if (this.implementation) {\n            this.implementation.toggleCrossDomain(state);\n            result = true;\n        }\n        return result;\n    }\n    /**\n     * Переключение режима использования Web Audio API. Доступен только при html5-реализации плеера.\n     * <note type=\"attention\"> После включения режима Web Audio API он не отключается полностью, т.к. для этого требуется\n     * реинициализация плеера, для которой в свою очередь требуется клик пользователя. При отключении режима из\n     * графа обработки исключаются все узлы, кроме узлов-источников и узла вывода;\n     * управление громкостью переключается на элементы audio, без использования GainNode.</note>\n     * @param {Boolean} state Запрашиваемый статус.\n     * @returns {Boolean} итоговый статус\n     */\n    toggleWebAudioAPI(state) {\n        let result = false;\n        if (this.implementation) {\n            result = this.implementation.toggleWebAudioAPI(state);\n        }\n        return result;\n    }\n    /**\n     * Аудио-препроцессор.\n     * @typedef {Object} Audio~AudioPreprocessor\n     *\n     * @property {AudioNode} input Нода, в которую перенаправляется вывод аудио.\n     * @property {AudioNode} output Нода, из которой вывод подается на усилитель.\n     */\n    /**\n     * Подключение аудио препроцессора. Вход препроцессора подключается к аудиоэлементу, у которого выставлена\n     * 100% громкость. Выход препроцессора подключается к GainNode, которая регулирует итоговую громкость.\n     * @param {Audio~AudioPreprocessor} preprocessor Препроцессор.\n     * @returns {Boolean} статус успеха.\n     */\n    setAudioPreprocessor(preprocessor) {\n        let result = false;\n        if (this.implementation) {\n            result = this.implementation.setAudioPreprocessor(preprocessor);\n        }\n        return result;\n    }\n    // =================================================================\n    //  Логгирование\n    // =================================================================\n    /**\n     * Генерация playId\n     * @private\n     */\n    generatePlayId() {\n        this.playId = Math.random().toString().slice(2);\n    }\n    /**\n     * Получить уникальный идентификатор воспроизведения. Создаётся каждый раз при запуске нового трека или перезапуске текущего.\n     * @returns {String}\n     */\n    getPlayId() {\n        return this.playId;\n    }\n}\n//# sourceMappingURL=audio-player.js.map","export * from './audio-player.js';\nexport * from './audio-static.js';\n//# sourceMappingURL=index.js.map","import { AudioPlayer, AudioStatic } from './audio-player/index.js';\nexport class AudioCoreHtml5Adapter {\n    pauseHandlers = [];\n    resumeHandlers = [];\n    core = new AudioPlayer();\n    play(src) {\n        return this.core.play(src);\n    }\n    setProgress(position) {\n        const audioPosition = this.core.setPosition(position);\n        this.core.trigger(AudioStatic.EVENT_POSITION);\n        return Promise.resolve(audioPosition);\n    }\n    pause() {\n        return this.core.pause();\n    }\n    resume() {\n        return this.core.resume();\n    }\n    setVolume(volume) {\n        const audioVolume = this.core.setVolume(volume);\n        this.core.trigger(AudioStatic.EVENT_VOLUME);\n        return Promise.resolve(audioVolume);\n    }\n    stop() {\n        return this.core.stop(0);\n    }\n    onAudioEnd(callBack) {\n        this.core.on(AudioStatic.EVENT_ENDED, callBack);\n    }\n    onAudioPaused(callBack) {\n        const handler = () => {\n            if (this.core.getState() === 'paused') {\n                callBack();\n            }\n        };\n        this.pauseHandlers.push({\n            handler,\n            originalCallback: callBack\n        });\n        this.core.on(AudioStatic.EVENT_STATE, handler);\n    }\n    onAudioResume(callBack) {\n        this.core.on(AudioStatic.EVENT_RESUME, callBack);\n    }\n    onAudioUpdatingProgress(callBack) {\n        this.core.on(AudioStatic.EVENT_PROGRESS, callBack);\n    }\n    onAudioSetProgress(callBack) {\n        this.core.on(AudioStatic.EVENT_POSITION, callBack);\n    }\n    onAudioSetVolume(callBack) {\n        this.core.on(AudioStatic.EVENT_VOLUME, callBack);\n    }\n    offAudioEnd(callBack) {\n        this.core.off(AudioStatic.EVENT_ENDED, callBack);\n    }\n    offAudioPaused(callback) {\n        const pauseHandler = this.pauseHandlers.find((handler) => handler.originalCallback === callback);\n        if (pauseHandler) {\n            this.core.off(AudioStatic.EVENT_STATE, pauseHandler.handler);\n        }\n    }\n    offAudioResume(callBack) {\n        this.core.off(AudioStatic.EVENT_RESUME, callBack);\n    }\n    offAudioUpdatingProgress(callBack) {\n        this.core.off(AudioStatic.EVENT_PROGRESS, callBack);\n    }\n    offAudioSetProgress(callBack) {\n        this.core.off(AudioStatic.EVENT_POSITION, callBack);\n    }\n    offAudioSetVolume(callBack) {\n        this.core.off(AudioStatic.EVENT_VOLUME, callBack);\n    }\n}\n//# sourceMappingURL=AudioCoreHtml5Adapter.js.map","export { AudioCoreHtml5Adapter as AudioCoreHtml5 } from './AudioCoreHtml5Adapter.js';\nexport { AudioPlayer, AudioStatic } from './audio-player/index.js';\n//# sourceMappingURL=index.js.map","import { AbstractApplyableContext } from '@yandex-music-int/player-playback';\nexport class ApplyContextPlugin {\n    apply(params) {\n        const { hooks, playback } = params;\n        hooks.afterContextSet.tap('ApplyContextPlugin', () => {\n            const context = playback.state.currentContext.value;\n            if (context && context instanceof AbstractApplyableContext) {\n                context.apply({\n                    hooks,\n                    playback\n                });\n            }\n        });\n    }\n}\n//# sourceMappingURL=ApplyContextPlugin.js.map","export function updateMoveActionsAvailability(playback) {\n    const currentIndex = playback.state.queueState.index.value;\n    const currentOrder = playback.state.queueState.order.value;\n    const context = playback.state.currentContext.value;\n    const hasNextTrack = typeof currentOrder[currentIndex + 1] !== 'undefined';\n    const hasPrevTrack = typeof currentOrder[currentIndex - 1] !== 'undefined';\n    if (context) {\n        context.availableActions.moveBackward.value = hasPrevTrack;\n        context.availableActions.moveForward.value = hasNextTrack;\n    }\n}\n//# sourceMappingURL=updateMoveActionsAvailability.js.map","import { updateMoveActionsAvailability } from './helpers/updateMoveActionsAvailability.js';\nexport class AvailableActionsPlugin {\n    apply(params) {\n        const { hooks, playback } = params;\n        /**\n         * Когда меняется длина списка сущностей, так же пересчитываем возможность скипов\n         *\n         * Кейс: дослушали последний трек в радио -> выключили скип вперед -> докачалась еще пачка треков ->\n         * -> положили в очередь -> включили скип вперед\n         */\n        playback.state.queueState.entityList.onChange(() => {\n            updateMoveActionsAvailability(playback);\n        });\n        hooks.beforeEntityPlayingProcessStart.tapPromise('AvailableOptionsPlugin', () => {\n            updateMoveActionsAvailability(playback);\n            return Promise.resolve();\n        });\n    }\n}\n//# sourceMappingURL=AvailableActionsPlugin.js.map","import { AudioPlayerStatus } from '@yandex-music-int/player-playback';\nimport { StagesOfPlayback } from '@yandex-music-int/player-entities';\nexport class TotalPlayedTimePlugin {\n    apply(params) {\n        const { playback, hooks } = params;\n        /**\n         * Изменение status на AudioPlayerStatus.PLAYING происходит сразу после старта проигрывания медиа-файла сущности\n         * и после выключения паузы. Поэтому время старта проигрывания фиксируем тут, а не в отдельном хуке afterMediaStartPlaying\n         */\n        playback.state.playerState.status.onChange(() => {\n            const { currentEntity } = playback.state.queueState;\n            if (currentEntity.value) {\n                switch (playback.state.playerState.status.value) {\n                    case AudioPlayerStatus.PLAYING:\n                        currentEntity.value.entity.saveTimeStageOfPlayback(StagesOfPlayback.PLAYING);\n                        break;\n                    case AudioPlayerStatus.PAUSED:\n                        currentEntity.value.entity.saveTimeStageOfPlayback(StagesOfPlayback.NOT_PLAYING);\n                        break;\n                }\n            }\n        });\n        /**\n         * Перед тем как начнется процесс воспроизведения сущности очищаем список\n         * временных отметок\n         */\n        hooks.beforeEntityPlayingProcessStart.tapPromise('TotalPlayedTimePlugin', () => {\n            const { currentEntity } = playback.state.queueState;\n            if (currentEntity.value) {\n                currentEntity.value.entity.clearTimeStagesOfPlayback();\n            }\n            return Promise.resolve();\n        });\n        /**\n         * Перед тем как переключимся на другую сущность запоминаем время, когда перестала играть текущая сущность\n         */\n        hooks.beforeEntityChange.tapPromise('TotalPlayedTimePlugin', () => {\n            const { currentEntity } = playback.state.queueState;\n            if (currentEntity.value) {\n                currentEntity.value.entity.saveTimeStageOfPlayback(StagesOfPlayback.NOT_PLAYING);\n            }\n            return Promise.resolve();\n        });\n        /**\n         * Перед тем как переключимся на другую сущность в другом контексте запоминаем время, когда перестала играть текущая сущность\n         */\n        hooks.beforeContextSet.tap('TotalPlayedTimePlugin', () => {\n            const { currentEntity } = playback.state.queueState;\n            if (currentEntity.value) {\n                currentEntity.value.entity.saveTimeStageOfPlayback(StagesOfPlayback.NOT_PLAYING);\n            }\n            return Promise.resolve();\n        });\n    }\n}\n//# sourceMappingURL=TotalPlayedTimePlugin.js.map","import { BaseEntities } from '@yandex-music-int/player-playback';\nexport function getAlbumId(entity) {\n    let albumId = undefined;\n    if (entity.data.type !== BaseEntities.Unloaded) {\n        const { data: { meta: { albums } } } = entity;\n        if (albums) {\n            const album = albums[0];\n            if (album) {\n                albumId = String(album.id);\n            }\n        }\n    }\n    return albumId;\n}\n//# sourceMappingURL=getAlbumId.js.map","export function createISOTimestamp() {\n    const date = new Date();\n    return date.toISOString();\n}\n//# sourceMappingURL=createISOTimestamp.js.map","import { isVibeContext } from '@yandex-music-int/player-contexts';\nimport { BaseEntities } from '@yandex-music-int/player-playback';\nimport { getAlbumId } from './getAlbumId.js';\nimport { createISOTimestamp } from './createISOTimestamp.js';\nconst deltaSec = 0.5;\nexport function createEntityPlay(params) {\n    const { contextEntityPair, totalPlayedSeconds, endPositionSeconds } = params;\n    const { entity, context } = contextEntityPair;\n    const trackId = String(entity.data.meta.id);\n    const albumId = getAlbumId(entity);\n    let trackLengthSeconds = 0;\n    if (entity.data.type !== BaseEntities.Unloaded) {\n        if (entity.data.meta.durationMs) {\n            trackLengthSeconds = entity.data.meta.durationMs / 1000;\n        }\n    }\n    let resultTotalPlayedSeconds = totalPlayedSeconds;\n    let resultEndPositionSeconds = endPositionSeconds;\n    /**\n     * если продолжительность трека примерно равна времени проигрывания звука,\n     * то приравниваем продолжительность трека к totalPlayedSeconds.\n     *\n     * Это нужно чтобы из-за небольшой погрешности не засчитать бесплатное прослушивание как платное\n     *\n     * неавторизованным пользователям или без подписки раздаём треки по 30 секунд, в аналитику уходит 30 секунд + какая-то погрешность, и в итоге прослушивание засчитывается как платное\n     */\n    if (Math.abs(trackLengthSeconds - totalPlayedSeconds) < deltaSec) {\n        resultTotalPlayedSeconds = trackLengthSeconds;\n    }\n    // если продолжительность трека примерно равна позиции, когда этот трек закончился\n    /**\n     * если продолжительность трека примерно равна позиции, когда этот трек закончился\n     * делаем это больше для красоты и точности\n     */\n    if (Math.abs(trackLengthSeconds - endPositionSeconds) < deltaSec) {\n        resultEndPositionSeconds = trackLengthSeconds;\n    }\n    const data = {\n        playId: entity.playId,\n        timestamp: createISOTimestamp(),\n        totalPlayedSeconds: resultTotalPlayedSeconds,\n        endPositionSeconds: resultEndPositionSeconds,\n        trackLengthSeconds,\n        trackId,\n        albumId,\n        from: context.from\n    };\n    // если трек играет из радио, то также отправим и sessionId\n    if (isVibeContext(context) && context.data.meta.session) {\n        data.radioSessionId = context.data.meta.session.radioSessionId;\n    }\n    const entityPlay = {\n        isSent: false,\n        data\n    };\n    return entityPlay;\n}\n//# sourceMappingURL=createEntityPlay.js.map","import { BaseException } from '@yandex-music-int/exception';\nexport class PlaysException extends BaseException {\n    name = 'PlaysException';\n    constructor(message, { code = 'E_PLAYS', ...restOptions } = {}) {\n        super(message, { code, ...restOptions });\n        // Set the prototype explicitly.\n        // @see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, PlaysException.prototype);\n    }\n}\n//# sourceMappingURL=PlaysException.js.map","import { v4 as uuidv4 } from 'uuid';\nimport { PlaysResource } from '@yandex-music-int/resource-collection';\nimport { isVibeContext } from '@yandex-music-int/player-contexts';\nimport { createEntityPlay } from './helpers/createEntityPlay.js';\nimport { createISOTimestamp } from './helpers/createISOTimestamp.js';\nimport { PlaysException } from './exceptions/playsException/PlaysException.js';\nexport class PlaysPlugin {\n    entityPlaysMap = {};\n    playsResource;\n    constructor(params) {\n        const { httpClient, playsResourceConfig } = params;\n        this.playsResource = new PlaysResource(httpClient, playsResourceConfig);\n    }\n    apply(params) {\n        const { hooks, playback } = params;\n        /**\n         * Отправляем plays перед началом процесса старта воспроизведения сущности\n         */\n        hooks.beforeEntityPlayingProcessStart.tapPromise('PlaysPlugin', () => {\n            return new Promise((resolve) => {\n                this.sendStartEntityPlay(playback, hooks);\n                // отправку plays о начале воспроизведения можно не дожидаться даже в случае воспроизведения радийного контекста, так как он не влияет на рекомендации\n                resolve();\n            });\n        });\n        /**\n         * TODO Отправляем plays об окончании сущности, в случае ошибки в процессе старта воспроизведения сущности\n         */\n        /**\n         * При переключении на новый контекст отправляем plays об окончании сущности, которую слушали последней в старом контексте.\n         */\n        hooks.beforeContextSet.tapPromise('PlaysPlugin', () => {\n            return new Promise((resolve) => {\n                if (playback.state.queueState.currentEntity.value && playback.state.currentContext.value) {\n                    // Если играет радио, то будем дожидаться успешной отправки plays, чтобы не баянить\n                    if (isVibeContext(playback.state.currentContext.value)) {\n                        this.sendEndEntityPlay(playback, hooks).then(resolve);\n                    }\n                    else {\n                        // в случае проигрывания любого другого контекста не дожидаемся успешной отправки plays, чтобы не замедлять старт трека\n                        this.sendEndEntityPlay(playback, hooks);\n                        resolve();\n                    }\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n        /**\n         * Отправляем plays об окончании сущности \"A\", при переключении на новую сущность \"B\" в рамках одного контекста\n         */\n        hooks.beforeEntityChange.tapPromise('PlaysPlugin', () => {\n            return new Promise((resolve) => {\n                if (playback.state.queueState.currentEntity.value && playback.state.currentContext.value) {\n                    // Если играет радио, то будем дожидаться успешной отправки plays, чтобы не баянить\n                    if (isVibeContext(playback.state.currentContext.value)) {\n                        this.sendEndEntityPlay(playback, hooks).then(resolve);\n                    }\n                    else {\n                        // в случае проигрывания любого другого контекста не дожидаемся успешной отправки plays, чтобы не замедлять старт трека\n                        this.sendEndEntityPlay(playback, hooks);\n                        resolve();\n                    }\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    sendStartEntityPlay(playback, hooks) {\n        return new Promise((resolve) => {\n            const contextEntityPair = playback.state.queueState.currentEntity.value;\n            try {\n                if (contextEntityPair) {\n                    contextEntityPair.entity.playId = uuidv4();\n                    const entityPlay = createEntityPlay({\n                        contextEntityPair,\n                        totalPlayedSeconds: 0,\n                        endPositionSeconds: 0\n                    });\n                    this.saveEntityPlay(entityPlay);\n                    this.playsResource\n                        .sendPlays({\n                        clientNow: createISOTimestamp(),\n                        plays: [entityPlay.data]\n                    })\n                        .then(() => {\n                        entityPlay.isSent = true;\n                        resolve();\n                    })\n                        .catch((error) => {\n                        /**\n                         * TODO\n                         * https://st.yandex-team.ru/MFRONT-6006\n                         */\n                        entityPlay.isSent = false;\n                        /**\n                         * В случае неудачного запроса только дергаем специальный хук, чтобы залогировать ошибку\n                         * Резолвим, чтобы не блокировать процесс воспроизведения\n                         */\n                        let contextId = '';\n                        let entityId = '';\n                        if (contextEntityPair) {\n                            contextId = contextEntityPair.context.data.meta.id;\n                            entityId = contextEntityPair.entity.data.meta.id;\n                        }\n                        hooks.afterError.promise(new PlaysException('Error while sending plays', {\n                            cause: error,\n                            data: {\n                                contextId,\n                                entityId\n                            }\n                        }));\n                        resolve();\n                    });\n                }\n                else {\n                    resolve();\n                }\n            }\n            catch (error) {\n                /**\n                 * В случае другой ошибки только дергаем специальный хук, чтобы залогировать ошибку\n                 * Резолвим, чтобы не блокировать процесс воспроизведения\n                 */\n                let contextId = '';\n                let entityId = '';\n                if (contextEntityPair) {\n                    contextId = contextEntityPair.context.data.meta.id;\n                    entityId = contextEntityPair.entity.data.meta.id;\n                }\n                hooks.afterError.promise(new PlaysException('Error while sending plays', {\n                    cause: error,\n                    data: {\n                        contextId,\n                        entityId\n                    }\n                }));\n                resolve();\n            }\n        });\n    }\n    sendEndEntityPlay(playback, hooks) {\n        return new Promise((resolve) => {\n            const contextEntityPair = playback.state.queueState.currentEntity.value;\n            try {\n                if (contextEntityPair) {\n                    let entityPlay;\n                    /**\n                     * Случай, когда скип произошел раньше запуска проигрывания\n                     */\n                    const totalPlayedSeconds = contextEntityPair.entity.totalPlayedSeconds;\n                    if (totalPlayedSeconds === 0) {\n                        entityPlay = createEntityPlay({\n                            contextEntityPair,\n                            totalPlayedSeconds: 0.1,\n                            endPositionSeconds: 0.1\n                        });\n                    }\n                    else {\n                        entityPlay = createEntityPlay({\n                            contextEntityPair,\n                            totalPlayedSeconds,\n                            endPositionSeconds: playback.state.playerState.progress.value.position\n                        });\n                    }\n                    this.saveEntityPlay(entityPlay);\n                    this.playsResource\n                        .sendPlays({\n                        clientNow: createISOTimestamp(),\n                        plays: [entityPlay.data]\n                    })\n                        .then(() => {\n                        entityPlay.isSent = true;\n                        resolve();\n                    })\n                        .catch((error) => {\n                        /**\n                         * TODO\n                         * https://st.yandex-team.ru/MFRONT-6006\n                         */\n                        entityPlay.isSent = false;\n                        /**\n                         * В случае неудачного запроса только дергаем специальный хук, чтобы залогировать ошибку\n                         * Резолвим, чтобы не блокировать процесс воспроизведения\n                         */\n                        let contextId = '';\n                        let entityId = '';\n                        if (contextEntityPair) {\n                            contextId = contextEntityPair.context.data.meta.id;\n                            entityId = contextEntityPair.entity.data.meta.id;\n                        }\n                        hooks.afterError.promise(new PlaysException('Error while sending plays', {\n                            cause: error,\n                            data: {\n                                contextId,\n                                entityId\n                            }\n                        }));\n                        resolve();\n                    });\n                }\n                else {\n                    resolve();\n                }\n            }\n            catch (error) {\n                /**\n                 * В случае другой ошибки только дергаем специальный хук, чтобы залогировать ошибку\n                 * Резолвим, чтобы не блокировать процесс воспроизведения\n                 */\n                let contextId = '';\n                let entityId = '';\n                if (contextEntityPair) {\n                    contextId = contextEntityPair.context.data.meta.id;\n                    entityId = contextEntityPair.entity.data.meta.id;\n                }\n                hooks.afterError.promise(new PlaysException('Error while sending plays', {\n                    cause: error,\n                    data: {\n                        contextId,\n                        entityId\n                    }\n                }));\n                resolve();\n            }\n        });\n    }\n    saveEntityPlay(entityPlay) {\n        const playsArray = this.entityPlaysMap[entityPlay.data.playId];\n        if (playsArray === undefined) {\n            this.entityPlaysMap[entityPlay.data.playId] = [entityPlay];\n        }\n        else {\n            playsArray.push(entityPlay);\n        }\n    }\n}\n//# sourceMappingURL=PlaysPlugin.js.map","export var MediaAction;\n(function (MediaAction) {\n    MediaAction[\"PLAY\"] = \"play\";\n    MediaAction[\"PAUSE\"] = \"pause\";\n    MediaAction[\"NEXT\"] = \"nexttrack\";\n    MediaAction[\"PREV\"] = \"previoustrack\";\n    MediaAction[\"SEEK\"] = \"seekto\";\n    MediaAction[\"STOP\"] = \"stop\";\n})(MediaAction || (MediaAction = {}));\n//# sourceMappingURL=MediaAction.js.map","export const METADATA_ARTWORK_SIZES = [30, 50, 80, 100, 200, 300, 400];\n//# sourceMappingURL=matadataArtworkSizes.js.map","import { MediaAction } from '../types/MediaAction.js';\nexport const MEDIA_HANDLERS_SPECIAL = [\n    MediaAction.PLAY,\n    MediaAction.PAUSE,\n    MediaAction.STOP,\n    MediaAction.SEEK\n];\n//# sourceMappingURL=mediaHandlersSpecial.js.map","import { AudioPlayerEvent } from '@yandex-music-int/player-playback';\nimport { MediaAction } from './types/MediaAction.js';\nimport { METADATA_ARTWORK_SIZES } from './constants/matadataArtworkSizes.js';\nimport { MEDIA_HANDLERS_SPECIAL } from './constants/mediaHandlersSpecial.js';\nexport class MediaControlsPlugin {\n    browserName;\n    browserVersion;\n    constructor({ browserName, browserVersion }) {\n        this.browserName = browserName;\n        this.browserVersion = browserVersion;\n    }\n    isSupported() {\n        return 'mediaSession' in window.navigator && 'MediaMetadata' in window;\n    }\n    handleMediaActionEvents(event, playback) {\n        const { action } = event;\n        switch (action) {\n            case MediaAction.PLAY: {\n                playback.resume();\n                break;\n            }\n            case MediaAction.PAUSE:\n            case MediaAction.STOP: {\n                playback.pause();\n                break;\n            }\n            case MediaAction.NEXT: {\n                playback.moveForward();\n                break;\n            }\n            case MediaAction.PREV: {\n                playback.moveBackward();\n                break;\n            }\n            case MediaAction.SEEK: {\n                const { seekTime } = event;\n                if (seekTime) {\n                    playback.setProgress(seekTime);\n                }\n                break;\n            }\n        }\n    }\n    prepareMetadata(track) {\n        const { title, artists = [], albums, coverUri } = track;\n        const artist = artists.map((artistEntity) => artistEntity.name).join(', ');\n        const album = albums?.[0]?.title;\n        let artwork;\n        if (coverUri) {\n            artwork = METADATA_ARTWORK_SIZES.map((size) => {\n                let sizes = `${size}x${size}`;\n                // TODO: убрать хардкод, когда в Сафари починят размытие изображений\n                // Сафари шакалит изображения. Поэтому для него делаем картинки в лучшем качестве (Version 17.1)\n                if (this.browserName === 'Safari') {\n                    sizes = `${size * 2}x${size * 2}`;\n                }\n                return {\n                    sizes,\n                    src: `https://${coverUri.replace('%%', sizes)}`,\n                    type: 'image/jpg'\n                };\n            });\n        }\n        return {\n            title,\n            artist,\n            album,\n            artwork\n        };\n    }\n    updateMetadata(track) {\n        if (!track) {\n            return;\n        }\n        const metadata = this.prepareMetadata(track);\n        window.navigator.mediaSession.metadata = new MediaMetadata(metadata);\n    }\n    handlePlayerEvents(playback) {\n        playback.state.playerState.event.onChange(() => {\n            if (playback.state.playerState.event.value === AudioPlayerEvent.START ||\n                playback.state.playerState.event.value === AudioPlayerEvent.UPDATING_PROGRESS) {\n                this.updateMetadata(playback.state.queueState.currentEntity.value?.entity.data.meta);\n                MEDIA_HANDLERS_SPECIAL.forEach((handlerName) => {\n                    try {\n                        window.navigator.mediaSession.setActionHandler(handlerName, (event) => this.handleMediaActionEvents(event, playback));\n                    }\n                    catch {\n                        console.log(`The media session action \"${handlerName}\" is not supported yet.`);\n                    }\n                });\n            }\n        });\n        let unsubscribeFromMoveBackwardChange;\n        let unsubscribeFromMoveForwardChange;\n        playback.state.currentContext.onChange(() => {\n            unsubscribeFromMoveBackwardChange?.();\n            unsubscribeFromMoveForwardChange?.();\n            unsubscribeFromMoveBackwardChange =\n                playback.state.currentContext.value?.availableActions.moveBackward.onChange(() => {\n                    const canMoveBackward = playback.state.currentContext.value?.availableActions.moveBackward.value ?? false;\n                    window.navigator.mediaSession.setActionHandler(MediaAction.PREV, canMoveBackward\n                        ? (event) => this.handleMediaActionEvents(event, playback)\n                        : null);\n                });\n            unsubscribeFromMoveForwardChange =\n                playback.state.currentContext.value?.availableActions.moveForward.onChange(() => {\n                    const canMoveForward = playback.state.currentContext.value?.availableActions.moveForward.value ?? false;\n                    window.navigator.mediaSession.setActionHandler(MediaAction.NEXT, canMoveForward\n                        ? (event) => this.handleMediaActionEvents(event, playback)\n                        : null);\n                });\n        });\n    }\n    apply(params) {\n        const { playback } = params;\n        if (this.isSupported()) {\n            this.handlePlayerEvents(playback);\n        }\n    }\n}\n//# sourceMappingURL=MediaControlsPlugin.js.map","import { BaseException } from '@yandex-music-int/exception';\nexport class LoggerPlugin {\n    logger;\n    constructor(params) {\n        const { logger } = params;\n        this.logger = logger;\n    }\n    apply(params) {\n        const { hooks } = params;\n        hooks.afterError.tapPromise('LoggerPlugin', (error) => {\n            let resultError;\n            if (error instanceof BaseException) {\n                resultError = error;\n            }\n            else {\n                resultError = new BaseException('Error in Sonata player', {\n                    code: 'E_SONATA',\n                    cause: error\n                });\n            }\n            resultError.name = `[Sonata] ${resultError.name}`;\n            this.logger.error(resultError, {\n                data: resultError.data,\n                code: resultError.code,\n                cause: resultError.cause\n            });\n            return Promise.resolve();\n        });\n    }\n}\n//# sourceMappingURL=LoggerPlugin.js.map","export { ApplyContextPlugin } from './ApplyContextPlugin/ApplyContextPlugin.js';\nexport { AvailableActionsPlugin } from './AvailableActionsPlugin/AvailableActionsPlugin.js';\nexport { TotalPlayedTimePlugin } from './TotalPlayedTimePlugin/TotalPlayedTimePlugin.js';\nexport { PlaysPlugin } from './PlaysPlugin/PlaysPlugin.js';\nexport { MediaControlsPlugin } from './MediaControlsPlugin/MediaControlsPlugin.js';\nexport { LoggerPlugin } from './LoggerPlugin/LoggerPlugin.js';\n//# sourceMappingURL=index.js.map","// @ts-nocheck\nexport function createMd5(string, key) {\n    const fromCharCode = String.fromCharCode;\n    function RotateLeft(lValue, iShiftBits) {\n        return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));\n    }\n    function AddUnsigned(lX, lY) {\n        let lX4, lY4, lX8, lY8, lResult;\n        lX8 = lX & 0x80000000;\n        lY8 = lY & 0x80000000;\n        lX4 = lX & 0x40000000;\n        lY4 = lY & 0x40000000;\n        lResult = (lX & 0x3fffffff) + (lY & 0x3fffffff);\n        if (lX4 & lY4) {\n            return lResult ^ 0x80000000 ^ lX8 ^ lY8;\n        }\n        if (lX4 | lY4) {\n            if (lResult & 0x40000000) {\n                return lResult ^ 0xc0000000 ^ lX8 ^ lY8;\n            }\n            return lResult ^ 0x40000000 ^ lX8 ^ lY8;\n        }\n        return lResult ^ lX8 ^ lY8;\n    }\n    function F(x, y, z) {\n        return (x & y) | (~x & z);\n    }\n    function G(x, y, z) {\n        return (x & z) | (y & ~z);\n    }\n    function H(x, y, z) {\n        return x ^ y ^ z;\n    }\n    function I(x, y, z) {\n        return y ^ (x | ~z);\n    }\n    function FF(a, b, c, d, x, s, ac) {\n        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));\n        return AddUnsigned(RotateLeft(a, s), b);\n    }\n    function GG(a, b, c, d, x, s, ac) {\n        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));\n        return AddUnsigned(RotateLeft(a, s), b);\n    }\n    function HH(a, b, c, d, x, s, ac) {\n        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));\n        return AddUnsigned(RotateLeft(a, s), b);\n    }\n    function II(a, b, c, d, x, s, ac) {\n        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));\n        return AddUnsigned(RotateLeft(a, s), b);\n    }\n    function ConvertToWordArray(string) {\n        let lWordCount;\n        const lMessageLength = string.length;\n        const lNumberOfWords_temp1 = lMessageLength + 8;\n        const lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;\n        const lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;\n        const lWordArray = Array(lNumberOfWords - 1);\n        let lBytePosition = 0;\n        let lByteCount = 0;\n        while (lByteCount < lMessageLength) {\n            lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n            lBytePosition = (lByteCount % 4) * 8;\n            lWordArray[lWordCount] = lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition);\n            lByteCount++;\n        }\n        lWordCount = (lByteCount - (lByteCount % 4)) / 4;\n        lBytePosition = (lByteCount % 4) * 8;\n        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);\n        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;\n        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;\n        return lWordArray;\n    }\n    function WordToHex(lValue) {\n        let WordToHexValue = '', WordToHexValue_temp = '', lByte, lCount;\n        for (lCount = 0; lCount <= 3; lCount++) {\n            lByte = (lValue >>> (lCount * 8)) & 255;\n            WordToHexValue_temp = `0${lByte.toString(16)}`;\n            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);\n        }\n        return WordToHexValue;\n    }\n    function Utf8Encode(string) {\n        string = key + string.replace(/\\r\\n/g, '\\n');\n        let utftext = '';\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n            if (c < 128) {\n                utftext += fromCharCode(c);\n            }\n            else if (c > 127 && c < 2048) {\n                utftext += fromCharCode((c >> 6) | 192);\n                utftext += fromCharCode((c & 63) | 128);\n            }\n            else {\n                utftext += fromCharCode((c >> 12) | 224);\n                utftext += fromCharCode(((c >> 6) & 63) | 128);\n                utftext += fromCharCode((c & 63) | 128);\n            }\n        }\n        return utftext;\n    }\n    let x = [];\n    let k, AA, BB, CC, DD, a, b, c, d;\n    const S11 = 7, S12 = 12, S13 = 17, S14 = 22;\n    const S21 = 5, S22 = 9, S23 = 14, S24 = 20;\n    const S31 = 4, S32 = 11, S33 = 16, S34 = 23;\n    const S41 = 6, S42 = 10, S43 = 15, S44 = 21;\n    string = Utf8Encode(string);\n    x = ConvertToWordArray(string);\n    a = 0x67452301;\n    b = 0xefcdab89;\n    c = 0x98badcfe;\n    d = 0x10325476;\n    for (k = 0; k < x.length; k += 16) {\n        AA = a;\n        BB = b;\n        CC = c;\n        DD = d;\n        a = FF(a, b, c, d, x[k + 0], S11, 0xd76aa478);\n        d = FF(d, a, b, c, x[k + 1], S12, 0xe8c7b756);\n        c = FF(c, d, a, b, x[k + 2], S13, 0x242070db);\n        b = FF(b, c, d, a, x[k + 3], S14, 0xc1bdceee);\n        a = FF(a, b, c, d, x[k + 4], S11, 0xf57c0faf);\n        d = FF(d, a, b, c, x[k + 5], S12, 0x4787c62a);\n        c = FF(c, d, a, b, x[k + 6], S13, 0xa8304613);\n        b = FF(b, c, d, a, x[k + 7], S14, 0xfd469501);\n        a = FF(a, b, c, d, x[k + 8], S11, 0x698098d8);\n        d = FF(d, a, b, c, x[k + 9], S12, 0x8b44f7af);\n        c = FF(c, d, a, b, x[k + 10], S13, 0xffff5bb1);\n        b = FF(b, c, d, a, x[k + 11], S14, 0x895cd7be);\n        a = FF(a, b, c, d, x[k + 12], S11, 0x6b901122);\n        d = FF(d, a, b, c, x[k + 13], S12, 0xfd987193);\n        c = FF(c, d, a, b, x[k + 14], S13, 0xa679438e);\n        b = FF(b, c, d, a, x[k + 15], S14, 0x49b40821);\n        a = GG(a, b, c, d, x[k + 1], S21, 0xf61e2562);\n        d = GG(d, a, b, c, x[k + 6], S22, 0xc040b340);\n        c = GG(c, d, a, b, x[k + 11], S23, 0x265e5a51);\n        b = GG(b, c, d, a, x[k + 0], S24, 0xe9b6c7aa);\n        a = GG(a, b, c, d, x[k + 5], S21, 0xd62f105d);\n        d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);\n        c = GG(c, d, a, b, x[k + 15], S23, 0xd8a1e681);\n        b = GG(b, c, d, a, x[k + 4], S24, 0xe7d3fbc8);\n        a = GG(a, b, c, d, x[k + 9], S21, 0x21e1cde6);\n        d = GG(d, a, b, c, x[k + 14], S22, 0xc33707d6);\n        c = GG(c, d, a, b, x[k + 3], S23, 0xf4d50d87);\n        b = GG(b, c, d, a, x[k + 8], S24, 0x455a14ed);\n        a = GG(a, b, c, d, x[k + 13], S21, 0xa9e3e905);\n        d = GG(d, a, b, c, x[k + 2], S22, 0xfcefa3f8);\n        c = GG(c, d, a, b, x[k + 7], S23, 0x676f02d9);\n        b = GG(b, c, d, a, x[k + 12], S24, 0x8d2a4c8a);\n        a = HH(a, b, c, d, x[k + 5], S31, 0xfffa3942);\n        d = HH(d, a, b, c, x[k + 8], S32, 0x8771f681);\n        c = HH(c, d, a, b, x[k + 11], S33, 0x6d9d6122);\n        b = HH(b, c, d, a, x[k + 14], S34, 0xfde5380c);\n        a = HH(a, b, c, d, x[k + 1], S31, 0xa4beea44);\n        d = HH(d, a, b, c, x[k + 4], S32, 0x4bdecfa9);\n        c = HH(c, d, a, b, x[k + 7], S33, 0xf6bb4b60);\n        b = HH(b, c, d, a, x[k + 10], S34, 0xbebfbc70);\n        a = HH(a, b, c, d, x[k + 13], S31, 0x289b7ec6);\n        d = HH(d, a, b, c, x[k + 0], S32, 0xeaa127fa);\n        c = HH(c, d, a, b, x[k + 3], S33, 0xd4ef3085);\n        b = HH(b, c, d, a, x[k + 6], S34, 0x4881d05);\n        a = HH(a, b, c, d, x[k + 9], S31, 0xd9d4d039);\n        d = HH(d, a, b, c, x[k + 12], S32, 0xe6db99e5);\n        c = HH(c, d, a, b, x[k + 15], S33, 0x1fa27cf8);\n        b = HH(b, c, d, a, x[k + 2], S34, 0xc4ac5665);\n        a = II(a, b, c, d, x[k + 0], S41, 0xf4292244);\n        d = II(d, a, b, c, x[k + 7], S42, 0x432aff97);\n        c = II(c, d, a, b, x[k + 14], S43, 0xab9423a7);\n        b = II(b, c, d, a, x[k + 5], S44, 0xfc93a039);\n        a = II(a, b, c, d, x[k + 12], S41, 0x655b59c3);\n        d = II(d, a, b, c, x[k + 3], S42, 0x8f0ccc92);\n        c = II(c, d, a, b, x[k + 10], S43, 0xffeff47d);\n        b = II(b, c, d, a, x[k + 1], S44, 0x85845dd1);\n        a = II(a, b, c, d, x[k + 8], S41, 0x6fa87e4f);\n        d = II(d, a, b, c, x[k + 15], S42, 0xfe2ce6e0);\n        c = II(c, d, a, b, x[k + 6], S43, 0xa3014314);\n        b = II(b, c, d, a, x[k + 13], S44, 0x4e0811a1);\n        a = II(a, b, c, d, x[k + 4], S41, 0xf7537e82);\n        d = II(d, a, b, c, x[k + 11], S42, 0xbd3af235);\n        c = II(c, d, a, b, x[k + 2], S43, 0x2ad7d2bb);\n        b = II(b, c, d, a, x[k + 9], S44, 0xeb86d391);\n        a = AddUnsigned(a, AA);\n        b = AddUnsigned(b, BB);\n        c = AddUnsigned(c, CC);\n        d = AddUnsigned(d, DD);\n    }\n    const temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);\n    return temp.toLowerCase();\n}\n//# sourceMappingURL=createMd5.js.map","import { createMd5 } from './createMd5.js';\nexport function createSrcLink(params) {\n    const { srcData, secretKey, trackId } = params;\n    const token = createMd5(srcData.path.substr(1) + srcData.s, secretKey);\n    const urlSuffix = `/get-mp3/${token}/${srcData.ts}${srcData.path}?track-id=${trackId}&play=false`;\n    return `https://${srcData.host}${urlSuffix}`;\n}\n//# sourceMappingURL=createSrcLink.js.map","export function createFormatFlags(formatFlags) {\n    const formatFlagsArray = [];\n    for (const key of Object.keys(formatFlags)) {\n        if (key === 'codec') {\n            const codec = formatFlags[key];\n            if (codec) {\n                formatFlagsArray.push(codec);\n            }\n        }\n        else {\n            formatFlagsArray.push(key);\n        }\n    }\n    return formatFlagsArray.length ? formatFlagsArray.join(',') : undefined;\n}\n//# sourceMappingURL=createFormatFlags.js.map","/**\n * Про создание подписи\n * // https://wiki.yandex-team.ru/muz/dev/music-evolution/specs/general/200317-1-potokovyjj-striming/#novyeparametrydownload-info\n *\n * Код создания подписи - копия https://a.yandex-team.ru/arcadia/music/frontend/musfront/lib/ui/api-v21/src/lib/data/createSign.js\n */\nexport async function createSign(params) {\n    const { secretKey, trackId, tsInSeconds } = params;\n    const encoder = new TextEncoder();\n    const hmac = { name: 'HMAC', hash: { name: 'SHA-256' } };\n    const bufKey = encoder.encode(secretKey);\n    return crypto.subtle.importKey('raw', bufKey, hmac, true, ['sign', 'verify']).then(async (encKey) => {\n        const rawMessage = `${trackId}${tsInSeconds}`;\n        const bufMessage = encoder.encode(rawMessage);\n        return crypto.subtle.sign('HMAC', encKey, bufMessage).then((arrayBuffer) => {\n            const uint8Array = new Uint8Array(arrayBuffer);\n            const sign = btoa(String.fromCharCode(...uint8Array));\n            return sign;\n        });\n    });\n}\n//# sourceMappingURL=createSign.js.map","export function createTsInSeconds() {\n    return Math.floor(Date.now() / 1000);\n}\n//# sourceMappingURL=createTsInSeconds.js.map","import { BaseException } from '@yandex-music-int/exception';\nexport class DownloadInfoMediaProviderException extends BaseException {\n    name = 'DownloadInfoMediaProviderException';\n    constructor(message, { code = 'E_DOWNLOADINFO_MEDIA_PROVIDER', ...restOptions } = {}) {\n        super(message, { code, ...restOptions });\n        // Set the prototype explicitly.\n        // @see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, DownloadInfoMediaProviderException.prototype);\n    }\n}\n//# sourceMappingURL=DownloadInfoMediaProviderException.js.map","import { TracksResource } from '@yandex-music-int/resource-collection';\nimport { createSrcLink } from './helpers/createSrcLink.js';\nimport { createFormatFlags } from './helpers/createFormatFlags.js';\nimport { createSign } from './helpers/createSign.js';\nimport { createTsInSeconds } from './helpers/createTsInSeconds.js';\nimport { DownloadInfoMediaProviderException } from './exceptions/downloadInfoMediaProviderException/DownloadInfoMediaProviderException.js';\nexport class DownloadInfoMediaProvider {\n    secretKey;\n    resource;\n    constructor(params) {\n        const { httpClient, config } = params;\n        this.resource = new TracksResource(httpClient, {\n            params: config.params,\n            prefixUrl: config.prefixUrl,\n            overembed: config.overembed,\n            externalDomain: config.externalDomain\n        });\n        this.secretKey = config.secretKey;\n    }\n    async getSrc(params) {\n        try {\n            const { downloadInfoParams: { formatFlags = {}, direct, preview, requireMp3Link, canUseStreaming, debug, isAliceRequester }, entity } = params;\n            const { id } = entity.data.meta;\n            const flags = createFormatFlags(formatFlags);\n            const tsInSeconds = createTsInSeconds();\n            return await createSign({\n                trackId: id,\n                secretKey: this.secretKey,\n                tsInSeconds\n            })\n                .then(async (sign) => {\n                // TODO разобраться как получать aac кодек, и вообще как работают комбинации параметров в download-info\n                return this.resource\n                    .getStorageData({\n                    formatFlags: flags,\n                    direct,\n                    preview,\n                    canUseStreaming,\n                    sign,\n                    tsInSeconds,\n                    requireMp3Link,\n                    isAliceRequester,\n                    debug,\n                    trackId: String(id)\n                })\n                    .then(async (storagesData) => {\n                    // TODO пока из массива возможных ссылок на storage ничего не выбираем, а берем просто первую\n                    const storageData = storagesData[0];\n                    if (storageData) {\n                        return this.resource\n                            .getSrcData({\n                            storageUrl: storageData.downloadInfoUrl\n                        })\n                            .then((srcData) => {\n                            const srcLink = createSrcLink({\n                                trackId: id,\n                                srcData,\n                                secretKey: this.secretKey\n                            });\n                            return srcLink;\n                        })\n                            .catch((error) => {\n                            throw new DownloadInfoMediaProviderException('Error in getSrcData', {\n                                code: 'E_GET_SRC_DATA',\n                                cause: error,\n                                data: {\n                                    trackId: id\n                                }\n                            });\n                        });\n                    }\n                    return Promise.reject(new DownloadInfoMediaProviderException('No storage url for entity', {\n                        code: 'E_NO_STORAGE_URL',\n                        data: {\n                            trackId: id\n                        }\n                    }));\n                })\n                    .catch((error) => {\n                    throw new DownloadInfoMediaProviderException('Failed to get storages urls for entity', {\n                        code: 'E_GET_STORAGE_URL',\n                        cause: error,\n                        data: {\n                            trackId: id\n                        }\n                    });\n                });\n            })\n                .catch((error) => {\n                throw new DownloadInfoMediaProviderException('Failed to create sign', {\n                    code: 'E_CREATE_SIGN',\n                    cause: error,\n                    data: {\n                        trackId: id\n                    }\n                });\n            });\n        }\n        catch (error) {\n            return Promise.reject(new DownloadInfoMediaProviderException('Error in getSrc method', {\n                cause: error\n            }));\n        }\n    }\n}\n//# sourceMappingURL=DownloadInfoMediaProvider.js.map","import { BaseException } from '@yandex-music-int/exception';\nexport class YaMusicEntityProviderException extends BaseException {\n    name = 'YaMusicEntityProviderException';\n    constructor(message, { code = 'E_YAMUSIC_ENTITY_PROVIDER', ...restOptions } = {}) {\n        super(message, { code, ...restOptions });\n        // Set the prototype explicitly.\n        // @see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, YaMusicEntityProviderException.prototype);\n    }\n}\n//# sourceMappingURL=YaMusicEntityProviderException.js.map","import { TracksResource } from '@yandex-music-int/resource-collection';\nimport { YaMusicEntities } from '@yandex-music-int/player-entities';\nimport { YaMusicEntityProviderException } from './exceptions/YaMusicEntityProviderException.js';\nexport class YaMusicEntityProvider {\n    resource;\n    constructor(params) {\n        const { httpClient, config } = params;\n        this.resource = new TracksResource(httpClient, {\n            params: config.params,\n            prefixUrl: config.prefixUrl\n        });\n    }\n    async loadEntities(ids) {\n        return this.resource\n            .getTracksMeta({\n            trackIds: ids\n        })\n            .then((entitiesMeta) => {\n            const result = [];\n            for (const entityMeta of entitiesMeta) {\n                result.push({\n                    type: YaMusicEntities.Unknown,\n                    meta: entityMeta\n                });\n            }\n            return result;\n        })\n            .catch((error) => {\n            throw new YaMusicEntityProviderException('Failed to get entities meta', {\n                cause: error\n            });\n        });\n    }\n}\n//# sourceMappingURL=YaMusicEntityProvider.js.map","export { DownloadInfoMediaProvider } from './mediaProviders/downloadInfoMediaProvider/DownloadInfoMediaProvider.js';\nexport { YaMusicEntityProvider } from './yaMusicEntityProvider/YaMusicEntityProvider.js';\n//# sourceMappingURL=index.js.map","'use client';\n\nimport { observer } from 'mobx-react-lite';\nimport { ReactElement, useEffect, useMemo } from 'react';\n\nimport { AudioCoreHtml5 } from '@yandex-music-int/audio-core-html5';\nimport { YaMusicContextData, YaMusicContextFactory, YaMusicContext } from '@yandex-music-int/player-contexts';\nimport { YaMusicEntityData, YaMusicEntityFactory, YaMusicEntity } from '@yandex-music-int/player-entities';\nimport {\n    ApplyContextPlugin,\n    AvailableActionsPlugin,\n    PlaysPlugin,\n    TotalPlayedTimePlugin,\n    MediaControlsPlugin,\n    LoggerPlugin\n} from '@yandex-music-int/player-plugins';\nimport { DownloadInfoMediaProvider, YaMusicEntityProvider } from '@yandex-music-int/player-providers';\nimport { SonataPlayer } from '@yandex-music-int/sonata';\n\nimport { getExternalApiClientName } from '@/shared/api/index.js';\nimport {\n    CONTAINER_AUTHORIZATION,\n    CONTAINER_CONFIG_TOKEN,\n    CONTAINER_HTTP_CLIENT_TOKEN,\n    getTLDHost,\n    SonataContext,\n    StorageKeys,\n    useContainer,\n    useStore,\n    WithChildren,\n    UserAgent,\n    CONTAINER_STORAGE,\n    useLogger\n} from '@/shared/lib/index.js';\n\ninterface Props extends WithChildren {\n    hostTld: string;\n    userAgent: UserAgent;\n}\n\nlet singletonSonata: SonataPlayer<YaMusicContextData, YaMusicEntityData, YaMusicContext, YaMusicEntity> | null = null;\n\nexport const SonataProvider = observer(({ children, hostTld, userAgent }: Props): ReactElement => {\n    const container = useContainer();\n    const { sonataState } = useStore();\n    const logger = useLogger();\n    const storage = container.get(CONTAINER_STORAGE);\n\n    const sonata = useMemo(() => {\n        if (typeof window === 'undefined') {\n            return null;\n        }\n\n        if (singletonSonata) {\n            return singletonSonata;\n        }\n\n        const config = container.get(CONTAINER_CONFIG_TOKEN);\n        const httpClientFactory = container.get(CONTAINER_HTTP_CLIENT_TOKEN);\n        const httpClient = httpClientFactory({ credentials: 'include' });\n        const authorization = container.get(CONTAINER_AUTHORIZATION);\n\n        const contextFactory = new YaMusicContextFactory({\n            httpClient,\n            logger,\n            config: {\n                params: {\n                    common: {\n                        client: getExternalApiClientName(),\n                        language: config.language,\n                        oauth: authorization.token\n                    }\n                },\n                prefixUrl: getTLDHost(config.player.prefixUrl, hostTld)\n            }\n        });\n\n        const entityFactory = new YaMusicEntityFactory();\n\n        const mediaProvider = new DownloadInfoMediaProvider({\n            httpClient,\n            config: {\n                params: {\n                    common: {\n                        client: getExternalApiClientName(),\n                        language: config.language,\n                        oauth: authorization.token\n                    }\n                },\n                prefixUrl: getTLDHost(config.player.prefixUrl, hostTld),\n                secretKey: config.player.secretKey,\n                overembed: config.player.overembed,\n                externalDomain: config.player.externalDomain\n            }\n        });\n\n        const entityProvider = new YaMusicEntityProvider({\n            httpClient,\n            config: {\n                params: {\n                    common: {\n                        client: getExternalApiClientName(),\n                        language: config.language,\n                        oauth: authorization.token\n                    }\n                },\n                prefixUrl: getTLDHost(config.player.prefixUrl, hostTld)\n            }\n        });\n\n        const audioCore = new AudioCoreHtml5();\n\n        singletonSonata = new SonataPlayer<YaMusicContextData, YaMusicEntityData, YaMusicContext, YaMusicEntity>({\n            contextFactory,\n            entityFactory,\n            audioCore,\n            mediaProvider,\n            entityProvider,\n            windowPaginationConfig: {\n                windowSize: 30,\n                setupQueueWindowSize: 80\n            },\n            plugins: [\n                new AvailableActionsPlugin(),\n                new ApplyContextPlugin(),\n                new TotalPlayedTimePlugin(),\n                new PlaysPlugin({\n                    httpClient,\n                    playsResourceConfig: {\n                        params: {\n                            common: {\n                                client: getExternalApiClientName(),\n                                language: config.language,\n                                oauth: authorization.token\n                            }\n                        },\n                        prefixUrl: getTLDHost(config.player.prefixUrl, hostTld)\n                    }\n                }),\n                new MediaControlsPlugin({\n                    browserName: userAgent.browserName,\n                    browserVersion: userAgent.browserVersion\n                }),\n                new LoggerPlugin({ logger })\n            ]\n        });\n\n        return singletonSonata;\n    }, [container, hostTld, userAgent, logger]);\n\n    useEffect(() => {\n        const unsubscribeFromStatusChange = sonata?.state.playerState.status.onChange(() => {\n            const currentEntity = sonata.state.queueState.currentEntity.value;\n            const currentContextType = currentEntity?.context.data.type;\n            const currentContextId = currentEntity?.context.data.meta.id;\n            sonataState.setContextId(currentContextId);\n            sonataState.setContextType(currentContextType);\n        });\n\n        const unsubscribeFromEventChange = sonata?.state.playerState.event.onChange(() => {\n            const currentEntity = sonata.state.queueState.currentEntity.value;\n            sonataState.setEntityMeta(currentEntity?.entity.data.meta ?? null);\n            sonataState.setStatus(sonata.state.playerState.status.value);\n        });\n\n        let unsubscribeFromMoveBackwardChange: (() => void) | undefined;\n        let unsubscribeFromMoveForwardChange: (() => void) | undefined;\n\n        const unsubscribeFromContextChange = sonata?.state.currentContext.onChange(() => {\n            unsubscribeFromMoveBackwardChange?.();\n            unsubscribeFromMoveForwardChange?.();\n\n            unsubscribeFromMoveBackwardChange =\n                sonata?.state.currentContext.value?.availableActions.moveBackward.onChange(() => {\n                    const canMoveBackward =\n                        sonata?.state.currentContext.value?.availableActions.moveBackward.value ?? false;\n                    sonataState.setCanMoveBackward(canMoveBackward);\n                });\n\n            unsubscribeFromMoveForwardChange =\n                sonata?.state.currentContext.value?.availableActions.moveForward.onChange(() => {\n                    const canMoveForward =\n                        sonata?.state.currentContext.value?.availableActions.moveForward.value ?? false;\n                    sonataState.setCanMoveForward(canMoveForward);\n                });\n        });\n\n        const unsubscribeFromVolumeChange = sonata?.state.playerState.volume.onChange(() => {\n            const newVolume = sonata.state.playerState.volume.value;\n\n            if (typeof newVolume === 'number') {\n                sonataState.setVolume(newVolume);\n            }\n        });\n\n        return () => {\n            unsubscribeFromEventChange?.();\n            unsubscribeFromStatusChange?.();\n            unsubscribeFromContextChange?.();\n            unsubscribeFromVolumeChange?.();\n        };\n    }, [sonata, sonataState]);\n\n    useEffect(() => {\n        const volume: number = storage.get(StorageKeys.YmPlayerVolume);\n\n        if (typeof volume === 'number') {\n            sonata?.setVolume(volume);\n            sonataState.setVolume(volume);\n        } else {\n            sonata?.setVolume(1);\n            sonataState.setVolume(1);\n        }\n    }, [storage, sonata, sonataState]);\n\n    return <SonataContext.Provider value={sonata}>{children}</SonataContext.Provider>;\n});\n","import { SnapshotIn } from 'mobx-state-tree';\n\nimport { AudioPlayerStatus } from '@yandex-music-int/sonata';\n\nimport { LoadingState } from '@/shared/lib/index.js';\n\nimport { RootModel } from './Root.js';\n\nexport const defaultState: SnapshotIn<RootModel> = {\n    experiments: {\n        loadingState: LoadingState.IDLE,\n        experiments: {}\n    },\n    user: {\n        account: {\n            loadingState: LoadingState.IDLE\n        },\n        settings: {\n            loadingState: LoadingState.IDLE,\n            showWizard: true\n        }\n    },\n    collection: {\n        albums: {\n            loadingState: LoadingState.IDLE,\n            items: []\n        },\n        playlistsCreated: {\n            loadingState: LoadingState.IDLE,\n            items: []\n        },\n        playlistsLiked: {\n            loadingState: LoadingState.IDLE,\n            items: []\n        },\n        artists: {\n            loadingState: LoadingState.IDLE,\n            items: []\n        },\n        landing: {\n            loadingState: LoadingState.IDLE,\n            tabs: {\n                loadingState: LoadingState.IDLE,\n                data: []\n            }\n        }\n    },\n    main: {\n        landing: {\n            loadingState: LoadingState.IDLE,\n            tabs: {\n                loadingState: LoadingState.IDLE,\n                data: []\n            }\n        }\n    },\n    settings: {\n        layout: null,\n        clientTld: 'ru'\n    },\n    album: {\n        loadingState: LoadingState.IDLE,\n        items: [],\n        otherAlbumVersions: [],\n        latestGenreAlbums: {\n            loadingState: LoadingState.IDLE,\n            items: []\n        },\n        otherArtistAlbums: {\n            loadingState: LoadingState.IDLE,\n            items: []\n        }\n    },\n    artist: {\n        loadingState: LoadingState.IDLE,\n        popularTracks: [],\n        similarArtists: [],\n        popularAlbums: [],\n        playlists: []\n    },\n    library: {\n        loadingState: LoadingState.IDLE,\n        tracks: {},\n        artists: {},\n        playlists: {},\n        albums: {}\n    },\n    sonataState: {\n        contextId: null,\n        contextType: null,\n        entityMeta: null,\n        status: AudioPlayerStatus.IDLE,\n        canMoveBackward: false,\n        canMoveForward: false\n    },\n    playlist: {\n        loadingState: LoadingState.IDLE,\n        meta: null,\n        items: []\n    },\n    slides: {\n        userSlidesLoadingState: LoadingState.IDLE,\n        artistSlidesLoadingState: LoadingState.IDLE,\n        userItems: [],\n        artistItems: []\n    },\n    vibe: {\n        getLastLoadingState: LoadingState.IDLE,\n        vibeResetLoadingState: LoadingState.IDLE,\n        isLoading: false\n    },\n    search: {\n        loadingState: LoadingState.IDLE,\n        results: []\n    },\n    vibeSettings: {\n        loadingState: LoadingState.IDLE\n    }\n};\n","import { types, Instance, flow, getEnv, cast } from 'mobx-state-tree';\n\nimport { UsersResourceLikedAlbums, UsersResourceLikedAlbumsParams, Album } from '@yandex-music-int/resource-collection';\n\nimport { AlbumWithArtists, albumWithArtistsResponseToModel } from '@/features/album/index.js';\n\nimport { LoadingState, StoreEnv } from '@/shared/lib/index.js';\nimport { Sort } from '@/shared/models/index.js';\n\nexport const Albums = types\n    .model('Albums', {\n        loadingState: types.enumeration(Object.values(LoadingState)),\n        sort: types.maybeNull(Sort),\n        items: types.array(AlbumWithArtists)\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getData: flow(function* ({\n                userId,\n                page,\n                pageSize,\n                sortBy,\n                sortOrder,\n                metaType\n            }: UsersResourceLikedAlbumsParams): Generator<\n                Promise<UsersResourceLikedAlbums>,\n                void,\n                UsersResourceLikedAlbums\n            > {\n                const { usersResource, logger } = getEnv<StoreEnv>(self);\n\n                if (self.loadingState === LoadingState.PENDING) {\n                    return;\n                }\n\n                self.sort = null;\n\n                if (sortBy && sortOrder) {\n                    self.sort = {\n                        sortBy,\n                        sortOrder\n                    };\n                }\n\n                try {\n                    self.loadingState = LoadingState.PENDING;\n\n                    const data = yield usersResource.getLikedAlbums({\n                        userId,\n                        page,\n                        pageSize,\n                        sortBy,\n                        sortOrder,\n                        metaType\n                    });\n\n                    self.items = cast(\n                        data.map(({ album }: { album: Album }) => albumWithArtistsResponseToModel(album))\n                    );\n\n                    self.loadingState = LoadingState.RESOLVE;\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    self.loadingState = LoadingState.REJECT;\n                }\n            })\n        };\n    });\n\nexport type AlbumsModel = Instance<typeof Albums>;\n","import { Instance, cast, flow, getEnv, types } from 'mobx-state-tree';\n\nimport { UsersResourceLikedArtists, UsersResourceLikedArtistsParams } from '@yandex-music-int/resource-collection';\n\nimport { Artist, artistResponseToModel } from '@/entities/artist/index.js';\n\nimport { LoadingState, StoreEnv } from '@/shared/lib/index.js';\nimport { Sort } from '@/shared/models/index.js';\n\nexport const Artists = types\n    .model('Artists', {\n        loadingState: types.enumeration(Object.values(LoadingState)),\n        sort: types.maybeNull(Sort),\n        items: types.array(Artist)\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getData: flow(function* ({\n                userId,\n                page,\n                pageSize,\n                sortBy,\n                sortOrder\n            }: UsersResourceLikedArtistsParams): Generator<\n                Promise<UsersResourceLikedArtists>,\n                void,\n                UsersResourceLikedArtists\n            > {\n                const { usersResource, logger } = getEnv<StoreEnv>(self);\n\n                if (self.loadingState === LoadingState.PENDING) {\n                    return;\n                }\n\n                self.sort = null;\n\n                if (sortBy && sortOrder) {\n                    self.sort = {\n                        sortBy,\n                        sortOrder\n                    };\n                }\n\n                try {\n                    self.loadingState = LoadingState.PENDING;\n\n                    const data = yield usersResource.getLikedArtists({\n                        userId,\n                        page,\n                        pageSize,\n                        sortBy,\n                        sortOrder\n                    });\n\n                    self.items = cast(data.map(artistResponseToModel));\n\n                    self.loadingState = LoadingState.RESOLVE;\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    self.loadingState = LoadingState.REJECT;\n                }\n            })\n        };\n    });\n\nexport type ArtistsModel = Instance<typeof Artists>;\n","interface UpdateItemsByPage<T> {\n    items: unknown[];\n    mappedRawItems: T[];\n    page: number;\n    pageSize: number;\n}\n\nexport function updateItemsByPage<T>({ items, mappedRawItems, page, pageSize }: UpdateItemsByPage<T>): void {\n    const startIndex = page * pageSize;\n\n    let localIndex = 0;\n\n    for (let index = startIndex; index < startIndex + pageSize; index++) {\n        if (mappedRawItems[localIndex]) {\n            items[index] = mappedRawItems[localIndex]!;\n        }\n\n        localIndex++;\n    }\n}\n","import { types, Instance, flow, getEnv, cast } from 'mobx-state-tree';\n\nimport {\n    UsersResourceCreatedPlaylists,\n    UsersResourceCreatedPlaylistsParams,\n    Playlist as PlaylistApi\n} from '@yandex-music-int/resource-collection';\n\nimport { Playlist, playlistResponseToModel } from '@/entities/playlist/index.js';\n\nimport { LoadingState, StoreEnv } from '@/shared/lib/index.js';\nimport { Sort, Pager } from '@/shared/models/index.js';\n\nimport { updateItemsByPage } from '../lib/updateItemsByPage.js';\n\nexport const PlaylistsCreated = types\n    .model('PlaylistsCreated', {\n        loadingState: types.enumeration(Object.values(LoadingState)),\n        sort: types.maybeNull(Sort),\n        items: types.array(types.maybeNull(Playlist)),\n        pager: types.maybeNull(Pager),\n        alreadyRequestedPages: types.map(types.number),\n        kinds: types.array(types.number),\n        requests: types.maybeNull(types.number)\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getKinds: flow(function* (userId: number): Generator<Promise<number[]>, void, number[]> {\n                let playlistsKinds: number[] = [];\n                const { usersResource } = getEnv<StoreEnv>(self);\n\n                playlistsKinds = yield usersResource.getPlaylistsKinds({\n                    userId\n                });\n\n                self.kinds = cast(playlistsKinds);\n            })\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getData: flow(function* ({\n                userId,\n                page = 0,\n                pageSize = 20,\n                withLikesCount\n            }: UsersResourceCreatedPlaylistsParams): Generator<\n                Promise<UsersResourceCreatedPlaylists | void>,\n                void,\n                UsersResourceCreatedPlaylists\n            > {\n                const { usersResource, logger } = getEnv<StoreEnv>(self);\n\n                if (self.loadingState === LoadingState.PENDING) {\n                    return;\n                }\n\n                if (self.alreadyRequestedPages.has(`${page}`)) {\n                    return;\n                }\n\n                if (typeof page === 'number') {\n                    self.alreadyRequestedPages.set(`${page}`, page);\n                }\n\n                try {\n                    self.loadingState = LoadingState.PENDING;\n\n                    if (self.kinds.length === 0) {\n                        yield self.getKinds(userId);\n                    }\n\n                    const initialItem = page * pageSize;\n                    const finalItem = initialItem + pageSize;\n\n                    const playlistsKinds = self.kinds.slice(initialItem, finalItem);\n\n                    const playlists = yield usersResource.getPlaylistsByKinds({\n                        userId,\n                        kinds: playlistsKinds,\n                        withLikesCount,\n                        withTracks: false\n                    });\n\n                    self.requests = (self.requests ?? 0) + 1;\n\n                    const pager = {\n                        page,\n                        perPage: pageSize,\n                        total: self.kinds.length\n                    };\n\n                    if (self.items.length === 0) {\n                        self.items = cast(Array.from({ length: pager.total }, () => null));\n                    }\n\n                    const mappedRawItems = playlists.map((playlist: PlaylistApi) => playlistResponseToModel(playlist));\n\n                    updateItemsByPage({\n                        items: self.items,\n                        mappedRawItems,\n                        page,\n                        pageSize\n                    });\n\n                    self.pager = pager;\n\n                    self.loadingState = LoadingState.RESOLVE;\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    self.loadingState = LoadingState.REJECT;\n                }\n            })\n        };\n    });\n\nexport type PlaylistsCreatedModel = Instance<typeof PlaylistsCreated>;\n","import { types, Instance, flow, getEnv, cast } from 'mobx-state-tree';\n\nimport {\n    UsersResourceLikedPlaylists,\n    UsersResourceLikedPlaylistsParams,\n    Playlist as PlaylistApi\n} from '@yandex-music-int/resource-collection';\n\nimport { Playlist, playlistResponseToModel } from '@/entities/playlist/index.js';\n\nimport { LoadingState, StoreEnv } from '@/shared/lib/index.js';\nimport { Sort, Pager } from '@/shared/models/index.js';\n\nimport { updateItemsByPage } from '../lib/updateItemsByPage.js';\n\nexport const PlaylistsLiked = types\n    .model('PlaylistsLiked', {\n        loadingState: types.enumeration(Object.values(LoadingState)),\n        sort: types.maybeNull(Sort),\n        items: types.array(types.maybeNull(Playlist)),\n        pager: types.maybeNull(Pager),\n        alreadyRequestedPages: types.map(types.number),\n        requests: types.maybeNull(types.number)\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getData: flow(function* ({\n                userId,\n                page = 0,\n                pageSize = 20,\n                sortBy,\n                sortOrder,\n                metaType,\n                withTracks\n            }: UsersResourceLikedPlaylistsParams): Generator<\n                Promise<UsersResourceLikedPlaylists>,\n                void,\n                UsersResourceLikedPlaylists\n            > {\n                if (self.alreadyRequestedPages.has(`${page}`)) {\n                    return;\n                }\n\n                if (typeof page === 'number') {\n                    self.alreadyRequestedPages.set(`${page}`, page);\n                }\n\n                const { usersResource, logger } = getEnv<StoreEnv>(self);\n\n                self.sort = null;\n\n                if (sortBy && sortOrder) {\n                    self.sort = {\n                        sortBy,\n                        sortOrder\n                    };\n                }\n\n                try {\n                    self.loadingState = LoadingState.PENDING;\n\n                    const { likedPlaylists, pager } = yield usersResource.getLikedPlaylists({\n                        userId,\n                        page,\n                        pageSize,\n                        sortBy,\n                        sortOrder,\n                        metaType,\n                        withTracks\n                    });\n\n                    self.requests = (self.requests ?? 0) + 1;\n\n                    if (self.items.length === 0) {\n                        self.items = cast(Array.from({ length: pager.total }, () => null));\n                    }\n\n                    const mappedRawItems = likedPlaylists.map(({ playlist }: { playlist: PlaylistApi }) =>\n                        playlistResponseToModel(playlist)\n                    );\n\n                    updateItemsByPage({\n                        items: self.items,\n                        mappedRawItems,\n                        page,\n                        pageSize\n                    });\n\n                    self.pager = pager;\n\n                    self.loadingState = LoadingState.RESOLVE;\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n                    if (typeof page === 'number') {\n                        self.alreadyRequestedPages.delete(`${page}`);\n                    }\n                    self.requests = typeof self.requests === 'number' ? self.requests - 1 : 0;\n                    self.loadingState = LoadingState.REJECT;\n                }\n            })\n        };\n    });\n\nexport type PlaylistsLikedModel = Instance<typeof PlaylistsLiked>;\n","import { types, Instance } from 'mobx-state-tree';\n\nimport { Landing } from '@/widgets/landing/index.js';\n\nimport { Albums } from './Albums.js';\nimport { Artists } from './Artists.js';\nimport { PlaylistsCreated } from './PlaylistsCreated.js';\nimport { PlaylistsLiked } from './PlaylistsLiked.js';\n\nexport const Collection = types.model('Collection', {\n    landing: Landing,\n    albums: Albums,\n    playlistsLiked: PlaylistsLiked,\n    playlistsCreated: PlaylistsCreated,\n    artists: Artists\n});\n\nexport type CollectionModel = Instance<typeof Collection>;\n","export { Collection, type CollectionModel } from './model/Collection.js';\nexport { CollectionPage } from './ui/Collection.js';\nexport { AlbumsPage } from './ui/Albums/Albums.js';\nexport { ArtistsPage } from './ui/Artists/Artists.js';\nexport { PlaylistsLikedPage } from './ui/PlaylistsLiked/PlaylistsLiked.js';\nexport { PlaylistsCreatedPage } from './ui/PlaylistsCreated/PlaylistsCreated.js';\n","import { types, Instance } from 'mobx-state-tree';\n\nimport { Landing } from '@/widgets/landing/index.js';\n\nexport const Main = types.model('Main', {\n    landing: Landing\n});\n\nexport type MainModel = Instance<typeof Main>;\n","export { MainPage } from './ui/Main.js';\nexport { Main } from './model/Main.js';\n","import { SearchType } from '@yandex-music-int/resource-collection';\n\nexport const SUPPORTED_TYPES = [\n    SearchType.ALBUM,\n    SearchType.ARTIST,\n    SearchType.PLAYLIST,\n    SearchType.TRACK,\n    SearchType.UGC_TRACK\n];\n","import { SearchFilter, SearchType } from '@yandex-music-int/resource-collection';\n\nimport { SUPPORTED_TYPES } from './constants/SupportedTypes.js';\n\nexport const getSupportedTypes = (filter: SearchFilter | undefined): SearchType[] => {\n    /*\n        Мы не показываем ugc треки для фильтра Топ\n    */\n    if (filter === SearchFilter.TOP) {\n        return SUPPORTED_TYPES.filter((type: SearchType) => type !== SearchType.UGC_TRACK);\n    }\n\n    return SUPPORTED_TYPES;\n};\n","import { SearchItem as SearchItemResponse, SearchType } from '@yandex-music-int/resource-collection';\n\nimport { SearchItemModel } from '@/widgets/search/model/SearchItem.js';\n\nimport { albumWithArtistsResponseToModel } from '@/features/album/index.js';\nimport { playlistWithArtistsResponseToModel } from '@/features/playlist/index.js';\nimport { trackWithArtistsResponseToModel, ugcTrackWithArtistsResponseToModel } from '@/features/track/index.js';\n\nimport { artistResponseToModel } from '@/entities/artist/index.js';\n\nexport const searchInstantMixedResultsResponseToModel = (results: SearchItemResponse[]): SearchItemModel[] => {\n    return results.map((item: SearchItemResponse): SearchItemModel => {\n        switch (item.type) {\n            case SearchType.ALBUM:\n                return {\n                    type: SearchType.ALBUM,\n                    data: albumWithArtistsResponseToModel(item.album)\n                };\n            case SearchType.ARTIST:\n                return {\n                    type: SearchType.ARTIST,\n                    data: artistResponseToModel(item.artist)\n                };\n            case SearchType.PLAYLIST:\n                return {\n                    type: SearchType.PLAYLIST,\n                    data: playlistWithArtistsResponseToModel({\n                        ...item.playlist,\n                        artists: []\n                    })\n                };\n            case SearchType.UGC_TRACK:\n                return {\n                    type: SearchType.UGC_TRACK,\n                    data: ugcTrackWithArtistsResponseToModel(item.track)\n                };\n            case SearchType.TRACK:\n                return {\n                    type: SearchType.TRACK,\n                    data: trackWithArtistsResponseToModel(item.track)\n                };\n        }\n    });\n};\n","import { types, flow, getEnv, cast } from 'mobx-state-tree';\n\nimport {\n    SearchResourceInstantMixedParams,\n    SearchResourceInstantMixedResponse,\n    SearchResourceFeedbackParams,\n    SearchResourceFeedbackResponse,\n    SearchFilter\n} from '@yandex-music-int/resource-collection';\n\nimport { SearchItem } from '@/widgets/search/index.js';\n\nimport { LoadingState, StoreEnv } from '@/shared/lib/index.js';\n\nimport { getSupportedTypes } from '../lib/getSupportedTypes.js';\nimport { searchInstantMixedResultsResponseToModel } from '../lib/searchInstantMixedResultsResponseToModel.js';\n\nconst PAGE_SIZE = 36;\n\nexport const Search = types\n    .model('Search', {\n        loadingState: types.enumeration(Object.values(LoadingState)),\n        searchRequestId: types.optional(types.string, ''),\n        results: types.array(SearchItem)\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getSearchResults: flow(function* ({\n                text,\n                filter\n            }: SearchResourceInstantMixedParams): Generator<\n                Promise<SearchResourceInstantMixedResponse | unknown>,\n                void,\n                SearchResourceInstantMixedResponse\n            > {\n                const { searchResource } = getEnv<StoreEnv>(self);\n\n                try {\n                    self.loadingState = LoadingState.PENDING;\n\n                    const data = yield searchResource.getInstantMixedSearch({\n                        text,\n                        type: getSupportedTypes(filter),\n                        // Фильтр топ не поддерживается на бэке, поэтому ничего не отправляем если он выбран\n                        filter: filter === SearchFilter.TOP ? undefined : filter,\n                        withLikesCount: true,\n                        page: 0,\n                        // Пока что запрашиваем только по 36 объектов\n                        pageSize: PAGE_SIZE\n                    });\n\n                    if (data.results && data.results.length > 0) {\n                        self.results = cast(searchInstantMixedResultsResponseToModel(data.results));\n                        self.searchRequestId = data.searchRequestId;\n                    }\n\n                    self.loadingState = LoadingState.RESOLVE;\n                } catch (error) {\n                    self.loadingState = LoadingState.REJECT;\n                }\n            }),\n            resetResults() {\n                self.results = cast([]);\n            },\n            sendFeedback: flow(function* (\n                params: SearchResourceFeedbackParams\n            ): Generator<Promise<SearchResourceFeedbackResponse | unknown>, void, SearchResourceFeedbackResponse> {\n                const { searchResource, logger } = getEnv<StoreEnv>(self);\n\n                try {\n                    yield searchResource.sendFeedback(params);\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n                }\n            })\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .views((self) => {\n        return {\n            get isLoading(): boolean {\n                return self.loadingState === LoadingState.IDLE || self.loadingState === LoadingState.PENDING;\n            },\n            get isEmpty(): boolean {\n                return (\n                    (self.loadingState === LoadingState.RESOLVE || self.loadingState === LoadingState.REJECT) &&\n                    self.results.length === 0\n                );\n            }\n        };\n    });\n","export { SearchPage } from './ui/Search.js';\nexport { Search } from './model/Search.js';\n","import { types, Instance } from 'mobx-state-tree';\n\nimport { Album } from '@/pages/album/index.js';\nimport { Artist } from '@/pages/artist/index.js';\nimport { Collection } from '@/pages/collection/index.js';\nimport { Main } from '@/pages/main/index.js';\nimport { Playlist } from '@/pages/playlist/index.js';\nimport { Search } from '@/pages/search/index.js';\n\nimport { VibeActions } from '@/widgets/my-vibe/index.js';\n\nimport { SonataState } from '@/features/sonata/index.js';\nimport { VibeSettings } from '@/features/vibe-settings/index.js';\n\nimport { Slides } from '@/entities/slides/index.js';\nimport { User } from '@/entities/user/index.js';\n\nimport { Settings, Library, Experiments } from '@/shared/models/index.js';\n\nexport const Root = types.model('Root', {\n    experiments: Experiments,\n    user: User,\n    collection: Collection,\n    main: Main,\n    settings: Settings,\n    album: Album,\n    artist: Artist,\n    library: Library,\n    sonataState: SonataState,\n    playlist: Playlist,\n    slides: Slides,\n    vibe: VibeActions,\n    search: Search,\n    vibeSettings: VibeSettings\n});\n\nexport type RootModel = Instance<typeof Root>;\n","import { SnapshotIn } from 'mobx-state-tree';\n\nimport { StoreEnv } from '@/shared/lib/index.js';\n\nimport { Root, RootModel } from './Root.js';\n\nexport const createRootModel = (snapshot: SnapshotIn<RootModel>, env: StoreEnv): RootModel => {\n    return Root.create(snapshot, env);\n};\n","import { cloneDeep } from 'lodash-es';\nimport { SnapshotIn } from 'mobx-state-tree';\n\nimport { RootModel } from './Root.js';\n\n/*\n    Исключает модели из гидратации.\n*/\nconst MODELS_EXCLUDED_FROM_REHYDRATION: Array<keyof SnapshotIn<RootModel>> = ['settings', 'sonataState'];\n\nexport const excludeModelsFromRehydration = (\n    store: RootModel,\n    snapshot: SnapshotIn<RootModel>\n): SnapshotIn<RootModel> => {\n    return MODELS_EXCLUDED_FROM_REHYDRATION.reduce(\n        (accumulator: SnapshotIn<RootModel>, modelName: keyof SnapshotIn<RootModel>) => {\n            accumulator[modelName] = store[modelName];\n            return accumulator;\n        },\n        cloneDeep(snapshot)\n    );\n};\n","export type { RootModel } from './Root.js';\nexport { createRootModel } from './createRootModel.js';\nexport { excludeModelsFromRehydration } from './excludeModelsFromRehydration.js';\n","'use client';\n\nimport { enableStaticRendering } from 'mobx-react-lite';\nimport { onSnapshot, applySnapshot, SnapshotIn } from 'mobx-state-tree';\nimport { ServerInsertedHTMLHook } from 'next/dist/shared/lib/server-inserted-html.js';\n// @ts-expect-error Тайпскрипт не может распознать корректные тайпинги для next, когда мы используем es-modules\nimport { ServerInsertedHTMLContext } from 'next/navigation';\nimport { ReactElement, useRef, useContext, useState, useLayoutEffect } from 'react';\n\nimport { WithChildren, StoreContext, useResources, useLogger } from '@/shared/lib/index.js';\n\nimport { defaultState } from '../store/defaultState.js';\nimport { createRootModel, excludeModelsFromRehydration } from '../store/index.js';\n\n// можно использовать process.browser?\nenableStaticRendering(typeof window === 'undefined');\n\ninterface Props extends WithChildren {\n    nonce?: string;\n}\n\nexport const StoreProvider = ({ children, nonce }: Props): ReactElement => {\n    const rehydrationContextSnapshot = useRef<Array<SnapshotIn<RootModel>>>([]);\n    const insertHtml = useContext<ServerInsertedHTMLHook>(ServerInsertedHTMLContext);\n    const resources = useResources();\n    const logger = useLogger();\n    // eslint-disable-next-line react/hook-use-state\n    const [store] = useState(() => {\n        const storeEnv = {\n            ...resources,\n            logger\n        };\n\n        if (typeof window !== 'undefined' && window.__STATE_SNAPSHOT__?.length) {\n            return createRootModel(window.__STATE_SNAPSHOT__[window.__STATE_SNAPSHOT__.length - 1], storeEnv);\n        }\n        return createRootModel(defaultState, storeEnv);\n    });\n\n    if (typeof window === 'undefined') {\n        if (insertHtml) {\n            insertHtml(() => {\n                return (\n                    <script\n                        dangerouslySetInnerHTML={{\n                            // Добавляем кастомный эвент,\n                            // чтобы когда долетают чанки (если Next уже отдал что-то на клиент, но при этом запросы были инициированы на сервере),\n                            // мы могли уведомить клиента, что надо пропатчить снапшотом клиентский store\n                            __html: `var musicStateSnapshotUpdatingEvent = new Event('yMusicStateSnapshotUpdated');`\n                        }}\n                        nonce={nonce}\n                    />\n                );\n            });\n        }\n\n        onSnapshot(store, (newSnapshot: SnapshotIn<RootModel>) => {\n            rehydrationContextSnapshot.current.push(newSnapshot);\n\n            if (insertHtml && rehydrationContextSnapshot.current) {\n                insertHtml(() => {\n                    const snapshots = rehydrationContextSnapshot.current;\n\n                    rehydrationContextSnapshot.current = [];\n\n                    if (snapshots.length === 0) {\n                        return;\n                    }\n\n                    return (\n                        <script\n                            dangerouslySetInnerHTML={{\n                                __html: `(window.__STATE_SNAPSHOT__ = window.__STATE_SNAPSHOT__ || []).push(${JSON.stringify(\n                                    snapshots[snapshots.length - 1]\n                                ).replace(/</g, '\\\\u003c')}); window.dispatchEvent(musicStateSnapshotUpdatingEvent);`\n                            }}\n                            nonce={nonce}\n                        />\n                    );\n                });\n            }\n        });\n    }\n\n    useLayoutEffect(() => {\n        function syncStores(): void {\n            const lastSnapshot = window.__STATE_SNAPSHOT__?.[window.__STATE_SNAPSHOT__.length - 1];\n\n            if (lastSnapshot) {\n                applySnapshot(store, excludeModelsFromRehydration(store, lastSnapshot));\n            }\n\n            delete window.__STATE_SNAPSHOT__;\n        }\n\n        syncStores();\n\n        window.addEventListener('yMusicStateSnapshotUpdated', syncStores);\n\n        return () => window.removeEventListener('yMusicStateSnapshotUpdated', syncStores);\n    }, [store]);\n\n    return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>;\n};\n","'use client';\n\nimport { ReactNode, useMemo } from 'react';\nimport { IntlProvider } from 'react-intl';\n\nimport { WithChildren, CompiledTranslations } from '@/shared/lib/index.js';\n\ninterface Props extends WithChildren {\n    dictionary: CompiledTranslations;\n}\n\nexport const TranslationsProvider = ({ dictionary, children }: Props): ReactNode => {\n    const messages = useMemo(() => {\n        return dictionary;\n        //eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        /**\n         * TODO: параметр \"locale\"\n         * будет добавляться динамически позже в задаче MFRONT-5860,\n         * заблокированно задачами MFRONT-5433 и MFRONT-5434\n         */\n        <IntlProvider defaultLocale=\"ru-RU\" locale=\"ru-RU\" messages={messages}>\n            {children}\n        </IntlProvider>\n    );\n};\n","'use client';\n\nimport { ReactNode, use } from 'react';\n\nimport { TvmDestinations } from '@yandex-music-int/resource-collection';\n\nimport {\n    WithChildren,\n    useContainer,\n    CONTAINER_TVM,\n    CONTAINER_CONFIG_TOKEN,\n    Tvm,\n    ensureContainerExists\n} from '@/shared/lib/index.js';\n\ninterface Props extends WithChildren {}\n\n/*\n    Этот провайдер отвечает за подгрузку TVM билетов,\n    для дальнейшего их использования в контейнерах при запросах к ресурсам на стороне сервера\n*/\nexport const TvmProvider = ({ children }: Props): ReactNode => {\n    if (typeof window === 'undefined') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const container = useContainer();\n        const config = container.get(CONTAINER_CONFIG_TOKEN);\n\n        if (config.tvm.enabled) {\n            const tvm = container.get(CONTAINER_TVM);\n\n            if (ensureContainerExists(tvm, Tvm<TvmDestinations>)) {\n                use(tvm.loadTvmTickets());\n            }\n        }\n    }\n\n    return children;\n};\n","import { DesktopEvents } from '@/shared/lib/index.js';\n\nexport const sendWindowMinimizeEvent = (): void => {\n    window.desktopEvents?.send(DesktopEvents.WINDOW_MINIMIZE);\n};\n\nexport const sendWindowMaximizeEvent = (): void => {\n    window.desktopEvents?.send(DesktopEvents.WINDOW_MAXIMIZE);\n};\n\nexport const sendWindowCloseEvent = (): void => {\n    window.desktopEvents?.send(DesktopEvents.WINDOW_CLOSE);\n};\n","'use client';\n\nimport { clsx } from 'clsx';\nimport { ReactElement, ReactNode, useCallback, useMemo } from 'react';\nimport { IntlFormatters } from 'react-intl';\n\nimport { Button } from '@yandex-music-int/sol/components/Button';\nimport { Caption } from '@yandex-music-int/sol/components/Typography';\n\nimport { DesktopEvents } from '@/shared/lib/index.js';\nimport { BaseNotification } from '@/shared/ui/index.js';\n\nimport styles from './NotificationUpdate.module.scss';\n\ninterface Props {\n    version: string;\n    formatMessage: IntlFormatters<ReactNode>['formatMessage'];\n    closeToast?: () => void;\n}\n\nexport const NotificationUpdate = ({ version, formatMessage, closeToast }: Props): ReactElement => {\n    const handleUpdate = useCallback((): void => {\n        window.desktopEvents?.send(DesktopEvents.ON_UPDATE_INSTALL);\n        closeToast?.();\n    }, [closeToast]);\n\n    const message = useMemo(() => {\n        return (\n            <div className={styles.message}>\n                <Caption className={styles.text} variant=\"div\" type=\"controls\" size=\"m\">\n                    {formatMessage({ id: 'desktop.on-update-available' }, { version })}\n                </Caption>\n                <Button\n                    className={styles.button}\n                    onClick={handleUpdate}\n                    variant=\"default\"\n                    color=\"secondary\"\n                    size=\"xs\"\n                    radius=\"xxxl\"\n                >\n                    <Caption variant=\"div\" type=\"controls\" size=\"m\">\n                        {formatMessage({ id: 'desktop.update' })}\n                    </Caption>\n                </Button>\n            </div>\n        );\n    }, [formatMessage, handleUpdate, version]);\n\n    return <BaseNotification className={clsx(styles.root, styles.important)} message={message} />;\n};\n","'use client';\n\nimport { clsx } from 'clsx';\nimport { observer } from 'mobx-react-lite';\nimport { ReactElement, useCallback } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { getPlatform, Platform, WithChildren, WithClassName } from '@/shared/lib/index.js';\n\nimport { sendWindowCloseEvent, sendWindowMaximizeEvent, sendWindowMinimizeEvent } from '../../lib/sendWindowEvent.js';\n\nimport styles from './TitleBar.module.scss';\n\ninterface TitleBarButtonProps extends WithClassName, WithChildren {\n    onClick?: () => void;\n    ariaLabel?: string;\n}\n\nconst TitleBarButton = ({ children, className, onClick, ariaLabel }: TitleBarButtonProps): ReactElement => {\n    return (\n        <button type=\"button\" className={clsx(styles.button, className)} onClick={onClick} aria-label={ariaLabel}>\n            {children}\n        </button>\n    );\n};\n\nexport const TitleBar = observer((): ReactElement => {\n    const platform = getPlatform();\n    const isWindowsPlatform = platform === Platform.WINDOWS;\n    const { formatMessage } = useIntl();\n\n    const minimize = useCallback(() => {\n        sendWindowMinimizeEvent();\n    }, []);\n\n    const maximize = useCallback(() => {\n        sendWindowMaximizeEvent();\n    }, []);\n\n    const close = useCallback(() => {\n        sendWindowCloseEvent();\n    }, []);\n\n    return (\n        <div className={styles.root} onDoubleClick={maximize}>\n            {isWindowsPlatform && (\n                <>\n                    <TitleBarButton onClick={minimize} ariaLabel={formatMessage({ id: 'windows-menu.roll-up' })}>\n                        <svg width=\"10\" height=\"1\" viewBox=\"0 0 10 1\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M0.498047 1C0.429688 1 0.364583 0.986979 0.302734 0.960938C0.244141 0.934896 0.192057 0.899089 0.146484 0.853516C0.100911 0.807943 0.0651042 0.755859 0.0390625 0.697266C0.0130208 0.635417 0 0.570312 0 0.501953C0 0.433594 0.0130208 0.370117 0.0390625 0.311523C0.0651042 0.249674 0.100911 0.195964 0.146484 0.150391C0.192057 0.101562 0.244141 0.0641276 0.302734 0.0380859C0.364583 0.0120443 0.429688 -0.000976562 0.498047 -0.000976562H9.50195C9.57031 -0.000976562 9.63379 0.0120443 9.69238 0.0380859C9.75423 0.0641276 9.80794 0.101562 9.85352 0.150391C9.89909 0.195964 9.9349 0.249674 9.96094 0.311523C9.98698 0.370117 10 0.433594 10 0.501953C10 0.570312 9.98698 0.635417 9.96094 0.697266C9.9349 0.755859 9.89909 0.807943 9.85352 0.853516C9.80794 0.899089 9.75423 0.934896 9.69238 0.960938C9.63379 0.986979 9.57031 1 9.50195 1H0.498047Z\"\n                                fill=\"white\"\n                            />\n                        </svg>\n                    </TitleBarButton>\n                    <TitleBarButton onClick={maximize} ariaLabel={formatMessage({ id: 'windows-menu.unwrap' })}>\n                        <svg width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M1.47461 10C1.2793 10 1.09212 9.96094 0.913086 9.88281C0.734049 9.80143 0.576172 9.69401 0.439453 9.56055C0.30599 9.42383 0.198568 9.26595 0.117188 9.08691C0.0390625 8.90788 0 8.7207 0 8.52539V1.47461C0 1.2793 0.0390625 1.09212 0.117188 0.913086C0.198568 0.734049 0.30599 0.577799 0.439453 0.444336C0.576172 0.307617 0.734049 0.200195 0.913086 0.12207C1.09212 0.0406901 1.2793 0 1.47461 0H8.52539C8.7207 0 8.90788 0.0406901 9.08691 0.12207C9.26595 0.200195 9.4222 0.307617 9.55566 0.444336C9.69238 0.577799 9.7998 0.734049 9.87793 0.913086C9.95931 1.09212 10 1.2793 10 1.47461V8.52539C10 8.7207 9.95931 8.90788 9.87793 9.08691C9.7998 9.26595 9.69238 9.42383 9.55566 9.56055C9.4222 9.69401 9.26595 9.80143 9.08691 9.88281C8.90788 9.96094 8.7207 10 8.52539 10H1.47461ZM8.50098 8.99902C8.56934 8.99902 8.63281 8.986 8.69141 8.95996C8.75326 8.93392 8.80697 8.89811 8.85254 8.85254C8.89811 8.80697 8.93392 8.75488 8.95996 8.69629C8.986 8.63444 8.99902 8.56934 8.99902 8.50098V1.49902C8.99902 1.43066 8.986 1.36719 8.95996 1.30859C8.93392 1.24674 8.89811 1.19303 8.85254 1.14746C8.80697 1.10189 8.75326 1.06608 8.69141 1.04004C8.63281 1.014 8.56934 1.00098 8.50098 1.00098H1.49902C1.43066 1.00098 1.36556 1.014 1.30371 1.04004C1.24512 1.06608 1.19303 1.10189 1.14746 1.14746C1.10189 1.19303 1.06608 1.24674 1.04004 1.30859C1.014 1.36719 1.00098 1.43066 1.00098 1.49902V8.50098C1.00098 8.56934 1.014 8.63444 1.04004 8.69629C1.06608 8.75488 1.10189 8.80697 1.14746 8.85254C1.19303 8.89811 1.24512 8.93392 1.30371 8.95996C1.36556 8.986 1.43066 8.99902 1.49902 8.99902H8.50098Z\"\n                                fill=\"white\"\n                            />\n                        </svg>\n                    </TitleBarButton>\n                    <TitleBarButton\n                        className={styles.closeButton}\n                        onClick={close}\n                        ariaLabel={formatMessage({ id: 'windows-menu.close' })}\n                    >\n                        <svg width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path\n                                d=\"M5 5.70801L0.854492 9.85352C0.756836 9.95117 0.639648 10 0.50293 10C0.359701 10 0.239258 9.9528 0.141602 9.8584C0.0472005 9.76074 0 9.6403 0 9.49707C0 9.36035 0.0488281 9.24316 0.146484 9.14551L4.29199 5L0.146484 0.854492C0.0488281 0.756836 0 0.638021 0 0.498047C0 0.429688 0.0130208 0.364583 0.0390625 0.302734C0.0651042 0.240885 0.100911 0.188802 0.146484 0.146484C0.192057 0.100911 0.245768 0.0651042 0.307617 0.0390625C0.369466 0.0130208 0.43457 0 0.50293 0C0.639648 0 0.756836 0.0488281 0.854492 0.146484L5 4.29199L9.14551 0.146484C9.24316 0.0488281 9.36198 0 9.50195 0C9.57031 0 9.63379 0.0130208 9.69238 0.0390625C9.75423 0.0651042 9.80794 0.100911 9.85352 0.146484C9.89909 0.192057 9.9349 0.245768 9.96094 0.307617C9.98698 0.366211 10 0.429688 10 0.498047C10 0.638021 9.95117 0.756836 9.85352 0.854492L5.70801 5L9.85352 9.14551C9.95117 9.24316 10 9.36035 10 9.49707C10 9.56543 9.98698 9.63053 9.96094 9.69238C9.9349 9.75423 9.89909 9.80794 9.85352 9.85352C9.8112 9.89909 9.75911 9.9349 9.69727 9.96094C9.63542 9.98698 9.57031 10 9.50195 10C9.36198 10 9.24316 9.95117 9.14551 9.85352L5 5.70801Z\"\n                                fill=\"white\"\n                            />\n                        </svg>\n                    </TitleBarButton>\n                </>\n            )}\n        </div>\n    );\n});\n","'use client';\n\nimport { ReactElement } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Button } from '@yandex-music-int/sol/components/Button';\nimport { Icon } from '@yandex-music-int/sol/components/Icon';\n\nimport { FutureFeature } from '@/shared/ui/index.js';\nimport { PlayButton } from '@/shared/ui/PlayButton/PlayButton.js';\n\nimport styles from './SonataControlsDesktop.module.scss';\n\ninterface Props {\n    disabled?: boolean;\n    isPlaying: boolean;\n    canMoveForward: boolean;\n    canMoveBackward: boolean;\n    onClickNext: () => void;\n    onClickPrev: () => void;\n    onClickPlayPause: () => void;\n}\n\nexport const SonataControlsDesktop = ({\n    disabled,\n    isPlaying,\n    canMoveForward,\n    canMoveBackward,\n    onClickNext,\n    onClickPrev,\n    onClickPlayPause\n}: Props): ReactElement => {\n    const { formatMessage } = useIntl();\n    return (\n        <div className={styles.root}>\n            <FutureFeature title={formatMessage({ id: 'player-actions.shuffle' })}>\n                <Button\n                    radius=\"round\"\n                    size=\"xxxs\"\n                    variant=\"text\"\n                    disabled\n                    withRipple={false}\n                    aria-label={formatMessage({ id: 'player-actions.shuffle' })}\n                    icon={<Icon variant=\"shuffle\" size=\"xs\" />}\n                />\n            </FutureFeature>\n\n            <div className={styles.sonataButtons}>\n                <Button\n                    className={styles.sonataButton}\n                    variant=\"text\"\n                    size=\"m\"\n                    radius=\"round\"\n                    disabled={!canMoveBackward}\n                    withRipple={false}\n                    aria-label={formatMessage({ id: 'player-actions.previous-track' })}\n                    icon={<Icon variant=\"previous\" />}\n                    onClick={onClickPrev}\n                />\n                <PlayButton\n                    className={styles.sonataButton}\n                    disabled={disabled}\n                    iconSize=\"l\"\n                    variant=\"filled\"\n                    isPlaying={isPlaying}\n                    iconClassName={styles.playButtonIcon}\n                    onClick={onClickPlayPause}\n                />\n                <Button\n                    className={styles.sonataButton}\n                    radius=\"round\"\n                    size=\"m\"\n                    variant=\"text\"\n                    disabled={!canMoveForward}\n                    withRipple={false}\n                    aria-label={formatMessage({ id: 'player-actions.next-track' })}\n                    icon={<Icon variant=\"next\" />}\n                    onClick={onClickNext}\n                />\n            </div>\n            <FutureFeature title={formatMessage({ id: 'player-actions.repeat' })}>\n                <Button\n                    radius=\"round\"\n                    size=\"xxxs\"\n                    variant=\"text\"\n                    disabled\n                    withRipple={false}\n                    aria-label={formatMessage({ id: 'player-actions.repeat' })}\n                    icon={<Icon variant=\"repeat\" size=\"xs\" />}\n                />\n            </FutureFeature>\n        </div>\n    );\n};\n","import { ReactElement } from 'react';\n\nimport { PlayButton } from '@/shared/ui/PlayButton/PlayButton.js';\n\ninterface Props {\n    disabled?: boolean;\n    isPlaying: boolean;\n    onClickPlayPause: () => void;\n}\n\nexport const SonataControlsMobile = ({ disabled, isPlaying, onClickPlayPause }: Props): ReactElement => {\n    return <PlayButton size=\"s\" disabled={disabled} isPlaying={isPlaying} onClick={onClickPlayPause} />;\n};\n","'use client';\n\nimport { observer } from 'mobx-react-lite';\nimport { useCallback, useMemo, ReactElement } from 'react';\n\nimport { AudioPlayerStatus } from '@yandex-music-int/sonata';\n\nimport { AnalyticsBlock, AnalyticsPage, usePlayableVibeContext, useSonata, useStore } from '@/shared/lib/index.js';\n\nimport { MusicEntityMetaModel } from '../../model/MusicEntityMeta.js';\n\nimport { SonataControlsDesktop } from './SonataControlsDesktop/SonataControlsDesktop.js';\nimport { SonataControlsMobile } from './SonataControlsMobile/SonataControlsMobile.js';\n\ninterface Props {\n    isMobile: boolean;\n    entityMeta: MusicEntityMetaModel | null;\n}\n\nexport const SonataControls = observer(({ isMobile, entityMeta }: Props): ReactElement => {\n    const { sonataState, vibe } = useStore();\n    const sonata = useSonata();\n\n    const { togglePlay: toggleVibePlay } = usePlayableVibeContext({\n        seeds: vibe.meta?.seeds,\n        pageIdForFrom: AnalyticsPage.HOME,\n        blockIdForFrom: AnalyticsBlock.RUP_MAIN\n    });\n\n    const isPlaying = useMemo(() => {\n        return sonataState.status === AudioPlayerStatus.PLAYING;\n    }, [sonataState.status]);\n\n    const handlePlayPauseClick = useCallback(() => {\n        if (entityMeta) {\n            sonata?.togglePause();\n        } else {\n            toggleVibePlay();\n        }\n    }, [entityMeta, sonata, toggleVibePlay]);\n\n    const handleNextTrackClick = useCallback(() => {\n        sonata?.moveForward();\n    }, [sonata]);\n\n    const handlePrevTrackClick = useCallback(() => {\n        sonata?.moveBackward();\n    }, [sonata]);\n\n    const SonataControlsContainer = useMemo(() => {\n        return isMobile ? SonataControlsMobile : SonataControlsDesktop;\n    }, [isMobile]);\n\n    return (\n        <SonataControlsContainer\n            disabled={false}\n            isPlaying={isPlaying}\n            canMoveBackward={sonataState.canMoveBackward}\n            canMoveForward={sonataState.canMoveForward}\n            onClickPlayPause={handlePlayPauseClick}\n            onClickNext={handleNextTrackClick}\n            onClickPrev={handlePrevTrackClick}\n        />\n    );\n});\n","import { cast } from 'mobx-state-tree';\n\nimport { MusicEntityMeta } from '@yandex-music-int/player-entities';\nimport { Artist as ArtistResponse } from '@yandex-music-int/resource-collection';\n\nimport { artistResponseToModel } from '@/entities/artist/index.js';\nimport { trackResponseToModel } from '@/entities/track/index.js';\n\nimport { MusicEntityMetaModel } from '../model/MusicEntityMeta.js';\n\nexport const musicEntityMetaResponseToModel = (trackWithArtistsResponse: MusicEntityMeta): MusicEntityMetaModel => {\n    const artists = trackWithArtistsResponse.artists?.map((artist: ArtistResponse) => {\n        return artistResponseToModel(artist);\n    });\n\n    return cast({\n        ...trackResponseToModel(trackWithArtistsResponse),\n        artists\n    });\n};\n","import { Instance, types } from 'mobx-state-tree';\n\nimport { Artist } from '@/entities/artist/index.js';\nimport { Track } from '@/entities/track/index.js';\n\nexport const MusicEntityMeta = Track.props({\n    artists: types.array(Artist)\n});\n\nexport type MusicEntityMetaModel = Instance<typeof MusicEntityMeta>;\n","import { Instance, types } from 'mobx-state-tree';\n\nimport { YaMusicContexts } from '@yandex-music-int/player-contexts';\nimport { MusicEntityMeta as MusicEntityMetaResponse } from '@yandex-music-int/player-entities';\nimport { AudioPlayerStatus } from '@yandex-music-int/sonata';\n\nimport { musicEntityMetaResponseToModel } from '../lib/musicEntityMetaResponseToModel.js';\n\nimport { MusicEntityMeta } from './MusicEntityMeta.js';\n\nexport const SonataState = types\n    .model('SonataState', {\n        contextType: types.maybeNull(types.enumeration(Object.values(YaMusicContexts))),\n        contextId: types.maybeNull(types.string),\n        entityMeta: types.maybeNull(MusicEntityMeta),\n        status: types.enumeration(Object.values(AudioPlayerStatus)),\n        canMoveForward: types.boolean,\n        canMoveBackward: types.boolean,\n        volume: types.maybe(types.number)\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => ({\n        setContextId: (contextId: string | number) => {\n            self.contextId = String(contextId);\n        },\n        setContextType: (contextType: YaMusicContexts) => {\n            self.contextType = contextType;\n        },\n        setEntityMeta: (entityMeta: MusicEntityMetaResponse | null) => {\n            if (entityMeta) {\n                self.entityMeta = musicEntityMetaResponseToModel(entityMeta);\n            }\n        },\n        setStatus: (status: AudioPlayerStatus) => {\n            self.status = status;\n        },\n        setCanMoveForward: (value: boolean) => {\n            self.canMoveForward = value;\n        },\n        setCanMoveBackward: (value: boolean) => {\n            self.canMoveBackward = value;\n        },\n        setVolume: (volume: number) => {\n            self.volume = volume;\n        }\n    }));\n\nexport type SonataStateModel = Instance<typeof SonataState>;\n","'use client';\n\nimport { useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { isVibeContext } from '@yandex-music-int/player-contexts';\nimport { RotorResourceSessionFeedback, UsersResourceLibraryResponse } from '@yandex-music-int/resource-collection';\n\nimport { NotificationLike } from '@/entities/track/index.js';\n\nimport { NotificationContainerId, useNotify, useSonata, useStore } from '@/shared/lib/index.js';\nimport { BaseNotificationError } from '@/shared/ui/index.js';\n\nimport { MusicEntityMetaModel } from '../model/MusicEntityMeta.js';\n\nexport const useOnLikeClick = (entityMeta: MusicEntityMetaModel | null): (() => Promise<void>) => {\n    const { user } = useStore();\n    const { notify } = useNotify();\n    const [pendingLibraryAction, setPendingLibraryAction] = useState(false);\n    const { formatMessage } = useIntl();\n\n    const sonata = useSonata();\n\n    return useCallback(async () => {\n        if (entityMeta) {\n            if (!user.isAuthorized) {\n                notify(\n                    <BaseNotificationError\n                        error={formatMessage({ id: 'authorization-messages.need-to-authorizate' })}\n                    />,\n                    {\n                        containerId: NotificationContainerId.ERROR\n                    }\n                );\n                return;\n            }\n\n            if (pendingLibraryAction) {\n                return;\n            }\n\n            setPendingLibraryAction(true);\n\n            const result: UsersResourceLibraryResponse = await entityMeta.toggleLike();\n\n            setPendingLibraryAction(false);\n\n            if (result === UsersResourceLibraryResponse.OK) {\n                notify(<NotificationLike track={entityMeta} />, { containerId: NotificationContainerId.INFO });\n\n                const feedbackType = entityMeta.isLiked\n                    ? RotorResourceSessionFeedback.LIKE\n                    : RotorResourceSessionFeedback.UNLIKE;\n                if (sonata && isVibeContext(sonata.state.currentContext.value)) {\n                    sonata.state.currentContext.value.sendFeedback(\n                        sonata.state.playerState,\n                        sonata.state.queueState,\n                        feedbackType\n                    );\n                }\n            } else {\n                notify(<BaseNotificationError error={formatMessage({ id: 'error-messages.error-during-action' })} />, {\n                    containerId: NotificationContainerId.ERROR\n                });\n            }\n        }\n    }, [entityMeta, user.isAuthorized, pendingLibraryAction, notify, formatMessage, sonata]);\n};\n","'use client';\n\nimport { useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { isVibeContext } from '@yandex-music-int/player-contexts';\nimport { RotorResourceSessionFeedback, UsersResourceLibraryResponse } from '@yandex-music-int/resource-collection';\n\nimport { NotificationDislike } from '@/entities/track/index.js';\n\nimport { NotificationContainerId, useNotify, useSonata, useStore } from '@/shared/lib/index.js';\nimport { BaseNotificationError } from '@/shared/ui/index.js';\n\nimport { MusicEntityMetaModel } from '../model/MusicEntityMeta.js';\n\nexport const useOnDislikeClick = (entityMeta: MusicEntityMetaModel | null): (() => Promise<void>) => {\n    const { user, sonataState } = useStore();\n    const sonata = useSonata();\n    const { notify } = useNotify();\n    const [pendingLibraryAction, setPendingLibraryAction] = useState(false);\n    const { formatMessage } = useIntl();\n\n    return useCallback(async () => {\n        if (entityMeta) {\n            if (!user.isAuthorized) {\n                notify(\n                    <BaseNotificationError\n                        error={formatMessage({ id: 'authorization-messages.need-to-authorizate' })}\n                    />,\n                    {\n                        containerId: NotificationContainerId.ERROR\n                    }\n                );\n                return;\n            }\n\n            if (pendingLibraryAction) {\n                return;\n            }\n\n            setPendingLibraryAction(true);\n\n            const result: UsersResourceLibraryResponse = await entityMeta.toggleDislike();\n\n            setPendingLibraryAction(false);\n\n            if (result === UsersResourceLibraryResponse.OK) {\n                notify(\n                    <NotificationDislike\n                        isDisliked={entityMeta.isDisliked}\n                        coverUri={entityMeta.coverUri}\n                        title={entityMeta.title}\n                    />,\n                    { containerId: NotificationContainerId.INFO }\n                );\n\n                const feedbackType = entityMeta.isDisliked\n                    ? RotorResourceSessionFeedback.DISLIKE\n                    : RotorResourceSessionFeedback.UNDISLIKE;\n\n                if (sonata && isVibeContext(sonata.state.currentContext.value)) {\n                    // в данном случае ждем отправки фидбека, чтобы рекомендации успели его обработать и перестроиться к моменту нашего скипа вперед\n                    await sonata.state.currentContext.value.sendFeedback(\n                        sonata.state.playerState,\n                        sonata.state.queueState,\n                        feedbackType\n                    );\n                }\n\n                if (entityMeta.isDisliked && sonataState.canMoveForward) {\n                    sonata?.moveForward();\n                }\n            } else {\n                notify(<BaseNotificationError error={formatMessage({ id: 'error-messages.error-during-action' })} />, {\n                    containerId: NotificationContainerId.ERROR\n                });\n            }\n        }\n    }, [entityMeta, user.isAuthorized, pendingLibraryAction, notify, formatMessage, sonataState, sonata]);\n};\n","export { SonataControls } from './ui/SonataControls/SonataControls.js';\nexport { SonataState, type SonataStateModel } from './model/SonataState.js';\nexport { type MusicEntityMetaModel } from './model/MusicEntityMeta.js';\nexport { useOnLikeClick } from './lib/useOnLikeClick.js';\nexport { useOnDislikeClick } from './lib/useOnDislikeClick.js';\n","import { TrackId } from '@yandex-music-int/resource-collection';\n\n/**\n * Функция подготовки композитных id - {trackId}:{albumId}\n * @param trackIds Массив id треков\n * @param albumId Id альбома\n * @returns МАссив комбинированных id\n */\nexport const getPreparedIds = (trackIds: TrackId[], albumId: number): string[] => {\n    return trackIds.map((trackId: TrackId) => {\n        return `${trackId}:${albumId}`;\n    });\n};\n","import { TrackId } from '@yandex-music-int/resource-collection';\n\nimport { TrackWithArtistsModel } from '@/features/track/index.js';\n\nimport { LoadingState } from '@/shared/lib/index.js';\n\nimport { VolumeItemTextModel, VolumeItemTrackModel } from '../model/VolumeItem.js';\n\nimport { VolumeType } from './types/VolumeType.js';\n\nexport const createVolumeItemText = (data?: number): VolumeItemTextModel => {\n    return {\n        type: VolumeType.TEXT,\n        data: data || null\n    };\n};\n\nexport const createVolumeItemTrack = (\n    id: TrackId,\n    loadingState: LoadingState,\n    data?: TrackWithArtistsModel,\n    position?: number\n): VolumeItemTrackModel => {\n    return {\n        type: VolumeType.TRACK,\n        id,\n        data: data || null,\n        loadingState,\n        position\n    };\n};\n","import { TrackId } from '@yandex-music-int/resource-collection';\n\nexport const getVolumeItemKeyText = (trackId: TrackId): string => {\n    return `${trackId}-text`;\n};\n\nexport const getVolumeItemKeyTrack = (trackId: TrackId): string => {\n    return String(trackId);\n};\n","import { IMSTMap, ISimpleType } from 'mobx-state-tree';\n\nimport { Track } from '@yandex-music-int/resource-collection';\n\nimport { trackWithArtistsResponseToModel } from '@/features/track/index.js';\n\nimport { LoadingState } from '@/shared/lib/index.js';\n\nimport { VolumeItemModel } from '../model/VolumeItem.js';\n\nimport { createVolumeItemTrack, createVolumeItemText } from './createVolumeItem.js';\nimport { getVolumeItemKeyText, getVolumeItemKeyTrack } from './getVolumeItemKey.js';\n\n/**\n * Функция вставки данных о треки в виртуальный скролл\n * @param data Массив треков с полной мета информацией\n * @param items Плоский массив элементов для виртуального скролла\n * @param indexItems Map, где ключ - это id трека, а значение индекс в массиве items\n */\nexport const insertDataToVolumeItems = (\n    data: Track[],\n    items: VolumeItemModel[],\n    indexItems: IMSTMap<ISimpleType<number>>\n): void => {\n    data.forEach((track: Track) => {\n        if (track.albums?.[0]) {\n            const trackIndex = indexItems.get(getVolumeItemKeyTrack(track.id));\n            if (typeof trackIndex !== 'undefined') {\n                items[trackIndex] = createVolumeItemTrack(\n                    track.id,\n                    LoadingState.RESOLVE,\n                    trackWithArtistsResponseToModel(track),\n                    track.albums[0]?.trackPosition?.index\n                );\n            }\n            const volumeIndex = indexItems.get(getVolumeItemKeyText(track.id));\n            if (typeof volumeIndex !== 'undefined') {\n                items[volumeIndex] = createVolumeItemText(track.albums[0]?.trackPosition?.volume);\n            }\n        }\n    });\n};\n","import { IMSTMap, ISimpleType } from 'mobx-state-tree';\n\nimport { AlbumsResourceWithTracksIdsResponse, TrackId } from '@yandex-music-int/resource-collection';\n\nimport { LoadingState } from '@/shared/lib/index.js';\n\nimport { VolumeItemModel } from '../model/VolumeItem.js';\n\nimport { createVolumeItemText, createVolumeItemTrack } from './createVolumeItem.js';\nimport { getVolumeItemKeyText, getVolumeItemKeyTrack } from './getVolumeItemKey.js';\n\nconst COUNT_VOLUMES_WITHOUT_TEXT = 1;\n\n/**\n * Функция для преобразования многомерного массива volumes: [[{id}, {id}], [...]] в плоский массив\n * Если альбом имеет больше 1 диска, перед треками вставляется объект, который отвечает за номер диска\n * @param album Альбом с полем volumes, которое содержит диски и треки альбома\n * @param items Плоский массив элементов для виртуального скролла\n * @param indexItems Map, где ключ - это id трека, а значение индекс в массиве items\n * @param trackIndexInContext Map, где ключ - это id трека, а значение индекс в альбоме (для запуска трека)\n */\nexport const makeFlatVolumeItems = (\n    album: AlbumsResourceWithTracksIdsResponse,\n    items: VolumeItemModel[],\n    indexItems: IMSTMap<ISimpleType<number>>,\n    trackIndexInContext: IMSTMap<ISimpleType<number>>\n): void => {\n    let trackIndex = 0;\n    album.volumes.forEach((volume: Array<Record<'id', TrackId>>) => {\n        if (album.volumes.length > COUNT_VOLUMES_WITHOUT_TEXT && volume[0]) {\n            items.push(createVolumeItemText());\n            indexItems.set(getVolumeItemKeyText(volume[0].id), items.length - 1);\n        }\n        volume.forEach((trackId: Record<'id', TrackId>) => {\n            items.push(createVolumeItemTrack(trackId.id, LoadingState.IDLE));\n            indexItems.set(getVolumeItemKeyTrack(trackId.id), items.length - 1);\n            trackIndexInContext.set(getVolumeItemKeyTrack(trackId.id), trackIndex);\n            trackIndex++;\n        });\n    });\n};\n","import { IMSTMap, ISimpleType } from 'mobx-state-tree';\n\nimport { TrackId } from '@yandex-music-int/resource-collection';\n\nimport { LoadingState } from '@/shared/lib/index.js';\n\nimport { VolumeItemModel } from '../model/VolumeItem.js';\n\nimport { createVolumeItemTrack } from './createVolumeItem.js';\n\n/**\n * Функция для изменения состояния у определенных треков\n * @param trackIds Массив id треков, у которых необходимо поменять состояние\n * @param items Плоский массив элементов для виртуального скролла\n * @param indexItems Map, где ключ - это id трека, а значение индекс в массиве items\n * @param state Новое состояние для конкретного трека\n */\nexport const updateVolumeItemsState = (\n    trackIds: TrackId[],\n    items: VolumeItemModel[],\n    indexItems: IMSTMap<ISimpleType<number>>,\n    state: LoadingState\n): void => {\n    trackIds.forEach((id: TrackId) => {\n        const trackIndex = indexItems.get(String(id));\n        if (typeof trackIndex !== 'undefined') {\n            items[trackIndex] = createVolumeItemTrack(id, state);\n        }\n    });\n};\n","import { types } from 'mobx-state-tree';\n\nimport { AlbumWithArtists } from '@/features/album/index.js';\n\nimport { LoadingState } from '@/shared/lib/index.js';\n\nexport const RelatedAlbums = types.model('RelatedAlbums', {\n    loadingState: types.enumeration(Object.values(LoadingState)),\n    items: types.array(AlbumWithArtists)\n});\n","import { types, Instance } from 'mobx-state-tree';\n\nimport { TrackWithArtists } from '@/features/track/index.js';\n\nimport { LoadingState } from '@/shared/lib/index.js';\n\nimport { VolumeType } from '../lib/types/VolumeType.js';\n\nexport const VolumeItemTrack = types.model('VolumeItemTrack', {\n    type: types.literal(VolumeType.TRACK),\n    id: types.union(types.string, types.number),\n    data: types.maybeNull(TrackWithArtists),\n    position: types.maybe(types.number),\n    loadingState: types.enumeration(Object.values(LoadingState))\n});\n\nexport const VolumeItemText = types.model('VolumeItemText', {\n    type: types.literal(VolumeType.TEXT),\n    data: types.maybeNull(types.number)\n});\n\nexport const VolumeItem = types.union(VolumeItemText, VolumeItemTrack);\n\nexport type VolumeItemModel = Instance<typeof VolumeItem>;\nexport type VolumeItemTextModel = Instance<typeof VolumeItemText>;\nexport type VolumeItemTrackModel = Instance<typeof VolumeItemTrack>;\n","import { cast, flow, getEnv, Instance, types, getRoot } from 'mobx-state-tree';\n\nimport { HttpErrorException, HttpResponseStatusCode } from '@yandex-music-int/http-client';\nimport {\n    Album as AlbumEntity,\n    AlbumsResourceWithTracksIdsResponse,\n    AlbumsResourceWithTracksParams,\n    AlbumType,\n    ArtistsResourceSafeDirectAlbumsParams,\n    ArtistsResourceSafeDirectAlbumsResponse,\n    Period,\n    TopResourceCategoryParams,\n    TopResourceCategoryResponse,\n    TopResourceCategoryType,\n    Track,\n    TracksMetaParams\n} from '@yandex-music-int/resource-collection';\n\nimport { AlbumWithArtists, albumWithArtistsResponseToModel } from '@/features/album/index.js';\n\nimport { LoadingState, StoreEnv, Experiments } from '@/shared/lib/index.js';\n\nimport { getPreparedIds } from '../lib/getPreparedIds.js';\nimport { insertDataToVolumeItems } from '../lib/insertDataToVolumeItems.js';\nimport { makeFlatVolumeItems } from '../lib/makeFlatVolumeItems.js';\nimport { VolumeType } from '../lib/types/VolumeType.js';\nimport { updateVolumeItemsState } from '../lib/updateVolumeItemsState.js';\n\nimport { RelatedAlbums } from './RelatedAlbums.js';\nimport { VolumeItem } from './VolumeItem.js';\n\nconst INITIAL_TRACKS_COUNT_TO_FETCH = 10;\nconst RELATED_ALBUMS_PAGE_SIZE = 8;\n\ninterface ArtistsResourceParams extends Omit<ArtistsResourceSafeDirectAlbumsParams, 'artistId'> {\n    artistId?: string;\n}\n\nexport const Album = types\n    .model('Album', {\n        meta: types.maybeNull(AlbumWithArtists),\n        items: types.array(VolumeItem),\n        indexItems: types.map(types.number),\n        trackIndexInContext: types.map(types.number),\n        loadingState: types.enumeration(Object.values(LoadingState)),\n        errorStatusCode: types.maybeNull(types.number),\n        latestGenreAlbums: RelatedAlbums,\n        otherArtistAlbums: RelatedAlbums,\n        otherAlbumVersions: types.array(AlbumWithArtists)\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .views((self) => {\n        return {\n            get isNonMusicType(): boolean {\n                if (self.meta?.type) {\n                    return [AlbumType.PODCAST, AlbumType.AUDIOBOOK].includes(self.meta.type);\n                }\n\n                return false;\n            }\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .views((self) => {\n        return {\n            get isOtherArtistAlbumsAvailable(): boolean {\n                return Boolean(\n                    !self.isNonMusicType && self.meta?.artists?.length === 1 && !self.meta?.artists[0]?.various\n                );\n            },\n\n            get isLatestGenreAlbumsAvailable(): boolean {\n                return Boolean(!self.isNonMusicType && self.meta?.genre);\n            },\n\n            get isNotFound(): boolean {\n                return (\n                    self.loadingState === LoadingState.REJECT &&\n                    self.errorStatusCode === HttpResponseStatusCode.NOT_FOUND\n                );\n            },\n\n            get isAlbumLoadingError(): boolean {\n                return self.loadingState === LoadingState.REJECT;\n            },\n\n            get isOtherAlbumVersionsExist(): boolean {\n                return Boolean(\n                    self.loadingState === LoadingState.IDLE ||\n                        self.loadingState === LoadingState.PENDING ||\n                        (self.otherAlbumVersions && self.otherAlbumVersions.length > 0)\n                );\n            },\n\n            get isLatestGenreAlbumsExist(): boolean {\n                return Boolean(\n                    self.latestGenreAlbums.loadingState === LoadingState.IDLE ||\n                        self.latestGenreAlbums.loadingState === LoadingState.PENDING ||\n                        (self.latestGenreAlbums.items && self.latestGenreAlbums.items.length > 0)\n                );\n            },\n\n            get isOtherArtistAlbumsExist(): boolean {\n                return Boolean(\n                    self.otherArtistAlbums.loadingState === LoadingState.IDLE ||\n                        self.otherArtistAlbums.loadingState === LoadingState.PENDING ||\n                        (self.otherArtistAlbums.items && self.otherArtistAlbums.items.length > 0)\n                );\n            },\n\n            get isAlbumLoading(): boolean {\n                return self.loadingState === LoadingState.IDLE || self.loadingState === LoadingState.PENDING;\n            },\n\n            get isLatestGenreAlbumsLoading(): boolean {\n                return (\n                    self.latestGenreAlbums.loadingState === LoadingState.IDLE ||\n                    self.latestGenreAlbums.loadingState === LoadingState.PENDING\n                );\n            },\n\n            get isOtherArtistAlbumsLoading(): boolean {\n                return (\n                    self.otherArtistAlbums.loadingState === LoadingState.IDLE ||\n                    self.otherArtistAlbums.loadingState === LoadingState.PENDING\n                );\n            }\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getLatestGenreAlbums: flow(function* (\n                params: TopResourceCategoryParams\n            ): Generator<Promise<TopResourceCategoryResponse>, void, TopResourceCategoryResponse> {\n                const { topResource, logger } = getEnv<StoreEnv>(self);\n\n                if (self.latestGenreAlbums.loadingState === LoadingState.PENDING) {\n                    return;\n                }\n\n                try {\n                    self.latestGenreAlbums.loadingState = LoadingState.PENDING;\n\n                    const data = yield topResource.getTopByGenre(params);\n\n                    self.latestGenreAlbums.items = cast(data.albums.map(albumWithArtistsResponseToModel));\n\n                    self.latestGenreAlbums.loadingState = LoadingState.RESOLVE;\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    self.latestGenreAlbums.loadingState = LoadingState.REJECT;\n                }\n            })\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getOtherArtistAlbums: flow(function* (\n                params: ArtistsResourceParams,\n                albumId: number\n            ): Generator<\n                Promise<ArtistsResourceSafeDirectAlbumsResponse>,\n                void,\n                ArtistsResourceSafeDirectAlbumsResponse\n            > {\n                const { artistsResource, logger } = getEnv<StoreEnv>(self);\n\n                if (self.otherArtistAlbums.loadingState === LoadingState.PENDING) {\n                    return;\n                }\n\n                try {\n                    if (!params.artistId) {\n                        self.otherArtistAlbums.loadingState = LoadingState.REJECT;\n\n                        return;\n                    }\n\n                    self.otherArtistAlbums.loadingState = LoadingState.PENDING;\n\n                    const data = yield artistsResource.getSafeDirectAlbums({\n                        ...params,\n                        artistId: params.artistId\n                    });\n\n                    self.otherArtistAlbums.items = cast(\n                        data.albums\n                            .filter((album: AlbumEntity) => String(album.id) !== String(albumId))\n                            .map(albumWithArtistsResponseToModel)\n                    );\n\n                    self.otherArtistAlbums.loadingState = LoadingState.RESOLVE;\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    self.otherArtistAlbums.loadingState = LoadingState.REJECT;\n                }\n            })\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getTracks: flow(function* ({ trackIds }: TracksMetaParams): Generator<Promise<Track[]>, void, Track[]> {\n                const { tracksResource, logger } = getEnv<StoreEnv>(self);\n\n                try {\n                    if (!self.meta?.id) {\n                        return;\n                    }\n\n                    updateVolumeItemsState(trackIds, self.items, self.indexItems, LoadingState.PENDING);\n\n                    const data = yield tracksResource.getTracksMeta({\n                        trackIds: getPreparedIds(trackIds, self.meta.id)\n                    });\n\n                    insertDataToVolumeItems(data, self.items, self.indexItems);\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    updateVolumeItemsState(trackIds, self.items, self.indexItems, LoadingState.REJECT);\n                }\n            })\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getData: flow(function* ({\n                albumId\n            }: AlbumsResourceWithTracksParams): Generator<\n                Promise<AlbumsResourceWithTracksIdsResponse | unknown>,\n                void,\n                AlbumsResourceWithTracksIdsResponse\n            > {\n                const { albumResource, logger } = getEnv<StoreEnv>(self);\n                // @ts-ignore\n                const { experiments } = getRoot(self);\n                const isAlbumVersionsDisabled = experiments.checkExperiment(\n                    Experiments.WebNextAlbumDisableVersions,\n                    'on'\n                );\n                const isAlbumTracksDisabled = experiments.checkExperiment(Experiments.WebNextAlbumDisableTracks, 'on');\n                const isLatestGenreAlbumsDisabled = experiments.checkExperiment(\n                    Experiments.WebNextAlbumDisableLatestGenreAlbums,\n                    'on'\n                );\n                const isOtherArtistAlbumsDisabled = experiments.checkExperiment(\n                    Experiments.WebNextAlbumDisableOtherArtistAlbums,\n                    'on'\n                );\n\n                if (self.loadingState === LoadingState.PENDING) {\n                    return;\n                }\n\n                try {\n                    self.loadingState = LoadingState.PENDING;\n\n                    const data = yield albumResource.getAlbumWithTracksIds({\n                        albumId,\n                        resumeStream: false\n                    });\n\n                    if (data?.error === 'not-found') {\n                        self.errorStatusCode = HttpResponseStatusCode.NOT_FOUND;\n                        self.loadingState = LoadingState.REJECT;\n                        self.otherArtistAlbums.loadingState = LoadingState.REJECT;\n                        self.latestGenreAlbums.loadingState = LoadingState.REJECT;\n                        return;\n                    }\n\n                    self.meta = albumWithArtistsResponseToModel(data);\n\n                    if (!isAlbumVersionsDisabled && data.duplicates && data.duplicates.length > 0) {\n                        self.otherAlbumVersions = cast(data.duplicates?.map(albumWithArtistsResponseToModel));\n                    }\n\n                    if (!isAlbumTracksDisabled) {\n                        makeFlatVolumeItems(data, self.items, self.indexItems, self.trackIndexInContext);\n\n                        const initialTrackIds: string[] = [];\n\n                        for (let index = 0; index < INITIAL_TRACKS_COUNT_TO_FETCH; index++) {\n                            const item = self.items[index];\n                            if (item?.type === VolumeType.TRACK) {\n                                initialTrackIds.push(String(item.id));\n                            }\n                        }\n\n                        yield self.getTracks({ trackIds: initialTrackIds });\n                    }\n                    let latestGenreAlbumsRequest;\n                    let getOtherArtistAlbumsRequest;\n\n                    if (!isLatestGenreAlbumsDisabled && self.isLatestGenreAlbumsAvailable) {\n                        latestGenreAlbumsRequest = self.getLatestGenreAlbums({\n                            category: TopResourceCategoryType.RECENT_ALBUMS,\n                            period: Period.WEEK,\n                            pageSize: RELATED_ALBUMS_PAGE_SIZE,\n                            genre: data.genre\n                        });\n                    } else {\n                        self.latestGenreAlbums.loadingState = LoadingState.RESOLVE;\n                    }\n\n                    if (!isOtherArtistAlbumsDisabled && self.isOtherArtistAlbumsAvailable) {\n                        getOtherArtistAlbumsRequest = self.getOtherArtistAlbums(\n                            {\n                                artistId: String(data.artists[0]?.id),\n                                limit: RELATED_ALBUMS_PAGE_SIZE\n                            },\n                            albumId\n                        );\n                    } else {\n                        self.otherArtistAlbums.loadingState = LoadingState.RESOLVE;\n                    }\n\n                    yield Promise.allSettled([latestGenreAlbumsRequest, getOtherArtistAlbumsRequest]);\n\n                    // @ts-expect-error\n                    // TS считает, что статусы никогда не пересекутся, но на самом деле мы можем уйти со страницы,\n                    // раньше чем закончится последний ретрай и/или запрос, когда уже проставлен статус IDLE\n                    if (self.loadingState !== LoadingState.IDLE) {\n                        self.loadingState = LoadingState.RESOLVE;\n                    }\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    if (\n                        error instanceof HttpErrorException &&\n                        (error.statusCode === HttpResponseStatusCode.NOT_FOUND ||\n                            error.statusCode === HttpResponseStatusCode.BAD_REQUEST)\n                    ) {\n                        self.errorStatusCode = HttpResponseStatusCode.NOT_FOUND;\n                    }\n\n                    if (self.loadingState !== LoadingState.IDLE) {\n                        self.loadingState = LoadingState.REJECT;\n                        self.otherArtistAlbums.loadingState = LoadingState.REJECT;\n                        self.latestGenreAlbums.loadingState = LoadingState.REJECT;\n                    }\n                }\n            }),\n            reset() {\n                self.meta = null;\n                self.errorStatusCode = null;\n                self.items = cast([]);\n                self.indexItems.clear();\n                self.trackIndexInContext.clear();\n                self.loadingState = LoadingState.IDLE;\n                self.latestGenreAlbums.loadingState = LoadingState.IDLE;\n                self.latestGenreAlbums.items = cast([]);\n                self.otherArtistAlbums.loadingState = LoadingState.IDLE;\n                self.otherArtistAlbums.items = cast([]);\n                self.otherAlbumVersions = cast([]);\n            }\n        };\n    });\n\nexport type AlbumModel = Instance<typeof Album>;\n","export { AlbumPage } from './ui/Album/Album.js';\nexport { AlbumNotFoundPage } from './ui/AlbumNotFound/AlbumNotFound.js';\nexport { Album } from './model/Album.js';\n","export enum VolumeType {\n    TRACK = 'track',\n    TEXT = 'text'\n}\n","'use client';\n\nimport { clsx } from 'clsx';\nimport { observer } from 'mobx-react-lite';\nimport { notFound } from 'next/navigation.js';\nimport { CSSProperties, ReactElement, use, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ListRange } from 'react-virtuoso';\n\nimport { YaMusicContexts } from '@yandex-music-int/player-contexts';\nimport { useElementOffsetY } from '@yandex-music-int/sol/common/hooks/useElementOffsetY.js';\nimport { Caption } from '@yandex-music-int/sol/components/Typography';\n\nimport { Header } from '@/widgets/content/index.js';\nimport { PageHeaderAlbum, PageHeaderShimmer } from '@/widgets/page-header/index.js';\n\nimport { AlbumsCarousel } from '@/features/album/index.js';\nimport { TrackAlbum } from '@/features/track/index.js';\n\nimport {\n    CONTAINER_COOKIE_STORAGE,\n    getAverageBackgroundColor,\n    LoadingState,\n    NotificationContainerId,\n    TrackVariant,\n    useContainer,\n    useRumPage,\n    AnalyticsPageProvider,\n    useCreateFrom,\n    AnalyticsBlock,\n    AnalyticsPage,\n    useStore,\n    useNotify,\n    Experiments\n} from '@/shared/lib/index.js';\nimport { Footer, BaseNotificationError, TextShimmer, TrackShimmer, VirtualScroll } from '@/shared/ui/index.js';\n\nimport { VolumeType } from '../../lib/types/VolumeType.js';\nimport { VolumeItemModel } from '../../model/VolumeItem.js';\n\nimport styles from './Album.module.scss';\n\nconst DEBOUNCE_DURATION_MS = 300;\nconst DEFAULT_TRACK_SHIMMER_COUNT = 10;\n\ninterface Props {\n    albumId?: string | number;\n}\n\nconst HEADER_TO_VIEWPORT_OFFSET_NEW_NAVIGATION = 93;\nconst HEADER_TO_VIEWPORT_OFFSET_OLD_NAVIGATION = 17;\n\nexport const AlbumPage = observer(({ albumId }: Props): ReactElement => {\n    const from = useCreateFrom({ pageId: AnalyticsPage.ALBUM, blockId: AnalyticsBlock.ALBUM });\n    const albumNotificationCounter = useRef(0);\n\n    const container = useContainer();\n    const { notify } = useNotify();\n    const cookies = container.get(CONTAINER_COOKIE_STORAGE);\n    let isWebNextNavigationOn = false;\n\n    if (process.env.BUILD_TYPE === 'web') {\n        isWebNextNavigationOn = cookies.get('WebNextNavigation') === 'on';\n    }\n\n    const { album, experiments } = useStore();\n    const { formatMessage } = useIntl();\n\n    const averageColor = useMemo(() => {\n        return getAverageBackgroundColor(album?.meta?.averageColor);\n    }, [album?.meta?.averageColor]);\n\n    const { ref, offsetY } = useElementOffsetY();\n\n    const headerStyle = useMemo(() => {\n        if (offsetY !== undefined) {\n            const initialTranslateHeader = isWebNextNavigationOn\n                ? HEADER_TO_VIEWPORT_OFFSET_NEW_NAVIGATION\n                : HEADER_TO_VIEWPORT_OFFSET_OLD_NAVIGATION;\n            const translate = offsetY - initialTranslateHeader;\n            return {\n                '--average-color-background': averageColor,\n                transform: `translateY(${offsetY >= initialTranslateHeader ? 0 : translate}px)`,\n                opacity: 1\n            };\n        }\n        return {};\n    }, [offsetY, isWebNextNavigationOn, averageColor]);\n\n    useEffect(() => {\n        return () => {\n            if (album.id !== albumId) {\n                album.reset();\n                albumNotificationCounter.current = 0;\n            }\n        };\n    }, [album, albumId]);\n\n    // TODO: существует до момента, пока не появится обработка ошибок моделей\n    useEffect(() => {\n        if (album.isAlbumLoadingError && !album.isNotFound) {\n            if (albumNotificationCounter && albumNotificationCounter.current === 0) {\n                notify(\n                    <BaseNotificationError error={formatMessage({ id: 'album-errors.error-during-loading-album' })} />,\n                    {\n                        containerId: NotificationContainerId.ERROR\n                    }\n                );\n\n                albumNotificationCounter.current++;\n            }\n        }\n\n        if (\n            album.otherArtistAlbums.loadingState === LoadingState.REJECT ||\n            album.latestGenreAlbums.loadingState === LoadingState.REJECT\n        ) {\n            if (albumNotificationCounter && albumNotificationCounter.current === 0) {\n                notify(\n                    <BaseNotificationError\n                        error={formatMessage({ id: 'album-errors.error-during-loading-similar-albums' })}\n                    />,\n                    { containerId: NotificationContainerId.ERROR }\n                );\n\n                albumNotificationCounter.current++;\n            }\n        }\n    }, [\n        album.isAlbumLoadingError,\n        album.isNotFound,\n        album.latestGenreAlbums.loadingState,\n        album.otherArtistAlbums.loadingState,\n        formatMessage,\n        notify\n    ]);\n\n    const albumHeader = useMemo(() => {\n        if (album.isAlbumLoading || album.isAlbumLoadingError) {\n            return <PageHeaderShimmer className={styles.header} />;\n        }\n        return (\n            <PageHeaderAlbum\n                album={album.meta}\n                className={styles.header}\n                aria-labelledby=\"virtual-grid-header\"\n                ref={ref}\n            />\n        );\n    }, [album.isAlbumLoading, album.isAlbumLoadingError, album.meta, ref]);\n\n    const customComponents = useMemo(() => {\n        return {\n            Header: () => {\n                return (\n                    <>\n                        <Header />\n                        {albumHeader}\n                    </>\n                );\n            },\n            Footer: () => (\n                <div className={styles.footerContainer}>\n                    <div>\n                        {album.isOtherAlbumVersionsExist && (\n                            <AlbumsCarousel\n                                className={styles.carousel}\n                                containerClassName={clsx(styles.carouselContainer, styles.important)}\n                                isLoading={album.isAlbumLoading}\n                                title={formatMessage({ id: 'entity-names.other-album-versions' })}\n                                albums={album.otherAlbumVersions}\n                            />\n                        )}\n                        {album.isLatestGenreAlbumsExist && (\n                            <AlbumsCarousel\n                                className={styles.carousel}\n                                containerClassName={clsx(styles.carouselContainer, styles.important)}\n                                isLoading={album.isLatestGenreAlbumsLoading}\n                                title={formatMessage({ id: 'entity-names.new-albums-in-genre' })}\n                                albums={album.latestGenreAlbums.items}\n                            />\n                        )}\n                        {album.isOtherArtistAlbumsExist && (\n                            <AlbumsCarousel\n                                className={styles.carousel}\n                                containerClassName={clsx(styles.carouselContainer, styles.important)}\n                                isLoading={album.isOtherArtistAlbumsLoading}\n                                title={formatMessage({ id: 'entity-names.other-albums-of-artist' })}\n                                albums={album.otherArtistAlbums.items}\n                            />\n                        )}\n                    </div>\n                    <Footer className={styles.footer} />\n                </div>\n            )\n        };\n    }, [\n        albumHeader,\n        album.isOtherAlbumVersionsExist,\n        album.isAlbumLoading,\n        album.otherAlbumVersions,\n        album.isLatestGenreAlbumsExist,\n        album.isLatestGenreAlbumsLoading,\n        album.latestGenreAlbums.items,\n        album.isOtherArtistAlbumsExist,\n        album.isOtherArtistAlbumsLoading,\n        album.otherArtistAlbums.items,\n        formatMessage\n    ]);\n\n    const getAlbumTracksByRange = useCallback(\n        (range: ListRange) => {\n            const trackIds = [];\n            for (let i = range.startIndex; i <= range.endIndex; i++) {\n                const item = album.items[i] as VolumeItemModel;\n                if (item?.type === VolumeType.TRACK && item?.loadingState === LoadingState.IDLE) {\n                    trackIds.push(item.id);\n                }\n            }\n            if (trackIds.length) {\n                album.getTracks({\n                    trackIds\n                });\n            }\n        },\n        [album]\n    );\n\n    if (album.loadingState === LoadingState.IDLE) {\n        use(\n            album.getData({\n                albumId\n            })\n        );\n    }\n\n    useRumPage(album.loadingState === LoadingState.RESOLVE);\n\n    if (album.isNotFound) {\n        notFound();\n    }\n\n    const itemContentCallback = (index: number): ReactElement | undefined => {\n        const item = album?.items?.[index] as VolumeItemModel;\n\n        if (!item) {\n            return <TrackShimmer className={styles.shimmerItem} variant={TrackVariant.ALBUM} />;\n        }\n\n        if (!item?.data) {\n            switch (item?.type) {\n                case VolumeType.TEXT:\n                    return <TextShimmer className={styles.shimmerItem} />;\n\n                case VolumeType.TRACK:\n                    return <TrackShimmer className={styles.shimmerItem} variant={TrackVariant.ALBUM} />;\n            }\n        }\n\n        switch (item?.type) {\n            case VolumeType.TRACK:\n                return (\n                    <TrackAlbum\n                        track={item.data}\n                        position={item.position}\n                        albumArtists={album?.meta?.artists}\n                        playContextParams={{\n                            contextData: {\n                                type: YaMusicContexts.Album,\n                                meta: {\n                                    id: album.meta.id\n                                },\n                                from\n                            },\n                            queueParams: {\n                                index: album.trackIndexInContext.get(item.id)\n                            }\n                        }}\n                    />\n                );\n\n            case VolumeType.TEXT:\n                return (\n                    <div className={clsx(styles.shimmerItem, styles.textItem)}>\n                        <Caption variant=\"span\" type=\"entity\" size=\"m\" weight=\"medium\" className={styles.text}>\n                            <FormattedMessage id=\"entity-names.disk-number\" values={{ number: item.data }} />\n                        </Caption>\n                    </div>\n                );\n        }\n    };\n\n    const isAlbumTracksDisabled = experiments.checkExperiment(Experiments.WebNextAlbumDisableTracks, 'on');\n\n    const itemCount = isAlbumTracksDisabled ? 0 : album.items.length || DEFAULT_TRACK_SHIMMER_COUNT;\n\n    return (\n        <AnalyticsPageProvider pageId={AnalyticsPage.ALBUM}>\n            <div className={styles.averageColorBackground} style={headerStyle as CSSProperties} />\n            <VirtualScroll\n                className={clsx(styles.root, styles.important)}\n                listClassName={styles.content}\n                customComponents={customComponents}\n                totalCount={itemCount}\n                // Для корректного обновления виртуального скролла\n                // eslint-disable-next-line react/jsx-no-bind\n                itemContentCallback={itemContentCallback}\n                onGetDataByRange={getAlbumTracksByRange}\n                debounceDurationInMs={DEBOUNCE_DURATION_MS}\n                initialItemCount={itemCount}\n            />\n        </AnalyticsPageProvider>\n    );\n});\n","'use client';\n\nimport { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\n\nimport { NotFound } from '@/widgets/not-found/index.js';\n\nimport { useStore } from '@/shared/lib/index.js';\n\nexport const AlbumNotFoundPage = observer(() => {\n    const { album } = useStore();\n\n    useEffect(() => {\n        return () => {\n            album.reset();\n        };\n    }, [album]);\n\n    return <NotFound />;\n});\n","import { cast } from 'mobx-state-tree';\n\nimport { Artist } from '@yandex-music-int/resource-collection';\n\nimport { ArtistMetaModel } from '@/features/artist/index.js';\n\nimport { artistResponseToModel } from '@/entities/artist/index.js';\n\nexport const artistBriefInfoResponseToMeta = (\n    artist: Artist,\n    stats?: { lastMonthListeners: number }\n): ArtistMetaModel => {\n    return cast({\n        artist: artistResponseToModel(artist),\n        lastMonthListeners: stats?.lastMonthListeners\n    });\n};\n","import { Album } from '@yandex-music-int/resource-collection';\n\nimport { AlbumWithArtistsModel, albumWithArtistsResponseToModel } from '@/features/album/index.js';\n\nexport const concatPopularAlbums = (\n    albums: Album[] = [],\n    alsoAlbums: Album[] = [],\n    count: number\n): AlbumWithArtistsModel[] => {\n    let popularAlbums: Album[] = albums;\n\n    if (albums.length < count) {\n        popularAlbums = popularAlbums.concat(alsoAlbums);\n    }\n\n    return popularAlbums.map(albumWithArtistsResponseToModel).slice(0, count);\n};\n","import { cast, flow, getEnv, Instance, types, getRoot } from 'mobx-state-tree';\n\nimport { HttpErrorException, HttpResponseStatusCode } from '@yandex-music-int/http-client';\nimport {\n    ArtistsResourceBriefInfoParams,\n    ArtistsResourceBriefInfoResponse\n} from '@yandex-music-int/resource-collection';\n\nimport { AlbumWithArtists, albumWithArtistsResponseToModel } from '@/features/album/index.js';\nimport { ArtistMeta } from '@/features/artist/index.js';\nimport { playlistResponseToMetaModel, PlaylistWithArtists } from '@/features/playlist/index.js';\nimport { TrackWithArtists, trackWithArtistsResponseToModel } from '@/features/track/index.js';\n\nimport { Artist as ArtistEntity, artistResponseToModel } from '@/entities/artist/index.js';\n\nimport { LoadingState, StoreEnv, Experiments } from '@/shared/lib/index.js';\n\nimport { artistBriefInfoResponseToMeta } from '../lib/artistBriefInfoResponseToMeta.js';\nimport { concatPopularAlbums } from '../lib/concatPopularAlbums.js';\n\nconst POPULAR_TRACKS_COUNT = 5;\nconst SIMILAR_ARTISTS_COUNT = 9;\nconst POPULAR_ALBUMS_COUNT = 9;\n\nexport const Artist = types\n    .model('Artist', {\n        loadingState: types.enumeration(Object.values(LoadingState)),\n        meta: types.maybeNull(ArtistMeta),\n        popularTracks: types.array(TrackWithArtists),\n        lastRelease: types.maybeNull(AlbumWithArtists),\n        similarArtists: types.array(ArtistEntity),\n        popularAlbums: types.array(AlbumWithArtists),\n        playlists: types.array(PlaylistWithArtists),\n        errorStatusCode: types.maybeNull(types.number)\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getData: flow(function* ({\n                artistId\n            }: ArtistsResourceBriefInfoParams): Generator<\n                Promise<ArtistsResourceBriefInfoResponse>,\n                void,\n                ArtistsResourceBriefInfoResponse\n            > {\n                // @ts-ignore\n                const { slides, experiments } = getRoot(self);\n                const { artistsResource, logger } = getEnv<StoreEnv>(self);\n                const isLastReleasesDisabled = experiments.checkExperiment(\n                    Experiments.WebNextArtistDisableLastReleases,\n                    'on'\n                );\n                const isPopularTracksDisabled = experiments.checkExperiment(\n                    Experiments.WebNextArtistDisablePopularTracks,\n                    'on'\n                );\n                const isSimilarArtistsDisabled = experiments.checkExperiment(\n                    Experiments.WebNextArtistDisableSimilarArtists,\n                    'on'\n                );\n                const isPopularAlbumsDisabled = experiments.checkExperiment(\n                    Experiments.WebNextArtistDisablePopularAlbums,\n                    'on'\n                );\n                const isPlaylistsDisabled = experiments.checkExperiment(\n                    Experiments.WebNextArtistDisablePlaylists,\n                    'on'\n                );\n\n                if (self.loadingState === LoadingState.PENDING) {\n                    return;\n                }\n\n                try {\n                    self.loadingState = LoadingState.PENDING;\n\n                    const {\n                        popularTracks,\n                        error,\n                        artist,\n                        stats,\n                        albums,\n                        playlists,\n                        alsoAlbums,\n                        similarArtists,\n                        lastReleases\n                    } = yield artistsResource.getBriefInfo({\n                        artistId,\n                        popularTracksCount: POPULAR_TRACKS_COUNT,\n                        fetchPlaylistLikesCounts: true\n                    });\n\n                    if (error === 'not-found' || artist?.error === 'not-found') {\n                        self.errorStatusCode = HttpResponseStatusCode.NOT_FOUND;\n                        self.loadingState = LoadingState.REJECT;\n                        return;\n                    }\n\n                    self.meta = cast(artistBriefInfoResponseToMeta(artist, stats));\n\n                    if (!isLastReleasesDisabled && lastReleases && lastReleases.length > 0) {\n                        const lastRelease = lastReleases[0];\n\n                        if (lastRelease && albums && albums.length > 1) {\n                            self.lastRelease = cast(albumWithArtistsResponseToModel(lastRelease));\n                        }\n                    }\n\n                    if (!isPopularTracksDisabled && popularTracks && popularTracks.length > 0) {\n                        self.popularTracks = cast(\n                            popularTracks.slice(0, POPULAR_TRACKS_COUNT).map(trackWithArtistsResponseToModel)\n                        );\n                    }\n\n                    if (!isSimilarArtistsDisabled && similarArtists && similarArtists.length > 0) {\n                        self.similarArtists = cast(\n                            similarArtists.slice(0, SIMILAR_ARTISTS_COUNT).map(artistResponseToModel)\n                        );\n                    }\n\n                    if (!isPopularAlbumsDisabled) {\n                        self.popularAlbums = cast(concatPopularAlbums(albums, alsoAlbums, POPULAR_ALBUMS_COUNT));\n                    }\n\n                    if (!isPlaylistsDisabled && playlists && playlists.length > 0) {\n                        self.playlists = cast(playlists.map(playlistResponseToMetaModel));\n                    }\n\n                    slides.artistReset();\n                    if (slides.artistSlidesLoadingState === LoadingState.IDLE) {\n                        yield slides.getArtistSlides({\n                            artistId\n                        });\n                    }\n\n                    // @ts-expect-error\n                    // TS считает, что статусы никогда не пересекутся, но на самом деле мы можем уйти со страницы,\n                    // раньше чем закончится последний ретрай и/или запрос, когда уже проставлен статус IDLE\n                    if (self.loadingState !== LoadingState.IDLE) {\n                        self.loadingState = LoadingState.RESOLVE;\n                    }\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    if (\n                        error instanceof HttpErrorException &&\n                        (error.statusCode === HttpResponseStatusCode.NOT_FOUND ||\n                            error.statusCode === HttpResponseStatusCode.BAD_REQUEST)\n                    ) {\n                        self.errorStatusCode = HttpResponseStatusCode.NOT_FOUND;\n                    }\n\n                    if (self.loadingState !== LoadingState.IDLE) {\n                        self.loadingState = LoadingState.REJECT;\n                    }\n                }\n            }),\n            reset() {\n                self.loadingState = LoadingState.IDLE;\n                self.meta = null;\n                self.errorStatusCode = null;\n                self.lastRelease = null;\n                self.popularTracks = cast([]);\n                self.similarArtists = cast([]);\n                self.playlists = cast([]);\n            }\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .views((self) => {\n        return {\n            get isLoading(): boolean {\n                return self.loadingState === LoadingState.IDLE || self.loadingState === LoadingState.PENDING;\n            },\n\n            get isPopularTracksExist(): boolean {\n                return (\n                    self.loadingState === LoadingState.IDLE ||\n                    self.loadingState === LoadingState.PENDING ||\n                    self.popularTracks.length > 0\n                );\n            },\n\n            get popularAlbumsTitle(): string {\n                const counts = self.meta?.artist?.counts;\n\n                if (counts && counts.albums > 0 && counts.albums < POPULAR_ALBUMS_COUNT && counts.compilations > 0) {\n                    return 'Популярные альбомы и сборники';\n                } else if (counts && counts.albums > 0) {\n                    return 'Популярные альбомы';\n                }\n\n                return 'Популярные сборники';\n            },\n\n            get isPopularAlbumsExists(): boolean {\n                return (\n                    self.loadingState === LoadingState.IDLE ||\n                    self.loadingState === LoadingState.PENDING ||\n                    self.popularAlbums.length > 0\n                );\n            },\n\n            get isSimilarArtistsExist(): boolean {\n                return (\n                    self.loadingState === LoadingState.IDLE ||\n                    self.loadingState === LoadingState.PENDING ||\n                    self.similarArtists.length > 0\n                );\n            },\n\n            get isPlaylistsExist() {\n                return (\n                    self.loadingState === LoadingState.IDLE ||\n                    self.loadingState === LoadingState.PENDING ||\n                    (self.playlists && self.playlists.length > 0)\n                );\n            },\n\n            get isLastReleaseExists(): boolean {\n                return (\n                    self.loadingState === LoadingState.IDLE ||\n                    self.loadingState === LoadingState.PENDING ||\n                    Boolean(self.lastRelease)\n                );\n            },\n\n            get isNotFound(): boolean {\n                return (\n                    self.loadingState === LoadingState.REJECT &&\n                    self.errorStatusCode === HttpResponseStatusCode.NOT_FOUND\n                );\n            }\n        };\n    });\n\nexport type ArtistModel = Instance<typeof Artist>;\n","export { ArtistPage } from './ui/Artist/Artist.js';\nexport { ArtistNotFoundPage } from './ui/ArtistNotFound/ArtistNotFound.js';\nexport { Artist } from './model/Artist.js';\n","'use client';\n\nimport { clsx } from 'clsx';\nimport { observer } from 'mobx-react-lite';\nimport { notFound } from 'next/navigation.js';\nimport { ReactElement, use, useEffect, useMemo, CSSProperties } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { YaMusicContextData, YaMusicContexts } from '@yandex-music-int/player-contexts';\nimport { MusicEntityData } from '@yandex-music-int/player-entities';\nimport { useElementOffsetY } from '@yandex-music-int/sol/common/hooks/useElementOffsetY.js';\nimport { ScrollableContent } from '@yandex-music-int/sol/components/ScrollableContent';\nimport { PlayContextParams } from '@yandex-music-int/sonata';\n\nimport { Header } from '@/widgets/content/index.js';\nimport { PageHeaderArtist, PageHeaderShimmer } from '@/widgets/page-header/index.js';\n\nimport { AlbumsCarousel, AlbumCard } from '@/features/album/index.js';\nimport { ArtistCard } from '@/features/artist/index.js';\nimport { PlaylistsCarousel } from '@/features/playlist/index.js';\nimport { TrackPlaylist, TrackWithArtistsModel } from '@/features/track/index.js';\n\nimport { ArtistModel } from '@/entities/artist/index.js';\nimport { hasDuplicatesBefore } from '@/entities/playlist/index.js';\n\nimport {\n    LoadingState,\n    TrackVariant,\n    useStore,\n    getAverageBackgroundColor,\n    useContainer,\n    CONTAINER_COOKIE_STORAGE,\n    useRumPage,\n    AnalyticsPageProvider,\n    AnalyticsBlock,\n    AnalyticsPage,\n    useCreateFrom,\n    Experiments\n} from '@/shared/lib/index.js';\nimport { CarouselBlock, BlockHeader, EntityCardShimmer, TracksList, Footer } from '@/shared/ui/index.js';\n\nimport styles from './Artist.module.scss';\n\ninterface Props {\n    artistId?: string | number;\n}\n\nconst HEADER_TO_VIEWPORT_OFFSET_NEW_NAVIGATION = 93;\nconst HEADER_TO_VIEWPORT_OFFSET_OLD_NAVIGATION = 17;\n\nexport const ArtistPage = observer(({ artistId }: Props): ReactElement => {\n    const from = useCreateFrom({ pageId: AnalyticsPage.ARTIST, blockId: AnalyticsBlock.ARTIST });\n    const container = useContainer();\n    const cookies = container.get(CONTAINER_COOKIE_STORAGE);\n    let isWebNextNavigationOn = false;\n\n    if (process.env.BUILD_TYPE === 'web') {\n        isWebNextNavigationOn = cookies.get('WebNextNavigation') === 'on';\n    }\n\n    const { artist, slides, experiments } = useStore();\n    const { formatMessage } = useIntl();\n\n    const { ref, offsetY } = useElementOffsetY();\n\n    const averageColor = useMemo(() => {\n        return getAverageBackgroundColor(artist?.meta?.artist?.averageColor);\n    }, [artist?.meta?.artist?.averageColor]);\n\n    const headerStyle = useMemo(() => {\n        if (offsetY !== undefined) {\n            const initialTranslateHeader = isWebNextNavigationOn\n                ? HEADER_TO_VIEWPORT_OFFSET_NEW_NAVIGATION\n                : HEADER_TO_VIEWPORT_OFFSET_OLD_NAVIGATION;\n            const translate = offsetY - initialTranslateHeader;\n            return {\n                '--average-color-background': averageColor,\n                transform: `translateY(${offsetY >= initialTranslateHeader ? 0 : translate}px)`,\n                opacity: 1\n            };\n        }\n        return {};\n    }, [offsetY, isWebNextNavigationOn, averageColor]);\n\n    useEffect(() => {\n        return () => {\n            if (artist.id !== artistId) {\n                artist.reset();\n            }\n        };\n    }, [artist, artistId]);\n\n    if (artist.loadingState === LoadingState.IDLE) {\n        use(\n            artist.getData({\n                artistId\n            })\n        );\n    }\n\n    useRumPage(artist.loadingState === LoadingState.RESOLVE);\n\n    if (artist.isNotFound) {\n        notFound();\n    }\n\n    const coverLink = useMemo(() => {\n        if (experiments.checkExperiment(Experiments.WebRewind2023, 'on') && slides.artistItems.length > 0) {\n            return `/rewind2023/artist/${artistId}`;\n        }\n        return;\n    }, [artistId, experiments, slides.artistItems.length]);\n\n    const playContextParams = (id: string): PlayContextParams<YaMusicContextData, MusicEntityData> => {\n        return {\n            contextData: {\n                type: YaMusicContexts.Artist,\n                meta: {\n                    id: Number(artistId)\n                },\n                from\n            },\n            queueParams: {\n                index: artist.popularTracks.findIndex((item: TrackWithArtistsModel) => item.id === id)\n            },\n            loadContextMeta: true\n        };\n    };\n\n    const artistHeader = useMemo(() => {\n        if (artist.isLoading) {\n            return <PageHeaderShimmer className={styles.header} coverRadius=\"round\" />;\n        }\n        return <PageHeaderArtist className={styles.header} artistMeta={artist.meta} coverLink={coverLink} ref={ref} />;\n    }, [artist.isLoading, artist.meta, coverLink, ref]);\n\n    return (\n        <AnalyticsPageProvider pageId={AnalyticsPage.ARTIST}>\n            <div className={styles.averageColorBackground} style={headerStyle as CSSProperties} />\n            <ScrollableContent className={styles.root} containerClassName={styles.content}>\n                <div>\n                    <Header />\n                    {artistHeader}\n                    <div className={styles.recents}>\n                        {artist.isPopularTracksExist && (\n                            <div\n                                className={clsx(styles.popularTracksBlock, {\n                                    [styles.popularTracksBlock_withLastRelease]: artist.isLastReleaseExists\n                                })}\n                            >\n                                <BlockHeader\n                                    className={clsx(styles.carouselContainer, styles.important)}\n                                    title={formatMessage({ id: 'entity-names.popular-tracks' })}\n                                />\n                                <TracksList\n                                    className={clsx(styles.popularTracksContainer, styles.tracksContainer)}\n                                    isLoading={artist.isLoading}\n                                    variant={TrackVariant.PLAYLIST}\n                                >\n                                    {artist.popularTracks?.map((track: TrackWithArtistsModel, index: number) => {\n                                        return (\n                                            <TrackPlaylist\n                                                key={track.id}\n                                                track={track}\n                                                playContextParams={playContextParams(track.id)}\n                                                hasDuplicatesBefore={hasDuplicatesBefore(\n                                                    artist.popularTracks,\n                                                    track,\n                                                    index\n                                                )}\n                                            />\n                                        );\n                                    })}\n                                </TracksList>\n                            </div>\n                        )}\n                        {artist.isLastReleaseExists && (\n                            <div className={styles.lastReleaseBlock}>\n                                <BlockHeader\n                                    className={clsx(styles.lastReleaseHeader, styles.important)}\n                                    title={formatMessage({ id: 'entity-names.recently-release' })}\n                                />\n                                {artist.isLoading ? (\n                                    <EntityCardShimmer className={styles.lastReleaseCard} />\n                                ) : (\n                                    <AlbumCard className={styles.lastReleaseCard} album={artist.lastRelease} />\n                                )}\n                            </div>\n                        )}\n                    </div>\n                    <div className={styles.carouselBlocks}>\n                        {artist.isPopularAlbumsExists && (\n                            <AlbumsCarousel\n                                headerClassName={styles.carouselHeader}\n                                containerClassName={clsx(styles.carouselContainer, styles.important)}\n                                albums={artist.popularAlbums}\n                                isLoading={artist.isLoading}\n                                title={artist.popularAlbumsTitle}\n                            />\n                        )}\n                        {artist.isPlaylistsExist && (\n                            <PlaylistsCarousel\n                                isLoading={artist.isLoading}\n                                title={formatMessage({ id: 'entity-names.artist-playlist' })}\n                                playlists={artist.playlists}\n                                containerClassName={clsx(styles.carouselContainer, styles.important)}\n                                headerClassName={styles.carouselHeader}\n                            />\n                        )}\n                        {artist.isSimilarArtistsExist && (\n                            <CarouselBlock\n                                title={formatMessage({ id: 'entity-names.similar-artists' })}\n                                isLoading={artist.isLoading}\n                                headerClassName={styles.carouselHeader}\n                                containerClassName={clsx(styles.carouselContainer, styles.important)}\n                            >\n                                {artist.similarArtists.map((artistItem: ArtistModel) => (\n                                    <ArtistCard key={artist.id} artist={artistItem} contentLinesCount={3} />\n                                ))}\n                            </CarouselBlock>\n                        )}\n                    </div>\n                </div>\n                <Footer className={styles.footer} />\n            </ScrollableContent>\n        </AnalyticsPageProvider>\n    );\n});\n","'use client';\n\nimport { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\n\nimport { NotFound } from '@/widgets/not-found/index.js';\n\nimport { useStore } from '@/shared/lib/index.js';\n\nexport const ArtistNotFoundPage = observer(() => {\n    const { artist } = useStore();\n\n    useEffect(() => {\n        return () => {\n            artist.reset();\n        };\n    }, [artist]);\n\n    return <NotFound />;\n});\n","import { TrackId } from '@yandex-music-int/resource-collection';\n\nimport { LoadingState } from '@/shared/lib/index.js';\n\nimport { PlaylistItemModel } from '../model/PlaylistItem.js';\n\n/**\n * Функция для изменения состояния у определенных треков\n * @param trackIds Массив id треков, у которых необходимо поменять состояние\n * @param items Массив элементов для виртуального скролла\n * @param state Новое состояние для конкретного трека\n */\nexport const updatePlaylistItemsState = (\n    trackIds: TrackId[],\n    items: PlaylistItemModel[],\n    state: LoadingState\n): void => {\n    items.forEach((item: PlaylistItemModel) => {\n        if (trackIds.includes(item.id)) {\n            item = {\n                id: item.id,\n                data: null,\n                loadingState: state\n            };\n        }\n    });\n};\n","import { Instance, types } from 'mobx-state-tree';\n\nimport { TrackWithArtists } from '@/features/track/index.js';\n\nimport { LoadingState } from '@/shared/lib/index.js';\n\nexport const PlaylistItem = types.model('PlaylistItem', {\n    id: types.union(types.string, types.number),\n    data: types.maybeNull(TrackWithArtists),\n    loadingState: types.enumeration(Object.values(LoadingState))\n});\n\nexport type PlaylistItemModel = Instance<typeof PlaylistItem>;\n","import { cast, flow, getEnv, Instance, types } from 'mobx-state-tree';\n\nimport { HttpErrorException, HttpResponseStatusCode } from '@yandex-music-int/http-client';\nimport {\n    UsersResourcePlaylistsParams,\n    UsersResourcePlaylistWithTracksIds,\n    PlaylistTrackId,\n    TracksMetaParams,\n    Track,\n    PlaylistResourceParams,\n    PlaylistWithTracksIds\n} from '@yandex-music-int/resource-collection';\n\nimport { PlaylistMeta, playlistResponseToMetaModel } from '@/features/playlist/index.js';\nimport { trackWithArtistsResponseToModel } from '@/features/track/index.js';\n\nimport { LoadingState, StoreEnv } from '@/shared/lib/index.js';\n\nimport { updatePlaylistItemsState } from '../lib/updatePlaylistItemsState.js';\n\nimport { PlaylistItem, PlaylistItemModel } from './PlaylistItem.js';\n\nconst INITIAL_TRACKS_COUNT_TO_FETCH = 10;\n\nexport const Playlist = types\n    .model('Playlist', {\n        meta: types.maybeNull(PlaylistMeta),\n        items: types.array(PlaylistItem),\n        errorStatusCode: types.maybeNull(types.number),\n        loadingState: types.enumeration(Object.values(LoadingState))\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getTracks: flow(function* ({ trackIds }: TracksMetaParams): Generator<Promise<Track[]>, void, Track[]> {\n                const { tracksResource, logger } = getEnv<StoreEnv>(self);\n\n                try {\n                    if (!self.meta?.uid || !self.meta?.kind) {\n                        return;\n                    }\n\n                    updatePlaylistItemsState(trackIds, self.items, LoadingState.PENDING);\n\n                    const data = yield tracksResource.getTracksMeta({\n                        trackIds\n                    });\n\n                    self.items = cast(\n                        self.items.map((item: PlaylistItemModel) => {\n                            const trackData = data.find((track: Track) => String(track?.id) === item.id);\n\n                            if (trackData) {\n                                return {\n                                    id: trackData.id,\n                                    data: trackWithArtistsResponseToModel(trackData),\n                                    loadingState: LoadingState.RESOLVE\n                                };\n                            }\n\n                            return item;\n                        })\n                    );\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n                    updatePlaylistItemsState(trackIds, self.items, LoadingState.REJECT);\n                }\n            })\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            updateData: flow(function* (data: PlaylistWithTracksIds) {\n                if (data?.error === 'not-found') {\n                    self.errorStatusCode = HttpResponseStatusCode.NOT_FOUND;\n                    self.loadingState = LoadingState.REJECT;\n                    return;\n                }\n\n                self.meta = playlistResponseToMetaModel(data);\n\n                const initialTrackIds: string[] = [];\n\n                self.items = cast(\n                    data.tracks.map((track: PlaylistTrackId, index: number) => {\n                        if (index < INITIAL_TRACKS_COUNT_TO_FETCH) {\n                            initialTrackIds.push(String(track.id));\n                        }\n                        return {\n                            id: String(track.id),\n                            loadingState: LoadingState.IDLE\n                        };\n                    })\n                );\n\n                return yield self.getTracks({ trackIds: initialTrackIds });\n            })\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .actions((self) => {\n        return {\n            getPlaylistByUserIdAndKind: flow(function* ({\n                userId,\n                playlistKind,\n                resumeStream = false,\n                trackMetaType = 'music'\n            }: UsersResourcePlaylistsParams): Generator<\n                Promise<UsersResourcePlaylistWithTracksIds | unknown>,\n                void,\n                UsersResourcePlaylistWithTracksIds\n            > {\n                const { usersResource, logger } = getEnv<StoreEnv>(self);\n\n                if (self.loadingState === LoadingState.PENDING) {\n                    return;\n                }\n\n                try {\n                    self.loadingState = LoadingState.PENDING;\n\n                    const data = yield usersResource.getPlaylistWithTracksIds({\n                        userId,\n                        playlistKind,\n                        resumeStream,\n                        trackMetaType\n                    });\n\n                    if (typeof data.playlistUuid !== 'string') {\n                        self.errorStatusCode = HttpResponseStatusCode.NOT_FOUND;\n                        self.loadingState = LoadingState.REJECT;\n                        return;\n                    }\n\n                    yield self.updateData(data);\n\n                    self.loadingState = LoadingState.RESOLVE;\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    if (\n                        error instanceof HttpErrorException &&\n                        (error.statusCode === HttpResponseStatusCode.NOT_FOUND ||\n                            error.statusCode === HttpResponseStatusCode.BAD_REQUEST)\n                    ) {\n                        self.errorStatusCode = HttpResponseStatusCode.NOT_FOUND;\n                    }\n\n                    self.loadingState = LoadingState.REJECT;\n                }\n            }),\n            getPlaylistByUuid: flow(function* ({\n                playlistUuid,\n                richTracks = false,\n                resumeStream = false\n            }: PlaylistResourceParams): Generator<\n                Promise<UsersResourcePlaylistWithTracksIds | unknown>,\n                void,\n                UsersResourcePlaylistWithTracksIds\n            > {\n                const { playlistResource, logger } = getEnv<StoreEnv>(self);\n\n                if (self.loadingState === LoadingState.PENDING) {\n                    return;\n                }\n\n                try {\n                    self.loadingState = LoadingState.PENDING;\n\n                    const data = yield playlistResource.getPlaylist({\n                        playlistUuid,\n                        resumeStream,\n                        richTracks\n                    });\n\n                    yield self.updateData(data);\n\n                    // @ts-expect-error\n                    // TS считает, что статусы никогда не пересекутся, но на самом деле мы можем уйти со страницы,\n                    // раньше чем закончится последний ретрай и/или запрос, когда уже проставлен статус IDLE\n                    if (self.loadingState !== LoadingState.IDLE) {\n                        self.loadingState = LoadingState.RESOLVE;\n                    }\n                } catch (error) {\n                    if (typeof error === 'string' || error instanceof Error) {\n                        logger.error(error);\n                    }\n\n                    if (\n                        error instanceof HttpErrorException &&\n                        (error.statusCode === HttpResponseStatusCode.NOT_FOUND ||\n                            error.statusCode === HttpResponseStatusCode.BAD_REQUEST)\n                    ) {\n                        self.errorStatusCode = HttpResponseStatusCode.NOT_FOUND;\n                    }\n\n                    if (self.loadingState !== LoadingState.IDLE) {\n                        self.loadingState = LoadingState.REJECT;\n                    }\n                }\n            }),\n            reset() {\n                self.meta = null;\n                self.loadingState = LoadingState.IDLE;\n                self.items = cast([]);\n                self.errorStatusCode = null;\n            }\n        };\n    })\n    // Отключаем правило, так как сложно вывести тип\n    // eslint-disable-next-line @typescript-eslint/typedef\n    .views((self) => ({\n        get isNotFound(): boolean {\n            return (\n                self.loadingState === LoadingState.REJECT && self.errorStatusCode === HttpResponseStatusCode.NOT_FOUND\n            );\n        },\n        get isLoading() {\n            return self.loadingState === LoadingState.PENDING || self.loadingState === LoadingState.IDLE;\n        },\n        get isDisabled() {\n            return self.loadingState === LoadingState.RESOLVE && (self.items.length === 0 || !self.meta?.available);\n        }\n    }));\n\nexport type PlaylistModel = Instance<typeof Playlist>;\n","export { PlaylistPage } from './ui/Playlist/Playlist.js';\nexport { PlaylistNotFoundPage } from './ui/PlaylistNotFound/PlaylistNotFound.js';\nexport { Playlist } from './model/Playlist.js';\n","'use client';\n\nimport { observer } from 'mobx-react-lite';\nimport { notFound } from 'next/navigation.js';\nimport { ReactElement, use, useCallback, useMemo, useEffect, CSSProperties } from 'react';\nimport { ListRange } from 'react-virtuoso';\n\nimport { YaMusicContexts } from '@yandex-music-int/player-contexts';\nimport { useElementOffsetY } from '@yandex-music-int/sol/common/hooks/useElementOffsetY.js';\n\nimport { Header } from '@/widgets/content/index.js';\nimport { PageHeaderShimmer, PageHeaderPlaylist } from '@/widgets/page-header/index.js';\n\nimport { TrackPlaylist } from '@/features/track/index.js';\n\nimport { hasDuplicatesBefore } from '@/entities/playlist/index.js';\n\nimport {\n    CONTAINER_COOKIE_STORAGE,\n    LoadingState,\n    TrackVariant,\n    getAverageBackgroundColor,\n    useContainer,\n    useStore,\n    useRumPage,\n    AnalyticsPageProvider,\n    useCreateFrom,\n    AnalyticsPage,\n    AnalyticsBlock\n} from '@/shared/lib/index.js';\nimport { Footer, TrackShimmer, VirtualScroll } from '@/shared/ui/index.js';\n\nimport { PlaylistItemModel } from '../../model/PlaylistItem.js';\n\nimport styles from './Playlist.module.scss';\n\nconst DEBOUNCE_DURATION_MS = 300;\n\ninterface Props {\n    playlistUuid?: string;\n    userId?: string;\n    kind?: string;\n}\n\nconst HEADER_TO_VIEWPORT_OFFSET_NEW_NAVIGATION = 93;\nconst HEADER_TO_VIEWPORT_OFFSET_OLD_NAVIGATION = 17;\n\nexport const PlaylistPage = observer(({ userId, kind, playlistUuid }: Props): ReactElement => {\n    const from = useCreateFrom({ pageId: AnalyticsPage.PLAYLIST, blockId: AnalyticsBlock.PLAYLIST });\n    const container = useContainer();\n    const cookies = container.get(CONTAINER_COOKIE_STORAGE);\n    let isWebNextNavigationOn = false;\n\n    if (process.env.BUILD_TYPE === 'web') {\n        isWebNextNavigationOn = cookies.get('WebNextNavigation') === 'on';\n    }\n\n    const { playlist } = useStore();\n\n    const averageColor = useMemo(() => {\n        return getAverageBackgroundColor(playlist?.meta?.averageColor);\n    }, [playlist?.meta?.averageColor]);\n\n    const { ref, offsetY } = useElementOffsetY();\n\n    const headerStyle = useMemo(() => {\n        if (offsetY !== undefined) {\n            const initialTranslateHeader = isWebNextNavigationOn\n                ? HEADER_TO_VIEWPORT_OFFSET_NEW_NAVIGATION\n                : HEADER_TO_VIEWPORT_OFFSET_OLD_NAVIGATION;\n            const translate = offsetY - initialTranslateHeader;\n            return {\n                '--average-color-background': averageColor,\n                transform: `translateY(${offsetY >= initialTranslateHeader ? 0 : translate}px)`,\n                opacity: 1\n            };\n        }\n        return {};\n    }, [offsetY, isWebNextNavigationOn, averageColor]);\n\n    useEffect(() => {\n        return () => {\n            if (playlist.uid !== userId || playlist.kind !== kind || playlist.uuid !== playlistUuid) {\n                playlist.reset();\n            }\n        };\n    }, [playlist, userId, kind, playlistUuid]);\n\n    if (playlist.loadingState === LoadingState.IDLE) {\n        if (typeof playlistUuid === 'string') {\n            use(\n                playlist.getPlaylistByUuid({\n                    playlistUuid\n                })\n            );\n        } else {\n            use(\n                playlist.getPlaylistByUserIdAndKind({\n                    userId,\n                    playlistKind: kind\n                })\n            );\n        }\n    }\n\n    useRumPage(playlist.loadingState === LoadingState.RESOLVE);\n\n    if (playlist.isNotFound) {\n        notFound();\n    }\n\n    const playlistHeader = useMemo(() => {\n        if (playlist.isLoading) {\n            return <PageHeaderShimmer className={styles.header} />;\n        }\n        return (\n            <PageHeaderPlaylist\n                playlist={playlist.meta}\n                isDisabled={playlist.isDisabled}\n                className={styles.header}\n                ref={ref}\n            />\n        );\n    }, [playlist.isDisabled, playlist.isLoading, playlist.meta, ref]);\n\n    const customComponents = useMemo(() => {\n        return {\n            Header: () => {\n                return (\n                    <>\n                        <Header />\n                        {playlistHeader}\n                    </>\n                );\n            },\n\n            Footer: () => <Footer className={styles.footer} />\n        };\n    }, [playlistHeader]);\n\n    const getPlaylistTracksByRange = useCallback(\n        (range: ListRange) => {\n            const trackIds = [];\n            for (let i = range.startIndex; i <= range.endIndex; i++) {\n                const item = playlist.items[i] as PlaylistItemModel;\n                if (item?.loadingState === LoadingState.IDLE) {\n                    trackIds.push(item.id);\n                }\n            }\n            if (trackIds.length) {\n                playlist.getTracks({\n                    trackIds\n                });\n            }\n        },\n        [playlist]\n    );\n\n    const itemContentCallback = (index: number): ReactElement | undefined => {\n        const item = playlist?.items?.[index] as PlaylistItemModel;\n\n        if (!item || !item?.data) {\n            return <TrackShimmer className={styles.shimmerItem} variant={TrackVariant.PLAYLIST} />;\n        }\n\n        return (\n            <TrackPlaylist\n                track={item.data}\n                hasDuplicatesBefore={hasDuplicatesBefore(playlist?.items, item.data, index)}\n                playContextParams={{\n                    contextData: {\n                        type: YaMusicContexts.Playlist,\n                        meta: {\n                            id: playlist.meta.uuid\n                        },\n                        from\n                    },\n                    queueParams: {\n                        index\n                    },\n                    loadContextMeta: true\n                }}\n            />\n        );\n    };\n\n    return (\n        <AnalyticsPageProvider pageId={AnalyticsPage.PLAYLIST}>\n            <div className={styles.averageColorBackground} style={headerStyle as CSSProperties} />\n            <VirtualScroll\n                className={styles.root}\n                listClassName={styles.content}\n                customComponents={customComponents}\n                totalCount={playlist.items.length}\n                // Для корректного обновления виртуального скролла\n                // eslint-disable-next-line react/jsx-no-bind\n                itemContentCallback={itemContentCallback}\n                onGetDataByRange={getPlaylistTracksByRange}\n                debounceDurationInMs={DEBOUNCE_DURATION_MS}\n                initialItemCount={playlist.items.length}\n            />\n        </AnalyticsPageProvider>\n    );\n});\n","'use client';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { NotFound } from '@/widgets/not-found/index.js';\n\nexport const PlaylistNotFoundPage = observer(() => {\n    return <NotFound />;\n});\n","export const EXTERNAL_API_CLIENT_VERSION = '1.0';\n","export enum ClientType {\n    WEB = 'YandexMusicWebNext',\n    DESKTOP = 'YandexMusicDesktopApp'\n}\n","import { getPlatform } from '../lib/platform/getPlatform.js';\nimport { getPlatformName } from '../lib/platform/getPlatformName.js';\n\nimport { EXTERNAL_API_CLIENT_VERSION } from './constants/externalApiClientVersion.js';\nimport { ClientType } from './types/ClientType.js';\n\nconst createClientName = (type: string, version: string): string => {\n    return `${type}/${version}`;\n};\n\nexport const getExternalApiClientName = (): string => {\n    if (process.env.BUILD_TYPE === 'desktop') {\n        if (typeof window !== 'undefined') {\n            const clientType = `${ClientType.DESKTOP}${getPlatformName(getPlatform())}`;\n\n            return createClientName(clientType, EXTERNAL_API_CLIENT_VERSION);\n        }\n    }\n\n    return createClientName(ClientType.WEB, EXTERNAL_API_CLIENT_VERSION);\n};\n","export { getExternalApiClientName } from './getExternalApiClientName.js';\n","import { Platform } from '../types/Platform.js';\n\nimport { ClientPlatform } from './types/ClientPlatform.js';\n\nexport const getPlatformName = (platform: Platform | undefined): string | null => {\n    switch (platform) {\n        case 'win32':\n            return ClientPlatform.WINDOWS;\n        case 'darwin':\n            return ClientPlatform.MACOS;\n        case 'linux':\n            return ClientPlatform.LINUX;\n    }\n\n    return null;\n};\n","export enum ClientPlatform {\n    WINDOWS = 'Windows',\n    MACOS = 'MacOS',\n    LINUX = 'Linux'\n}\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"NotificationUpdate_root__hpSQi\",\"important\":\"NotificationUpdate_important___0WHj\",\"text\":\"NotificationUpdate_text__YylYD\",\"button\":\"NotificationUpdate_button__F3O16\",\"message\":\"NotificationUpdate_message__rLYpW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"TitleBar_root__QjdOZ\",\"button\":\"TitleBar_button__9MptL\",\"closeButton\":\"TitleBar_closeButton__Epxh7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"SonataControlsDesktop_root__oluUH\",\"sonataButtons\":\"SonataControlsDesktop_sonataButtons__ux0qT\",\"sonataButton\":\"SonataControlsDesktop_sonataButton__FTykq\",\"playButtonIcon\":\"SonataControlsDesktop_playButtonIcon__BgNUF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Album_root__Q0lER\",\"important\":\"Album_important__BgPFO\",\"averageColorBackground\":\"Album_averageColorBackground__Azuso\",\"header\":\"Album_header__AooR_\",\"content\":\"Album_content__lB0Uw\",\"footerContainer\":\"Album_footerContainer__FmHR2\",\"carousel\":\"Album_carousel__XJnod\",\"carouselContainer\":\"Album_carouselContainer__7NJck\",\"textItem\":\"Album_textItem__fRm1d\",\"text\":\"Album_text__qHJw_\",\"shimmerItem\":\"Album_shimmerItem__Qbpj3\",\"footer\":\"Album_footer__9zwOl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Artist_root__K_jRw\",\"averageColorBackground\":\"Artist_averageColorBackground__5iOpY\",\"header\":\"Artist_header__I7G_m\",\"content\":\"Artist_content__B8c8f\",\"recents\":\"Artist_recents__Oj3Y3\",\"popularTracksBlock\":\"Artist_popularTracksBlock__ETF5y\",\"popularTracksBlock_withLastRelease\":\"Artist_popularTracksBlock_withLastRelease__0aHnG\",\"popularTracksContainer\":\"Artist_popularTracksContainer__Yc6SW\",\"tracksContainer\":\"Artist_tracksContainer__OPqVm\",\"lastReleaseBlock\":\"Artist_lastReleaseBlock__bWGDw\",\"carouselHeader\":\"Artist_carouselHeader__lVeWu\",\"carouselContainer\":\"Artist_carouselContainer__8v2E_\",\"important\":\"Artist_important__M0WDR\",\"popularTracks\":\"Artist_popularTracks__IGPnd\",\"lastReleaseHeader\":\"Artist_lastReleaseHeader__h30bq\",\"lastReleaseCard\":\"Artist_lastReleaseCard__6eY78\",\"carouselBlocks\":\"Artist_carouselBlocks__eQGOp\",\"footer\":\"Artist_footer__B_78X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Playlist_root__soQjV\",\"averageColorBackground\":\"Playlist_averageColorBackground__sTYXX\",\"header\":\"Playlist_header__AFLVW\",\"content\":\"Playlist_content__jK_zQ\",\"shimmerItem\":\"Playlist_shimmerItem__D5COd\",\"footer\":\"Playlist_footer__FT8cm\"};","import { HttpException } from './HttpException.js';\nexport class HttpErrorException extends HttpException {\n    statusCode;\n    constructor(message, options) {\n        super(message, {\n            code: 'E_HTTP_CLIENT_NON_2XX_3XX_RESPONSE',\n            cause: options.cause\n        });\n        this.statusCode = options.statusCode;\n        // Set the prototype explicitly.\n        // @see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, HttpErrorException.prototype);\n    }\n}\n//# sourceMappingURL=HttpErrorException.js.map","import { BaseException } from '@yandex-music-int/exception';\nexport class HttpException extends BaseException {\n    name = 'HttpException';\n    constructor(message = 'Http Client error', { code = 'E_HTTP_CLIENT', ...restOptions } = {}) {\n        super(message, { code, ...restOptions });\n        // Set the prototype explicitly.\n        // @see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, HttpException.prototype);\n    }\n}\n//# sourceMappingURL=HttpException.js.map","export var HttpResponseStatusCode;\n(function (HttpResponseStatusCode) {\n    HttpResponseStatusCode[HttpResponseStatusCode[\"NOT_FOUND\"] = 404] = \"NOT_FOUND\";\n    HttpResponseStatusCode[HttpResponseStatusCode[\"BAD_REQUEST\"] = 400] = \"BAD_REQUEST\";\n})(HttpResponseStatusCode || (HttpResponseStatusCode = {}));\n//# sourceMappingURL=HttpResponseStatusCode.js.map","export { HttpResponseStatusCode } from './types/HttpResponseStatusCode.js';\nexport { HttpException } from './exceptions/HttpException.js';\nexport { HttpErrorException } from './exceptions/HttpErrorException.js';\n//# sourceMappingURL=index.js.map"],"names":["Promise","resolve","then","__webpack_require__","bind","t","WebHomeAllTabPodcastsNavigatedTo","WebHomeAllTabNewReleasesImpressionNavigatedTo","WebHomeAllTabHitsNavigatedTo","WebHomeAllTabChartImpressionNavigatedTo","WebHomeAllTabRecentlyPlayedNavigatedTo","WebHomeAllTabMixesImpressionNavigatedTo","WebHomeNewReleasesTabNavigatedTo","WebHomeChartTabNavigatedTo","WebHomeMixesTabNavigatedTo","EvgenAnalyticsGlobalParams","makeParams","EvgenAnalyticsPlatformParams","YaMusicAnalytics","evgen","eventTracker","globalParamsProvider","platformParamsProvider","trackEvent","event","params","mergedParameters","getGlobalParams","getPlatformParams","sendEvent","singletonAnalytics","AnalyticsProvider","children","param","metrika","useMetrika","logger","useLogger","analytics","useMemo","isLoaded","createEventTracker","eventsSender","isDebug","queue","createQueue","callback","maxSendingItemsPerRequest","requestsSendingDelay","sendRequests","length","data","splice","window","setTimeout","add","item","push","events","log","count","createGlobalParamsProvider","globalParams","createPlatformParamsProvider","jsx_runtime","jsx","AnalyticsContext","Provider","value","AuthorizationProvider","observer","user","authorization","host","serverSideHost","container","useContainer","useStore","get","CONTAINER_AUTHORIZATION","pathname","searchParams","tld","useUrl","setRedirectUrl","setTokenOwnerLogin","account","login","check","BlackboxProvider","userIp","ContainerProvider","hostTld","env","use","getContainer","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","ContainerContext","handleUpdate","formatMessage","notify","latestVersion","desktopEvents","on","DesktopEvents","ON_UPDATE_AVAILABLE","version","NotificationUpdate","containerId","NotificationContainerId","APPLICATION_UPDATE","handleDesktopEvents","sendApplicationReadyEvent","send","ON_APPLICATION_READY","DesktopProvider","platform","getPlatform","useIntl","useNotify","useEffect","jsxs","Fragment","Notification","className","clsx","updateNotificationContainer","updateNotificationContainer_application_windows","Platform","WINDOWS","updateNotificationContainer_application_macos","MACOS","enableMultiContainer","position","singletonHistory","HistoryProvider","router","useRouter","canBack","setCanBack","useState","canForward","setCanForward","state","setState","history","sessionStorage","CONTAINER_SESSION_STORAGE","HistoryList","updateState","useCallback","replaceState","replace","href","pushState","back","forward","HistoryContext","setClientSideLayout","document","body","classList","remove","settings","setLayout","getLayoutName","innerWidth","LayoutProvider","userAgent","clientTld","contentRef","setContentRef","setClientTld","setPlatform","layout","theme","Theme","Dark","handleWindowResize","throttle","useLayoutEffect","addEventListener","removeEventListener","setContentRefHandler","ref","colorScheme","setTheme","LayoutContext","prefetchRequests","store","hasAuthorizationCredentials","library","experiments","slides","authorizationAction","getAbout","setUnauthorized","all","getData","isAuthorized","getSettings","getUserSlides","PrefetchDataProvider","loadingState","LoadingState","IDLE","MediaAction","Events","listeners","muted","callbackArray","off","callbacks","k","l","clearListeners","key","Object","prototype","hasOwnProperty","call","trigger","args","slice","arguments","muteEvents","unmuteEvents","config","audio","retry","AudioError","Error","constructor","message","name","AudioErrorStatic","NO_IMPLEMENTATION","NOT_PRELOADED","BAD_STATE","AudioStatic","EVENT_PLAY","EVENT_OUTER_PLAY","EVENT_STOP","EVENT_PAUSE","EVENT_RESUME","EVENT_OUTER_PAUSE","EVENT_PROGRESS","EVENT_POSITION","EVENT_LOADING","EVENT_LOADED","EVENT_VOLUME","EVENT_SPEED","EVENT_ENDED","EVENT_CRASHED","EVENT_ERROR","HLS_EVENT_ERROR","EVENT_DESTROY","EVENT_STATE","EVENT_SWAP","PRELOADER_EVENT","STATE_INIT","STATE_CRASHED","STATE_IDLE","STATE_PLAYING","STATE_PAUSED","AudioHTML5LoaderStatic","updateInterval","EMPTY_SOUND","EVENT_NATIVE_PLAY","EVENT_NATIVE_PAUSE","EVENT_NATIVE_TIMEUPDATE","EVENT_NATIVE_ENDED","EVENT_NATIVE_DURATION","EVENT_NATIVE_LOADING","EVENT_NATIVE_META","EVENT_NATIVE_CANPLAY","EVENT_NATIVE_ERROR","promiseLoadedEvents","promisePlayingEvents","promiseMetadataEvents","PlaybackError","src","PlaybackErrorStatic","CONNECTION_ABORTED","NETWORK_ERROR","DECODE_ERROR","BAD_DATA","DONT_START","html5PlayerErrorCodes","BrowserDetect","isOnlyDeviceVolume","noVolume","createElement","volume","Math","abs","e","parseParams","url","search","split","reduce","result","part","parts","updateUrl","paramsInUrl","assign","getCookie","cookie","map","prev","curr","trim","loaderId","AudioHTML5Loader","browser","emitter","lastGoodTime","lastUpdate","notLoading","output","shouldUseHlsPlayer","skipEmptySound","shouldPause","shouldPlay","playing","ended","promiseMode","isHlsTrack","promises","audioContext","loaderTimer","promiseCheckTO","clearInitListener","clearNativePauseListener","hls","isAutoplayable","whenReady","startupAudio","updateProgress","onNativeLoading","onNativeEnded","onNativeError","onNativePause","onNativePlay","init","currentTime","Number","Date","buffered","loaded","end","start","duration","pause","error","code","console","warn","restart","errorMsg","String","initUserEvents","deinitUserEvents","initNativeEvents","initHlsEvents","Z","ERROR","destroy","deinitNativeEvents","reject","initHls","catch","initAudioElement","initEvents","liveDurationInfinity","maxBufferSize","attachMedia","MEDIA_ATTACHED","fatal","type","ErrorTypes","startLoad","MEDIA_ERROR","recoverMediaError","DESTROYING","initAndCheckAutoplay","loop","preload","autoplay","resume","success","fail","info","initListener","nativePauseListener","load","play","autoplayListener","breakStartup","reason","waitFor","listen","waitPromise","promise","cancelPromise","_","waitEventPromise","listener","keys","racePromise","race","cancelWait","abortPromises","promiseMetadataCheck","readyState","HAVE_METADATA","promiseMetadata","promiseLoadedCheck","clearTimeout","min","diff","promiseLoaded","promiseHandler","promisePlayingCheck","time","paused","promisePlaying","promiseStartPlaying","ready","startPlaying","timer","test","vsid","now","toString","loadSource","stop","stopLoad","startPlay","loadMetadata","setPosition","isFinite","toggleCrossDomain","crossOrigin","removeAttribute","createSource","needRestart","createMediaElementSource","connect","destination","disconnect","index","volumeLevel","outputAudioNode","defaultPlaybackRate","playbackRate","audioSrc","audioNotLoading","autoplayable","playerId","AudioHTML5","webAudioApi","activeLoader","speed","loaders","audioOutput","preprocessor","setActive","addLoader","loader","subscribeLoaderEvents","offset","getLoader","forEach","toggleWebAudioAPI","createGain","gain","biquadFilterInput","biquadFilterOutput","setAudioPreprocessor","getPosition","getDuration","getLoaded","setTargetAtTime","speedLevel","isPreloaded","isPreloading","playPreloaded","getSrc","isDeviceVolume","audio_player_playerId","AudioPlayer","createAudioContext","played","lastSkip","playId","initInProgress","implementation","onAudioPlayerInit","AudioContext","onBeforeUnload","createCore","retryInit","doRetry","retryPromise","subscribeImplementationEvents","populateEvents","navigator","maxTouchPoints","changed","waitEvents","action","resolveEvents","rejectEvents","resolvePromise","rejectPromise","cleanupEvents","outerEvent","getVolume","getSpeed","getPlayed","initPromise","getState","generatePlayId","whenPlay","whenPause","whenStop","preloadedSrc","whenPreload","preloader","setVolume","setSpeed","random","getPlayId","AudioCoreHtml5Adapter","pauseHandlers","resumeHandlers","core","setProgress","audioPosition","audioVolume","onAudioEnd","callBack","onAudioPaused","handler","originalCallback","onAudioResume","onAudioUpdatingProgress","onAudioSetProgress","onAudioSetVolume","offAudioEnd","offAudioPaused","pauseHandler","find","offAudioResume","offAudioUpdatingProgress","offAudioSetProgress","offAudioSetVolume","ApplyContextPlugin","apply","hooks","playback","afterContextSet","tap","context","currentContext","playback_build","$n","updateMoveActionsAvailability","currentIndex","queueState","currentOrder","order","hasNextTrack","hasPrevTrack","availableActions","moveBackward","moveForward","AvailableActionsPlugin","entityList","onChange","beforeEntityPlayingProcessStart","tapPromise","TotalPlayedTimePlugin","playerState","status","currentEntity","Xz","PLAYING","entity","saveTimeStageOfPlayback","entities_build","EE","PAUSED","NOT_PLAYING","clearTimeStagesOfPlayback","beforeEntityChange","beforeContextSet","createISOTimestamp","date","toISOString","createEntityPlay","contextEntityPair","totalPlayedSeconds","endPositionSeconds","trackId","meta","id","albumId","getAlbumId","RX","Unloaded","albums","album","trackLengthSeconds","durationMs","resultTotalPlayedSeconds","resultEndPositionSeconds","timestamp","from","build","xA","session","radioSessionId","isSent","PlaysException","BaseException","y","restOptions","setPrototypeOf","PlaysPlugin","entityPlaysMap","playsResource","httpClient","playsResourceConfig","resource_collection_build","ol","sendStartEntityPlay","sendEndEntityPlay","v4","entityPlay","saveEntityPlay","sendPlays","clientNow","plays","contextId","entityId","afterError","cause","progress","playsArray","undefined","METADATA_ARTWORK_SIZES","MEDIA_HANDLERS_SPECIAL","PLAY","PAUSE","STOP","SEEK","MediaControlsPlugin","browserName","browserVersion","isSupported","handleMediaActionEvents","NEXT","PREV","seekTime","prepareMetadata","track","artwork","title","artists","coverUri","artist","artistEntity","join","sizes","size","updateMetadata","metadata","mediaSession","MediaMetadata","handlePlayerEvents","unsubscribeFromMoveBackwardChange","unsubscribeFromMoveForwardChange","KX","START","UPDATING_PROGRESS","setActionHandler","handlerName","canMoveBackward","canMoveForward","LoggerPlugin","resultError","createSign","secretKey","tsInSeconds","encoder","TextEncoder","bufKey","encode","crypto","subtle","importKey","hash","encKey","rawMessage","bufMessage","sign","uint8Array","Uint8Array","arrayBuffer","btoa","fromCharCode","DownloadInfoMediaProviderException","DownloadInfoMediaProvider","resource","HZ","prefixUrl","overembed","externalDomain","downloadInfoParams","formatFlags","direct","preview","requireMp3Link","canUseStreaming","debug","isAliceRequester","flags","createFormatFlags","formatFlagsArray","codec","floor","getStorageData","storagesData","storageData","getSrcData","storageUrl","downloadInfoUrl","srcLink","createSrcLink","srcData","token","createMd5","string","AA","BB","CC","DD","a","b","c","d","RotateLeft","lValue","iShiftBits","AddUnsigned","lX","lY","lX4","lY4","lX8","lY8","lResult","FF","x","s","ac","GG","HH","II","z","WordToHex","WordToHexValue","WordToHexValue_temp","lCount","lByte","substr","ConvertToWordArray","lWordCount","lMessageLength","lNumberOfWords_temp1","lNumberOfWords","lNumberOfWords_temp2","lWordArray","Array","lBytePosition","lByteCount","charCodeAt","Utf8Encode","utftext","n","temp","toLowerCase","path","urlSuffix","ts","YaMusicEntityProviderException","YaMusicEntityProvider","loadEntities","ids","getTracksMeta","trackIds","entityMeta","entitiesMeta","A4","Unknown","singletonSonata","SonataProvider","sonataState","storage","CONTAINER_STORAGE","sonata","CONTAINER_CONFIG_TOKEN","httpClientFactory","CONTAINER_HTTP_CLIENT_TOKEN","credentials","contextFactory","YaMusicContextFactory","common","client","getExternalApiClientName","language","oauth","getTLDHost","player","entityFactory","YaMusicEntityFactory","mediaProvider","entityProvider","audioCore","AudioCoreHtml5","SonataPlayer","windowPaginationConfig","windowSize","setupQueueWindowSize","plugins","unsubscribeFromStatusChange","currentContextType","currentContextId","setContextId","setContextType","unsubscribeFromEventChange","setEntityMeta","setStatus","unsubscribeFromContextChange","setCanMoveBackward","setCanMoveForward","unsubscribeFromVolumeChange","newVolume","StorageKeys","YmPlayerVolume","SonataContext","defaultState","showWizard","collection","items","playlistsCreated","playlistsLiked","landing","tabs","main","otherAlbumVersions","latestGenreAlbums","otherArtistAlbums","popularTracks","similarArtists","popularAlbums","playlists","tracks","contextType","AudioPlayerStatus","playlist","userSlidesLoadingState","artistSlidesLoadingState","userItems","artistItems","vibe","getLastLoadingState","vibeResetLoadingState","isLoading","results","vibeSettings","Albums","types","model","enumeration","values","sort","maybeNull","Sort","array","AlbumWithArtists","actions","flow","userId","page","pageSize","sortBy","sortOrder","metaType","usersResource","getEnv","self","PENDING","getLikedAlbums","cast","albumWithArtistsResponseToModel","RESOLVE","REJECT","Artists","Artist","getLikedArtists","artistResponseToModel","updateItemsByPage","mappedRawItems","startIndex","localIndex","PlaylistsCreated","Playlist","pager","Pager","alreadyRequestedPages","number","kinds","requests","getKinds","playlistsKinds","getPlaylistsKinds","withLikesCount","has","concat","set","initialItem","finalItem","getPlaylistsByKinds","withTracks","perPage","total","playlistResponseToModel","PlaylistsLiked","likedPlaylists","getLikedPlaylists","delete","Collection","Landing","Main","SUPPORTED_TYPES","SearchType","ALBUM","ARTIST","PLAYLIST","TRACK","UGC_TRACK","getSupportedTypes","SearchFilter","TOP","filter","searchInstantMixedResultsResponseToModel","playlistWithArtistsResponseToModel","ugcTrackWithArtistsResponseToModel","trackWithArtistsResponseToModel","Search","searchRequestId","optional","SearchItem","getSearchResults","text","searchResource","getInstantMixedSearch","resetResults","sendFeedback","views","isEmpty","Root","Experiments","User","Settings","Album","Library","SonataState","Slides","VibeActions","VibeSettings","createRootModel","snapshot","create","MODELS_EXCLUDED_FROM_REHYDRATION","excludeModelsFromRehydration","accumulator","modelName","cloneDeep","enableStaticRendering","StoreProvider","nonce","useRef","useContext","ServerInsertedHTMLContext","resources","useResources","storeEnv","__STATE_SNAPSHOT__","syncStores","lastSnapshot","applySnapshot","StoreContext","TranslationsProvider","dictionary","messages","IntlProvider","defaultLocale","locale","TvmProvider","sendWindowMinimizeEvent","WINDOW_MINIMIZE","sendWindowMaximizeEvent","WINDOW_MAXIMIZE","sendWindowCloseEvent","WINDOW_CLOSE","closeToast","ON_UPDATE_INSTALL","div","styles","Caption","variant","Button","onClick","color","radius","BaseNotification","TitleBarButton","ariaLabel","button","aria-label","TitleBar","isWindowsPlatform","minimize","maximize","close","onDoubleClick","svg","width","height","viewBox","fill","xmlns","SonataControlsDesktop","disabled","isPlaying","onClickNext","onClickPrev","onClickPlayPause","FutureFeature","withRipple","icon","Icon","PlayButton","iconSize","iconClassName","SonataControlsMobile","SonataControls","isMobile","useSonata","togglePlay","toggleVibePlay","usePlayableVibeContext","seeds","pageIdForFrom","AnalyticsPage","HOME","blockIdForFrom","AnalyticsBlock","RUP_MAIN","handlePlayPauseClick","togglePause","handleNextTrackClick","handlePrevTrackClick","SonataControlsContainer","musicEntityMetaResponseToModel","trackWithArtistsResponse","trackResponseToModel","MusicEntityMeta","Track","props","YaMusicContexts","boolean","maybe","useOnLikeClick","pendingLibraryAction","setPendingLibraryAction","BaseNotificationError","toggleLike","UsersResourceLibraryResponse","OK","NotificationLike","INFO","feedbackType","isLiked","RotorResourceSessionFeedback","LIKE","UNLIKE","isVibeContext","useOnDislikeClick","toggleDislike","NotificationDislike","isDisliked","DISLIKE","UNDISLIKE","getPreparedIds","createVolumeItemText","VolumeType","TEXT","createVolumeItemTrack","getVolumeItemKeyText","getVolumeItemKeyTrack","insertDataToVolumeItems","indexItems","trackIndex","trackPosition","volumeIndex","makeFlatVolumeItems","trackIndexInContext","volumes","updateVolumeItemsState","RelatedAlbums","VolumeItemTrack","literal","union","TrackWithArtists","VolumeItemText","VolumeItem","errorStatusCode","isNonMusicType","AlbumType","PODCAST","AUDIOBOOK","includes","isOtherArtistAlbumsAvailable","Boolean","various","isLatestGenreAlbumsAvailable","genre","isNotFound","HttpResponseStatusCode","NOT_FOUND","isAlbumLoadingError","isOtherAlbumVersionsExist","isLatestGenreAlbumsExist","isOtherArtistAlbumsExist","isAlbumLoading","isLatestGenreAlbumsLoading","isOtherArtistAlbumsLoading","getLatestGenreAlbums","topResource","getTopByGenre","getOtherArtistAlbums","artistsResource","artistId","getSafeDirectAlbums","getTracks","tracksResource","albumResource","getRoot","isAlbumVersionsDisabled","checkExperiment","WebNextAlbumDisableVersions","isAlbumTracksDisabled","WebNextAlbumDisableTracks","isLatestGenreAlbumsDisabled","WebNextAlbumDisableLatestGenreAlbums","isOtherArtistAlbumsDisabled","WebNextAlbumDisableOtherArtistAlbums","latestGenreAlbumsRequest","getOtherArtistAlbumsRequest","getAlbumWithTracksIds","resumeStream","duplicates","initialTrackIds","category","TopResourceCategoryType","RECENT_ALBUMS","period","Period","WEEK","limit","allSettled","HttpErrorException","statusCode","BAD_REQUEST","reset","clear","AlbumPage","useCreateFrom","pageId","blockId","albumNotificationCounter","CONTAINER_COOKIE_STORAGE","averageColor","getAverageBackgroundColor","offsetY","useElementOffsetY","headerStyle","translate","transform","opacity","current","albumHeader","PageHeaderShimmer","PageHeaderAlbum","aria-labelledby","customComponents","Header","Footer","AlbumsCarousel","containerClassName","getAlbumTracksByRange","i","range","endIndex","useRumPage","notFound","itemCount","AnalyticsPageProvider","style","VirtualScroll","listClassName","totalCount","itemContentCallback","TrackShimmer","TrackVariant","TextShimmer","TrackAlbum","albumArtists","playContextParams","contextData","queueParams","weight","FormattedMessage","onGetDataByRange","debounceDurationInMs","initialItemCount","AlbumNotFoundPage","NotFound","artistBriefInfoResponseToMeta","stats","lastMonthListeners","concatPopularAlbums","alsoAlbums","ArtistMeta","lastRelease","ArtistEntity","PlaylistWithArtists","isLastReleasesDisabled","WebNextArtistDisableLastReleases","isPopularTracksDisabled","WebNextArtistDisablePopularTracks","isSimilarArtistsDisabled","WebNextArtistDisableSimilarArtists","isPopularAlbumsDisabled","WebNextArtistDisablePopularAlbums","isPlaylistsDisabled","WebNextArtistDisablePlaylists","lastReleases","getBriefInfo","popularTracksCount","fetchPlaylistLikesCounts","POPULAR_ALBUMS_COUNT","playlistResponseToMetaModel","artistReset","getArtistSlides","isPopularTracksExist","popularAlbumsTitle","counts","compilations","isPopularAlbumsExists","isSimilarArtistsExist","isPlaylistsExist","isLastReleaseExists","ArtistPage","coverLink","WebRewind2023","findIndex","loadContextMeta","artistHeader","coverRadius","PageHeaderArtist","artistMeta","ScrollableContent","BlockHeader","TracksList","TrackPlaylist","hasDuplicatesBefore","EntityCardShimmer","AlbumCard","headerClassName","PlaylistsCarousel","CarouselBlock","ArtistCard","artistItem","contentLinesCount","ArtistNotFoundPage","updatePlaylistItemsState","PlaylistItem","PlaylistMeta","uid","kind","trackData","updateData","getPlaylistByUserIdAndKind","playlistKind","trackMetaType","getPlaylistWithTracksIds","playlistUuid","getPlaylistByUuid","richTracks","playlistResource","getPlaylist","isDisabled","available","PlaylistPage","uuid","playlistHeader","PageHeaderPlaylist","getPlaylistTracksByRange","PlaylistNotFoundPage","ClientType","WEB","DESKTOP","createClientName","clientType","getPlatformName","ClientPlatform","LINUX","module","exports","_HttpException_js__WEBPACK_IMPORTED_MODULE_0__","options","HttpException","_yandex_music_int_exception__WEBPACK_IMPORTED_MODULE_0__"],"sourceRoot":""}